
Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800606c  0800606c  0000808c  2**0
                  CONTENTS
  4 .ARM          00000008  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006074  08006074  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006074  08006074  00007074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800607c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000808c  2**0
                  CONTENTS
 10 .bss          00000334  2000008c  2000008c  0000808c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000808c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5d7  00000000  00000000  000080bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002857  00000000  00000000  00017693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00019ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b63  00000000  00000000  0001adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b17  00000000  00000000  0001b923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139cd  00000000  00000000  0003e43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc3e7  00000000  00000000  00051e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e1ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043c4  00000000  00000000  0011e234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001225f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ebc 	.word	0x08005ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08005ebc 	.word	0x08005ebc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <fsm_automatic>:



int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	switch (status) {
 8000574:	4b5f      	ldr	r3, [pc, #380]	@ (80006f4 <fsm_automatic+0x184>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	2b05      	cmp	r3, #5
 800057c:	f200 80af 	bhi.w	80006de <fsm_automatic+0x16e>
 8000580:	a201      	add	r2, pc, #4	@ (adr r2, 8000588 <fsm_automatic+0x18>)
 8000582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000586:	bf00      	nop
 8000588:	080005a1 	.word	0x080005a1
 800058c:	080005a9 	.word	0x080005a9
 8000590:	080005cd 	.word	0x080005cd
 8000594:	0800060f 	.word	0x0800060f
 8000598:	08000657 	.word	0x08000657
 800059c:	08000697 	.word	0x08000697
		case INIT:
			//TODO: wake MCU up by PC
			status = MODE1;
 80005a0:	4b54      	ldr	r3, [pc, #336]	@ (80006f4 <fsm_automatic+0x184>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			break;
 80005a6:	e0a3      	b.n	80006f0 <fsm_automatic+0x180>
		case MODE1:
			led_config();
 80005a8:	f000 f95a 	bl	8000860 <led_config>
			t_road_1 = T_RED;
 80005ac:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <fsm_automatic+0x188>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a52      	ldr	r2, [pc, #328]	@ (80006fc <fsm_automatic+0x18c>)
 80005b2:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 80005b4:	4b52      	ldr	r3, [pc, #328]	@ (8000700 <fsm_automatic+0x190>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a52      	ldr	r2, [pc, #328]	@ (8000704 <fsm_automatic+0x194>)
 80005ba:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f001 fc34 	bl	8001e2c <setTimer4>
			status = RED_GREEN;
 80005c4:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <fsm_automatic+0x184>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
			break;
 80005ca:	e091      	b.n	80006f0 <fsm_automatic+0x180>
		case RED_GREEN:
			led_config();
 80005cc:	f000 f948 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 80005d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000708 <fsm_automatic+0x198>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	f040 8084 	bne.w	80006e2 <fsm_automatic+0x172>
				t_road_1--;
 80005da:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <fsm_automatic+0x18c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <fsm_automatic+0x18c>)
 80005e2:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80005e4:	4b47      	ldr	r3, [pc, #284]	@ (8000704 <fsm_automatic+0x194>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a46      	ldr	r2, [pc, #280]	@ (8000704 <fsm_automatic+0x194>)
 80005ec:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80005ee:	4b45      	ldr	r3, [pc, #276]	@ (8000704 <fsm_automatic+0x194>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dc06      	bgt.n	8000604 <fsm_automatic+0x94>
					t_road_2 = T_YELLOW;
 80005f6:	4b45      	ldr	r3, [pc, #276]	@ (800070c <fsm_automatic+0x19c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a42      	ldr	r2, [pc, #264]	@ (8000704 <fsm_automatic+0x194>)
 80005fc:	6013      	str	r3, [r2, #0]
					status = RED_YELLOW; // Change state
 80005fe:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <fsm_automatic+0x184>)
 8000600:	2202      	movs	r2, #2
 8000602:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000608:	f001 fc10 	bl	8001e2c <setTimer4>
			}
			break;
 800060c:	e069      	b.n	80006e2 <fsm_automatic+0x172>
		case RED_YELLOW:
			led_config();
 800060e:	f000 f927 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 8000612:	4b3d      	ldr	r3, [pc, #244]	@ (8000708 <fsm_automatic+0x198>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d165      	bne.n	80006e6 <fsm_automatic+0x176>
				t_road_1--;
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <fsm_automatic+0x18c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a36      	ldr	r2, [pc, #216]	@ (80006fc <fsm_automatic+0x18c>)
 8000622:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000624:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <fsm_automatic+0x194>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <fsm_automatic+0x194>)
 800062c:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 800062e:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <fsm_automatic+0x18c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	dc0a      	bgt.n	800064c <fsm_automatic+0xdc>
					t_road_1 = T_GREEN;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <fsm_automatic+0x190>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a30      	ldr	r2, [pc, #192]	@ (80006fc <fsm_automatic+0x18c>)
 800063c:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <fsm_automatic+0x188>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	@ (8000704 <fsm_automatic+0x194>)
 8000644:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <fsm_automatic+0x184>)
 8000648:	2203      	movs	r2, #3
 800064a:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000650:	f001 fbec 	bl	8001e2c <setTimer4>
			}
			break;
 8000654:	e047      	b.n	80006e6 <fsm_automatic+0x176>
		case GREEN_RED:
			led_config();
 8000656:	f000 f903 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <fsm_automatic+0x198>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d143      	bne.n	80006ea <fsm_automatic+0x17a>
				t_road_1--;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <fsm_automatic+0x18c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <fsm_automatic+0x18c>)
 800066a:	6013      	str	r3, [r2, #0]
				t_road_2--;
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <fsm_automatic+0x194>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3b01      	subs	r3, #1
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <fsm_automatic+0x194>)
 8000674:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <fsm_automatic+0x18c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	dc06      	bgt.n	800068c <fsm_automatic+0x11c>
					t_road_1 = T_YELLOW;
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <fsm_automatic+0x19c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1e      	ldr	r2, [pc, #120]	@ (80006fc <fsm_automatic+0x18c>)
 8000684:	6013      	str	r3, [r2, #0]
					status = YELLOW_RED; // Change state
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <fsm_automatic+0x184>)
 8000688:	2204      	movs	r2, #4
 800068a:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f001 fbcc 	bl	8001e2c <setTimer4>
			}
			break;
 8000694:	e029      	b.n	80006ea <fsm_automatic+0x17a>
		case YELLOW_RED:
			led_config();
 8000696:	f000 f8e3 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <fsm_automatic+0x198>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d125      	bne.n	80006ee <fsm_automatic+0x17e>
				t_road_1--;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <fsm_automatic+0x18c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <fsm_automatic+0x18c>)
 80006aa:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <fsm_automatic+0x194>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <fsm_automatic+0x194>)
 80006b4:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <fsm_automatic+0x18c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dc0a      	bgt.n	80006d4 <fsm_automatic+0x164>
					t_road_1 = T_RED;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <fsm_automatic+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <fsm_automatic+0x18c>)
 80006c4:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <fsm_automatic+0x190>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <fsm_automatic+0x194>)
 80006cc:	6013      	str	r3, [r2, #0]
					status = RED_GREEN; // Change state
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <fsm_automatic+0x184>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d8:	f001 fba8 	bl	8001e2c <setTimer4>
			}
			break;
 80006dc:	e007      	b.n	80006ee <fsm_automatic+0x17e>
		default:
			break;
 80006de:	bf00      	nop
 80006e0:	e006      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006e2:	bf00      	nop
 80006e4:	e004      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006ee:	bf00      	nop
	}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	20000008 	.word	0x20000008
 8000704:	200000ac 	.word	0x200000ac
 8000708:	20000268 	.word	0x20000268
 800070c:	20000004 	.word	0x20000004

08000710 <fsm_red_manual>:
/*
 * Functions related to led blinking in manual state
 * fsm_led_manual: *led* blinks every 500ms
 * */

void fsm_red_manual() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	switch(status) {
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <fsm_red_manual+0x68>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d01b      	beq.n	8000754 <fsm_red_manual+0x44>
 800071c:	2b07      	cmp	r3, #7
 800071e:	dc24      	bgt.n	800076a <fsm_red_manual+0x5a>
 8000720:	2b05      	cmp	r3, #5
 8000722:	d002      	beq.n	800072a <fsm_red_manual+0x1a>
 8000724:	2b06      	cmp	r3, #6
 8000726:	d00a      	beq.n	800073e <fsm_red_manual+0x2e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000728:	e01f      	b.n	800076a <fsm_red_manual+0x5a>
			led_config();
 800072a:	f000 f899 	bl	8000860 <led_config>
			setTimer1(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000732:	f001 fb61 	bl	8001df8 <setTimer1>
			status = AUTO_RED;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <fsm_red_manual+0x68>)
 8000738:	2206      	movs	r2, #6
 800073a:	601a      	str	r2, [r3, #0]
			break;
 800073c:	e01a      	b.n	8000774 <fsm_red_manual+0x64>
			if (timer1_flag == 1) {
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <fsm_red_manual+0x6c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d113      	bne.n	800076e <fsm_red_manual+0x5e>
				toggle_red();
 8000746:	f000 f999 	bl	8000a7c <toggle_red>
				setTimer1(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074e:	f001 fb53 	bl	8001df8 <setTimer1>
			break;
 8000752:	e00c      	b.n	800076e <fsm_red_manual+0x5e>
			if (timer1_flag == 1) {
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <fsm_red_manual+0x6c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <fsm_red_manual+0x62>
				toggle_red();
 800075c:	f000 f98e 	bl	8000a7c <toggle_red>
				setTimer1(500);
 8000760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000764:	f001 fb48 	bl	8001df8 <setTimer1>
			break;
 8000768:	e003      	b.n	8000772 <fsm_red_manual+0x62>
			break;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <fsm_red_manual+0x64>
			break;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <fsm_red_manual+0x64>
			break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000000c 	.word	0x2000000c
 800077c:	2000025c 	.word	0x2000025c

08000780 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	switch(status) {
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <fsm_amber_manual+0x68>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d01b      	beq.n	80007c4 <fsm_amber_manual+0x44>
 800078c:	2b0a      	cmp	r3, #10
 800078e:	dc24      	bgt.n	80007da <fsm_amber_manual+0x5a>
 8000790:	2b08      	cmp	r3, #8
 8000792:	d002      	beq.n	800079a <fsm_amber_manual+0x1a>
 8000794:	2b09      	cmp	r3, #9
 8000796:	d00a      	beq.n	80007ae <fsm_amber_manual+0x2e>
				toggle_yellow();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000798:	e01f      	b.n	80007da <fsm_amber_manual+0x5a>
			led_config();
 800079a:	f000 f861 	bl	8000860 <led_config>
			setTimer1(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a2:	f001 fb29 	bl	8001df8 <setTimer1>
			status = AUTO_YELLOW;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <fsm_amber_manual+0x68>)
 80007a8:	2209      	movs	r2, #9
 80007aa:	601a      	str	r2, [r3, #0]
			break;
 80007ac:	e01a      	b.n	80007e4 <fsm_amber_manual+0x64>
			if (timer1_flag == 1) {
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <fsm_amber_manual+0x6c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d113      	bne.n	80007de <fsm_amber_manual+0x5e>
				toggle_yellow();
 80007b6:	f000 f97b 	bl	8000ab0 <toggle_yellow>
				setTimer1(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007be:	f001 fb1b 	bl	8001df8 <setTimer1>
			break;
 80007c2:	e00c      	b.n	80007de <fsm_amber_manual+0x5e>
			if (timer1_flag == 1) {
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <fsm_amber_manual+0x6c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10a      	bne.n	80007e2 <fsm_amber_manual+0x62>
				toggle_yellow();
 80007cc:	f000 f970 	bl	8000ab0 <toggle_yellow>
				setTimer1(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d4:	f001 fb10 	bl	8001df8 <setTimer1>
			break;
 80007d8:	e003      	b.n	80007e2 <fsm_amber_manual+0x62>
			break;
 80007da:	bf00      	nop
 80007dc:	e002      	b.n	80007e4 <fsm_amber_manual+0x64>
			break;
 80007de:	bf00      	nop
 80007e0:	e000      	b.n	80007e4 <fsm_amber_manual+0x64>
			break;
 80007e2:	bf00      	nop
	}
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	2000025c 	.word	0x2000025c

080007f0 <fsm_green_manual>:

void fsm_green_manual() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	switch(status) {
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <fsm_green_manual+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b0d      	cmp	r3, #13
 80007fa:	d01b      	beq.n	8000834 <fsm_green_manual+0x44>
 80007fc:	2b0d      	cmp	r3, #13
 80007fe:	dc24      	bgt.n	800084a <fsm_green_manual+0x5a>
 8000800:	2b0b      	cmp	r3, #11
 8000802:	d002      	beq.n	800080a <fsm_green_manual+0x1a>
 8000804:	2b0c      	cmp	r3, #12
 8000806:	d00a      	beq.n	800081e <fsm_green_manual+0x2e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000808:	e01f      	b.n	800084a <fsm_green_manual+0x5a>
			led_config();
 800080a:	f000 f829 	bl	8000860 <led_config>
			setTimer1(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000812:	f001 faf1 	bl	8001df8 <setTimer1>
			status = AUTO_GREEN;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <fsm_green_manual+0x68>)
 8000818:	220c      	movs	r2, #12
 800081a:	601a      	str	r2, [r3, #0]
			break;
 800081c:	e01a      	b.n	8000854 <fsm_green_manual+0x64>
			if (timer1_flag == 1) {
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <fsm_green_manual+0x6c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d113      	bne.n	800084e <fsm_green_manual+0x5e>
				toggle_green();
 8000826:	f000 f95d 	bl	8000ae4 <toggle_green>
				setTimer1(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f001 fae3 	bl	8001df8 <setTimer1>
			break;
 8000832:	e00c      	b.n	800084e <fsm_green_manual+0x5e>
			if (timer1_flag == 1) {
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <fsm_green_manual+0x6c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10a      	bne.n	8000852 <fsm_green_manual+0x62>
				toggle_green();
 800083c:	f000 f952 	bl	8000ae4 <toggle_green>
				setTimer1(500);
 8000840:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000844:	f001 fad8 	bl	8001df8 <setTimer1>
			break;
 8000848:	e003      	b.n	8000852 <fsm_green_manual+0x62>
			break;
 800084a:	bf00      	nop
 800084c:	e002      	b.n	8000854 <fsm_green_manual+0x64>
			break;
 800084e:	bf00      	nop
 8000850:	e000      	b.n	8000854 <fsm_green_manual+0x64>
			break;
 8000852:	bf00      	nop
	}
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000000c 	.word	0x2000000c
 800085c:	2000025c 	.word	0x2000025c

08000860 <led_config>:
void on_yellow_road_2();
void on_green_road_1();
void on_green_road_2();


void led_config() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	switch (status) {
 8000864:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <led_config+0xa4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b0b      	cmp	r3, #11
 800086a:	d848      	bhi.n	80008fe <led_config+0x9e>
 800086c:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <led_config+0x14>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	080008a5 	.word	0x080008a5
 8000878:	080008af 	.word	0x080008af
 800087c:	080008b9 	.word	0x080008b9
 8000880:	080008bf 	.word	0x080008bf
 8000884:	080008c9 	.word	0x080008c9
 8000888:	080008cf 	.word	0x080008cf
 800088c:	080008ff 	.word	0x080008ff
 8000890:	080008ff 	.word	0x080008ff
 8000894:	080008df 	.word	0x080008df
 8000898:	080008ff 	.word	0x080008ff
 800089c:	080008ff 	.word	0x080008ff
 80008a0:	080008ef 	.word	0x080008ef
		case MODE1:
			off_all_leds_road_1();
 80008a4:	f000 f832 	bl	800090c <off_all_leds_road_1>
			off_all_leds_road_2();
 80008a8:	f000 f846 	bl	8000938 <off_all_leds_road_2>
			break;
 80008ac:	e028      	b.n	8000900 <led_config+0xa0>
		case RED_GREEN:
			on_red_road_1();
 80008ae:	f000 f85b 	bl	8000968 <on_red_road_1>
			on_green_road_2();
 80008b2:	f000 f8cb 	bl	8000a4c <on_green_road_2>
			break;
 80008b6:	e023      	b.n	8000900 <led_config+0xa0>
		case RED_YELLOW:
			on_yellow_road_2();
 80008b8:	f000 f89a 	bl	80009f0 <on_yellow_road_2>
			break;
 80008bc:	e020      	b.n	8000900 <led_config+0xa0>
		case GREEN_RED:
			on_green_road_1();
 80008be:	f000 f8af 	bl	8000a20 <on_green_road_1>
			on_red_road_2();
 80008c2:	f000 f867 	bl	8000994 <on_red_road_2>
			break;
 80008c6:	e01b      	b.n	8000900 <led_config+0xa0>
		case YELLOW_RED:
			on_yellow_road_1();
 80008c8:	f000 f87c 	bl	80009c4 <on_yellow_road_1>
			break;
 80008cc:	e018      	b.n	8000900 <led_config+0xa0>
		case MODE2:
			on_red_road_1();
 80008ce:	f000 f84b 	bl	8000968 <on_red_road_1>
			on_red_road_2();
 80008d2:	f000 f85f 	bl	8000994 <on_red_road_2>
			toggle_flag = 0;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <led_config+0xa8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			break;
 80008dc:	e010      	b.n	8000900 <led_config+0xa0>
		case MODE3:
			on_yellow_road_1();
 80008de:	f000 f871 	bl	80009c4 <on_yellow_road_1>
			on_yellow_road_2();
 80008e2:	f000 f885 	bl	80009f0 <on_yellow_road_2>
			toggle_flag = 0;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <led_config+0xa8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			break;
 80008ec:	e008      	b.n	8000900 <led_config+0xa0>
		case MODE4:
			on_green_road_1();
 80008ee:	f000 f897 	bl	8000a20 <on_green_road_1>
			on_green_road_2();
 80008f2:	f000 f8ab 	bl	8000a4c <on_green_road_2>
			toggle_flag = 0;
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <led_config+0xa8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
			break;
 80008fc:	e000      	b.n	8000900 <led_config+0xa0>
		default:
			break;
 80008fe:	bf00      	nop
	}
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000000c 	.word	0x2000000c
 8000908:	200000b0 	.word	0x200000b0

0800090c <off_all_leds_road_1>:


void off_all_leds_road_1() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4807      	ldr	r0, [pc, #28]	@ (8000934 <off_all_leds_road_1+0x28>)
 8000916:	f001 ffed 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <off_all_leds_road_1+0x28>)
 8000920:	f001 ffe8 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	@ 0x40
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <off_all_leds_road_1+0x28>)
 800092a:	f001 ffe3 	bl	80028f4 <HAL_GPIO_WritePin>

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <off_all_leds_road_2+0x2c>)
 8000942:	f001 ffd7 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <off_all_leds_road_2+0x2c>)
 800094e:	f001 ffd1 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <off_all_leds_road_2+0x2c>)
 800095a:	f001 ffcb 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <on_red_road_1>:

void on_red_road_1() {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <on_red_road_1+0x28>)
 8000972:	f001 ffbf 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <on_red_road_1+0x28>)
 800097c:	f001 ffba 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <on_red_road_1+0x28>)
 8000986:	f001 ffb5 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <on_red_road_2>:

void on_red_road_2() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <on_red_road_2+0x2c>)
 800099e:	f001 ffa9 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <on_red_road_2+0x2c>)
 80009aa:	f001 ffa3 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <on_red_road_2+0x2c>)
 80009b6:	f001 ff9d 	bl	80028f4 <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <on_yellow_road_1>:

void on_yellow_road_1() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <on_yellow_road_1+0x28>)
 80009ce:	f001 ff91 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2120      	movs	r1, #32
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <on_yellow_road_1+0x28>)
 80009d8:	f001 ff8c 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	@ 0x40
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <on_yellow_road_1+0x28>)
 80009e2:	f001 ff87 	bl	80028f4 <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <on_yellow_road_2>:

void on_yellow_road_2() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <on_yellow_road_2+0x2c>)
 80009fa:	f001 ff7b 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <on_yellow_road_2+0x2c>)
 8000a06:	f001 ff75 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <on_yellow_road_2+0x2c>)
 8000a12:	f001 ff6f 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <on_green_road_1>:

void on_green_road_1() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2110      	movs	r1, #16
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <on_green_road_1+0x28>)
 8000a2a:	f001 ff63 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <on_green_road_1+0x28>)
 8000a34:	f001 ff5e 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2140      	movs	r1, #64	@ 0x40
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <on_green_road_1+0x28>)
 8000a3e:	f001 ff59 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <on_green_road_2>:

void on_green_road_2() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a56:	f001 ff4d 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a62:	f001 ff47 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a6e:	f001 ff41 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <toggle_red>:


void toggle_red() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <toggle_red+0x30>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <toggle_red+0x1c>
		on_red_road_1();
 8000a88:	f7ff ff6e 	bl	8000968 <on_red_road_1>
		on_red_road_2();
 8000a8c:	f7ff ff82 	bl	8000994 <on_red_road_2>
		toggle_flag = 1;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <toggle_red+0x30>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000a96:	e006      	b.n	8000aa6 <toggle_red+0x2a>
		off_all_leds_road_1();
 8000a98:	f7ff ff38 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000a9c:	f7ff ff4c 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <toggle_red+0x30>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000b0 	.word	0x200000b0

08000ab0 <toggle_yellow>:

void toggle_yellow() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d107      	bne.n	8000acc <toggle_yellow+0x1c>
		on_yellow_road_1();
 8000abc:	f7ff ff82 	bl	80009c4 <on_yellow_road_1>
		on_yellow_road_2();
 8000ac0:	f7ff ff96 	bl	80009f0 <on_yellow_road_2>
		toggle_flag = 1;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000aca:	e006      	b.n	8000ada <toggle_yellow+0x2a>
		off_all_leds_road_1();
 8000acc:	f7ff ff1e 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000ad0:	f7ff ff32 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000b0 	.word	0x200000b0

08000ae4 <toggle_green>:

void toggle_green() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <toggle_green+0x30>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <toggle_green+0x1c>
		on_green_road_1();
 8000af0:	f7ff ff96 	bl	8000a20 <on_green_road_1>
		on_green_road_2();
 8000af4:	f7ff ffaa 	bl	8000a4c <on_green_road_2>
		toggle_flag = 1;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <toggle_green+0x30>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000afe:	e006      	b.n	8000b0e <toggle_green+0x2a>
		off_all_leds_road_1();
 8000b00:	f7ff ff04 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000b04:	f7ff ff18 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000b08:	4b02      	ldr	r3, [pc, #8]	@ (8000b14 <toggle_green+0x30>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000b0 	.word	0x200000b0

08000b18 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED; //Change mode
enum ButtonState button_1_state = BUTTON_PRESSED; //Increment time
enum ButtonState button_2_state = BUTTON_PRESSED; //Decrement time
enum ButtonState button_3_state = BUTTON_PRESSED; //Save time

void fsm_button_processing() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af02      	add	r7, sp, #8

	switch (button_0_state) {
 8000b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8000cd8 <fsm_button_processing+0x1c0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d040      	beq.n	8000ba8 <fsm_button_processing+0x90>
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	dc4d      	bgt.n	8000bc6 <fsm_button_processing+0xae>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <fsm_button_processing+0x1c>
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d026      	beq.n	8000b80 <fsm_button_processing+0x68>
 8000b32:	e048      	b.n	8000bc6 <fsm_button_processing+0xae>
		case BUTTON_RELEASED:
			if (is_button_pressed(0)) {
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fa75 	bl	8001024 <is_button_pressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d03d      	beq.n	8000bbc <fsm_button_processing+0xa4>
				button_0_state = BUTTON_PRESSED;
 8000b40:	4b65      	ldr	r3, [pc, #404]	@ (8000cd8 <fsm_button_processing+0x1c0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
				if (status == RED_GREEN)	status = MODE2;
 8000b46:	4b65      	ldr	r3, [pc, #404]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <fsm_button_processing+0x3c>
 8000b4e:	4b63      	ldr	r3, [pc, #396]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b50:	2205      	movs	r2, #5
 8000b52:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 8000b54:	4b61      	ldr	r3, [pc, #388]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d102      	bne.n	8000b62 <fsm_button_processing+0x4a>
 8000b5c:	4b5f      	ldr	r3, [pc, #380]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b5e:	2208      	movs	r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
				if (status == AUTO_YELLOW) 	status = MODE4;
 8000b62:	4b5e      	ldr	r3, [pc, #376]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b09      	cmp	r3, #9
 8000b68:	d102      	bne.n	8000b70 <fsm_button_processing+0x58>
 8000b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b6c:	220b      	movs	r2, #11
 8000b6e:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000b70:	4b5a      	ldr	r3, [pc, #360]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b0c      	cmp	r3, #12
 8000b76:	d121      	bne.n	8000bbc <fsm_button_processing+0xa4>
 8000b78:	4b58      	ldr	r3, [pc, #352]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b7e:	e01d      	b.n	8000bbc <fsm_button_processing+0xa4>
		case BUTTON_PRESSED:
			if (!is_button_pressed(0)) {
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fa4f 	bl	8001024 <is_button_pressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d103      	bne.n	8000b94 <fsm_button_processing+0x7c>
				button_0_state = BUTTON_RELEASED;
 8000b8c:	4b52      	ldr	r3, [pc, #328]	@ (8000cd8 <fsm_button_processing+0x1c0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(0)) {
					button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000b92:	e015      	b.n	8000bc0 <fsm_button_processing+0xa8>
				if (is_button_pressed_1s(0)) {
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 fa5f 	bl	8001058 <is_button_pressed_1s>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00f      	beq.n	8000bc0 <fsm_button_processing+0xa8>
					button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd8 <fsm_button_processing+0x1c0>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	701a      	strb	r2, [r3, #0]
			break;
 8000ba6:	e00b      	b.n	8000bc0 <fsm_button_processing+0xa8>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(0)) {
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fa3b 	bl	8001024 <is_button_pressed>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d107      	bne.n	8000bc4 <fsm_button_processing+0xac>
				button_0_state = BUTTON_RELEASED;
 8000bb4:	4b48      	ldr	r3, [pc, #288]	@ (8000cd8 <fsm_button_processing+0x1c0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000bba:	e003      	b.n	8000bc4 <fsm_button_processing+0xac>
			break;
 8000bbc:	bf00      	nop
 8000bbe:	e002      	b.n	8000bc6 <fsm_button_processing+0xae>
			break;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <fsm_button_processing+0xae>
			break;
 8000bc4:	bf00      	nop
	}

	switch (button_1_state) {
 8000bc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ce0 <fsm_button_processing+0x1c8>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d069      	beq.n	8000ca2 <fsm_button_processing+0x18a>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	dc76      	bgt.n	8000cc0 <fsm_button_processing+0x1a8>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <fsm_button_processing+0xc4>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d04f      	beq.n	8000c7a <fsm_button_processing+0x162>
 8000bda:	e071      	b.n	8000cc0 <fsm_button_processing+0x1a8>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fa21 	bl	8001024 <is_button_pressed>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d066      	beq.n	8000cb6 <fsm_button_processing+0x19e>
				button_1_state = BUTTON_PRESSED;
 8000be8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <fsm_button_processing+0x1c8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000bee:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d003      	beq.n	8000bfe <fsm_button_processing+0xe6>
 8000bf6:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b07      	cmp	r3, #7
 8000bfc:	d10e      	bne.n	8000c1c <fsm_button_processing+0x104>
					status = ADJ_RED;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000c04:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <fsm_button_processing+0x1cc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a36      	ldr	r2, [pc, #216]	@ (8000ce4 <fsm_button_processing+0x1cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <fsm_button_processing+0x1cc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b62      	cmp	r3, #98	@ 0x62
 8000c14:	dd02      	ble.n	8000c1c <fsm_button_processing+0x104>
 8000c16:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <fsm_button_processing+0x1cc>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_YELLOW || status == ADJ_YELLOW) {
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b09      	cmp	r3, #9
 8000c22:	d003      	beq.n	8000c2c <fsm_button_processing+0x114>
 8000c24:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b0a      	cmp	r3, #10
 8000c2a:	d10e      	bne.n	8000c4a <fsm_button_processing+0x132>
					status = ADJ_YELLOW;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c2e:	220a      	movs	r2, #10
 8000c30:	601a      	str	r2, [r3, #0]
					T_YELLOW++;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <fsm_button_processing+0x1d0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce8 <fsm_button_processing+0x1d0>)
 8000c3a:	6013      	str	r3, [r2, #0]
					if (T_YELLOW >= 5) T_YELLOW = 1;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <fsm_button_processing+0x1d0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	dd02      	ble.n	8000c4a <fsm_button_processing+0x132>
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <fsm_button_processing+0x1d0>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b0c      	cmp	r3, #12
 8000c50:	d003      	beq.n	8000c5a <fsm_button_processing+0x142>
 8000c52:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b0d      	cmp	r3, #13
 8000c58:	d12d      	bne.n	8000cb6 <fsm_button_processing+0x19e>
					status = ADJ_GREEN;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <fsm_button_processing+0x1c4>)
 8000c5c:	220d      	movs	r2, #13
 8000c5e:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000c60:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <fsm_button_processing+0x1d4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <fsm_button_processing+0x1d4>)
 8000c68:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <fsm_button_processing+0x1d4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b62      	cmp	r3, #98	@ 0x62
 8000c70:	dd21      	ble.n	8000cb6 <fsm_button_processing+0x19e>
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <fsm_button_processing+0x1d4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

				}
			}
			break;
 8000c78:	e01d      	b.n	8000cb6 <fsm_button_processing+0x19e>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 f9d2 	bl	8001024 <is_button_pressed>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <fsm_button_processing+0x176>
				button_1_state = BUTTON_RELEASED;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <fsm_button_processing+0x1c8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000c8c:	e015      	b.n	8000cba <fsm_button_processing+0x1a2>
				if (is_button_pressed_1s(1)) {
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f000 f9e2 	bl	8001058 <is_button_pressed_1s>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00f      	beq.n	8000cba <fsm_button_processing+0x1a2>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <fsm_button_processing+0x1c8>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ca0:	e00b      	b.n	8000cba <fsm_button_processing+0x1a2>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f000 f9be 	bl	8001024 <is_button_pressed>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d107      	bne.n	8000cbe <fsm_button_processing+0x1a6>
				button_1_state = BUTTON_RELEASED;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <fsm_button_processing+0x1c8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000cb4:	e003      	b.n	8000cbe <fsm_button_processing+0x1a6>
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e002      	b.n	8000cc0 <fsm_button_processing+0x1a8>
			break;
 8000cba:	bf00      	nop
 8000cbc:	e000      	b.n	8000cc0 <fsm_button_processing+0x1a8>
			break;
 8000cbe:	bf00      	nop
	}

	switch (button_2_state) {
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d078      	beq.n	8000dba <fsm_button_processing+0x2a2>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	f300 8085 	bgt.w	8000dd8 <fsm_button_processing+0x2c0>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d010      	beq.n	8000cf4 <fsm_button_processing+0x1dc>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d05d      	beq.n	8000d92 <fsm_button_processing+0x27a>
 8000cd6:	e07f      	b.n	8000dd8 <fsm_button_processing+0x2c0>
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	2000000c 	.word	0x2000000c
 8000ce0:	20000011 	.word	0x20000011
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000012 	.word	0x20000012
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f000 f995 	bl	8001024 <is_button_pressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d066      	beq.n	8000dce <fsm_button_processing+0x2b6>
				button_2_state = BUTTON_PRESSED;
 8000d00:	4b85      	ldr	r3, [pc, #532]	@ (8000f18 <fsm_button_processing+0x400>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000d06:	4b85      	ldr	r3, [pc, #532]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d003      	beq.n	8000d16 <fsm_button_processing+0x1fe>
 8000d0e:	4b83      	ldr	r3, [pc, #524]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d10e      	bne.n	8000d34 <fsm_button_processing+0x21c>
					status = ADJ_RED;
 8000d16:	4b81      	ldr	r3, [pc, #516]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
					T_RED--;
 8000d1c:	4b80      	ldr	r3, [pc, #512]	@ (8000f20 <fsm_button_processing+0x408>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a7f      	ldr	r2, [pc, #508]	@ (8000f20 <fsm_button_processing+0x408>)
 8000d24:	6013      	str	r3, [r2, #0]
					if (T_RED <= 0) T_RED = 1;
 8000d26:	4b7e      	ldr	r3, [pc, #504]	@ (8000f20 <fsm_button_processing+0x408>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dc02      	bgt.n	8000d34 <fsm_button_processing+0x21c>
 8000d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f20 <fsm_button_processing+0x408>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_YELLOW || status == ADJ_YELLOW) {
 8000d34:	4b79      	ldr	r3, [pc, #484]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b09      	cmp	r3, #9
 8000d3a:	d003      	beq.n	8000d44 <fsm_button_processing+0x22c>
 8000d3c:	4b77      	ldr	r3, [pc, #476]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b0a      	cmp	r3, #10
 8000d42:	d10e      	bne.n	8000d62 <fsm_button_processing+0x24a>
					status = ADJ_YELLOW;
 8000d44:	4b75      	ldr	r3, [pc, #468]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d46:	220a      	movs	r2, #10
 8000d48:	601a      	str	r2, [r3, #0]
					T_YELLOW--;
 8000d4a:	4b76      	ldr	r3, [pc, #472]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a74      	ldr	r2, [pc, #464]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000d52:	6013      	str	r3, [r2, #0]
					if (T_YELLOW <= 0) T_YELLOW = 1;
 8000d54:	4b73      	ldr	r3, [pc, #460]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dc02      	bgt.n	8000d62 <fsm_button_processing+0x24a>
 8000d5c:	4b71      	ldr	r3, [pc, #452]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000d62:	4b6e      	ldr	r3, [pc, #440]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b0c      	cmp	r3, #12
 8000d68:	d003      	beq.n	8000d72 <fsm_button_processing+0x25a>
 8000d6a:	4b6c      	ldr	r3, [pc, #432]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d12d      	bne.n	8000dce <fsm_button_processing+0x2b6>
					status = ADJ_GREEN;
 8000d72:	4b6a      	ldr	r3, [pc, #424]	@ (8000f1c <fsm_button_processing+0x404>)
 8000d74:	220d      	movs	r2, #13
 8000d76:	601a      	str	r2, [r3, #0]
					T_GREEN--;
 8000d78:	4b6b      	ldr	r3, [pc, #428]	@ (8000f28 <fsm_button_processing+0x410>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f28 <fsm_button_processing+0x410>)
 8000d80:	6013      	str	r3, [r2, #0]
					if (T_GREEN <= 0) T_GREEN = 1;
 8000d82:	4b69      	ldr	r3, [pc, #420]	@ (8000f28 <fsm_button_processing+0x410>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dc21      	bgt.n	8000dce <fsm_button_processing+0x2b6>
 8000d8a:	4b67      	ldr	r3, [pc, #412]	@ (8000f28 <fsm_button_processing+0x410>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

				}
			}
			break;
 8000d90:	e01d      	b.n	8000dce <fsm_button_processing+0x2b6>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000d92:	2002      	movs	r0, #2
 8000d94:	f000 f946 	bl	8001024 <is_button_pressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <fsm_button_processing+0x28e>
				button_2_state = BUTTON_RELEASED;
 8000d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000f18 <fsm_button_processing+0x400>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000da4:	e015      	b.n	8000dd2 <fsm_button_processing+0x2ba>
				if (is_button_pressed_1s(2)) {
 8000da6:	2002      	movs	r0, #2
 8000da8:	f000 f956 	bl	8001058 <is_button_pressed_1s>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00f      	beq.n	8000dd2 <fsm_button_processing+0x2ba>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000db2:	4b59      	ldr	r3, [pc, #356]	@ (8000f18 <fsm_button_processing+0x400>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	701a      	strb	r2, [r3, #0]
			break;
 8000db8:	e00b      	b.n	8000dd2 <fsm_button_processing+0x2ba>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f000 f932 	bl	8001024 <is_button_pressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <fsm_button_processing+0x2be>
				button_2_state = BUTTON_RELEASED;
 8000dc6:	4b54      	ldr	r3, [pc, #336]	@ (8000f18 <fsm_button_processing+0x400>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000dcc:	e003      	b.n	8000dd6 <fsm_button_processing+0x2be>
			break;
 8000dce:	bf00      	nop
 8000dd0:	e002      	b.n	8000dd8 <fsm_button_processing+0x2c0>
			break;
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <fsm_button_processing+0x2c0>
			break;
 8000dd6:	bf00      	nop
	}

	switch (button_3_state) {
 8000dd8:	4b54      	ldr	r3, [pc, #336]	@ (8000f2c <fsm_button_processing+0x414>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	f000 8087 	beq.w	8000ef0 <fsm_button_processing+0x3d8>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	f300 8093 	bgt.w	8000f0e <fsm_button_processing+0x3f6>
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <fsm_button_processing+0x2da>
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d06b      	beq.n	8000ec8 <fsm_button_processing+0x3b0>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000df0:	e08d      	b.n	8000f0e <fsm_button_processing+0x3f6>
			if (is_button_pressed(3)) {
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f916 	bl	8001024 <is_button_pressed>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8082 	beq.w	8000f04 <fsm_button_processing+0x3ec>
				button_3_state = BUTTON_PRESSED;
 8000e00:	4b4a      	ldr	r3, [pc, #296]	@ (8000f2c <fsm_button_processing+0x414>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000e06:	4b45      	ldr	r3, [pc, #276]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d114      	bne.n	8000e38 <fsm_button_processing+0x320>
					status = AUTO_RED;
 8000e0e:	4b43      	ldr	r3, [pc, #268]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e10:	2206      	movs	r2, #6
 8000e12:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_YELLOW) T_RED = T_YELLOW + 1;
 8000e14:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dc04      	bgt.n	8000e2a <fsm_button_processing+0x312>
 8000e20:	4b40      	ldr	r3, [pc, #256]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a3e      	ldr	r2, [pc, #248]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e28:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_YELLOW;
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a3c      	ldr	r2, [pc, #240]	@ (8000f28 <fsm_button_processing+0x410>)
 8000e36:	6013      	str	r3, [r2, #0]
				if (status == ADJ_YELLOW) {
 8000e38:	4b38      	ldr	r3, [pc, #224]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b0a      	cmp	r3, #10
 8000e3e:	d114      	bne.n	8000e6a <fsm_button_processing+0x352>
					status = AUTO_YELLOW;
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e42:	2209      	movs	r2, #9
 8000e44:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_YELLOW) T_RED = T_YELLOW + 1;
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b36      	ldr	r3, [pc, #216]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dc04      	bgt.n	8000e5c <fsm_button_processing+0x344>
 8000e52:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a31      	ldr	r2, [pc, #196]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e5a:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_YELLOW;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	4a30      	ldr	r2, [pc, #192]	@ (8000f28 <fsm_button_processing+0x410>)
 8000e68:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	d116      	bne.n	8000ea0 <fsm_button_processing+0x388>
					status = AUTO_GREEN;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <fsm_button_processing+0x404>)
 8000e74:	220c      	movs	r2, #12
 8000e76:	601a      	str	r2, [r3, #0]
					if (T_YELLOW + T_GREEN >= 99) {
 8000e78:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <fsm_button_processing+0x410>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4413      	add	r3, r2
 8000e82:	2b62      	cmp	r3, #98	@ 0x62
 8000e84:	dd05      	ble.n	8000e92 <fsm_button_processing+0x37a>
						T_YELLOW = 4;
 8000e86:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <fsm_button_processing+0x410>)
 8000e8e:	225f      	movs	r2, #95	@ 0x5f
 8000e90:	601a      	str	r2, [r3, #0]
					T_RED = T_YELLOW + T_GREEN;
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <fsm_button_processing+0x410>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <fsm_button_processing+0x408>)
 8000e9e:	6013      	str	r3, [r2, #0]
				sprintf(str, "G%d R%d Y%d\n", T_GREEN, T_RED, T_YELLOW);
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <fsm_button_processing+0x410>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <fsm_button_processing+0x408>)
 8000ea6:	6819      	ldr	r1, [r3, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <fsm_button_processing+0x40c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1d38      	adds	r0, r7, #4
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	491f      	ldr	r1, [pc, #124]	@ (8000f30 <fsm_button_processing+0x418>)
 8000eb4:	f003 febc 	bl	8004c30 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	2212      	movs	r2, #18
 8000ec0:	481c      	ldr	r0, [pc, #112]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000ec2:	f002 feaf 	bl	8003c24 <HAL_UART_Transmit>
			break;
 8000ec6:	e01d      	b.n	8000f04 <fsm_button_processing+0x3ec>
			if (!is_button_pressed(3)) {
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f8ab 	bl	8001024 <is_button_pressed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <fsm_button_processing+0x3c4>
				button_3_state = BUTTON_RELEASED;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <fsm_button_processing+0x414>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			break;
 8000eda:	e015      	b.n	8000f08 <fsm_button_processing+0x3f0>
				if (is_button_pressed_1s(3)) {
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f8bb 	bl	8001058 <is_button_pressed_1s>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00f      	beq.n	8000f08 <fsm_button_processing+0x3f0>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <fsm_button_processing+0x414>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
			break;
 8000eee:	e00b      	b.n	8000f08 <fsm_button_processing+0x3f0>
			if (!is_button_pressed(3)) {
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f897 	bl	8001024 <is_button_pressed>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <fsm_button_processing+0x3f4>
				button_3_state = BUTTON_RELEASED;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <fsm_button_processing+0x414>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
			break;
 8000f02:	e003      	b.n	8000f0c <fsm_button_processing+0x3f4>
			break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <fsm_button_processing+0x3f6>
			break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <fsm_button_processing+0x3f6>
			break;
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000012 	.word	0x20000012
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000013 	.word	0x20000013
 8000f30:	08005ed4 	.word	0x08005ed4
 8000f34:	20000114 	.word	0x20000114

08000f38 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {C4_Btn1_GPIO_Port, C5_Btn2_GPIO_Port, B0_Btn3_GPIO_Port, B1_Btn4_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {C4_Btn1_Pin, C5_Btn2_Pin, B0_Btn3_Pin, B1_Btn4_Pin};

void button_reading(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e058      	b.n	8000ff6 <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f44:	4a30      	ldr	r2, [pc, #192]	@ (8001008 <button_reading+0xd0>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	7819      	ldrb	r1, [r3, #0]
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800100c <button_reading+0xd4>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	460a      	mov	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000f56:	4a2e      	ldr	r2, [pc, #184]	@ (8001010 <button_reading+0xd8>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f5e:	492d      	ldr	r1, [pc, #180]	@ (8001014 <button_reading+0xdc>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f001 fcab 	bl	80028c4 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <button_reading+0xd0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	460a      	mov	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000f7c:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <button_reading+0xd0>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	4921      	ldr	r1, [pc, #132]	@ (800100c <button_reading+0xd4>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	440b      	add	r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d108      	bne.n	8000fa2 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <button_reading+0xd0>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	7819      	ldrb	r1, [r3, #0]
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <button_reading+0xe0>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001018 <button_reading+0xe0>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <button_reading+0xa4>
			//if a button is pressed, start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <button_reading+0xe4>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb6:	2b63      	cmp	r3, #99	@ 0x63
 8000fb8:	d80a      	bhi.n	8000fd0 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <button_reading+0xe4>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <button_reading+0xe4>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fce:	e00f      	b.n	8000ff0 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000fd0:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <button_reading+0xe8>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e009      	b.n	8000ff0 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800101c <button_reading+0xe4>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <button_reading+0xe8>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	dda3      	ble.n	8000f44 <button_reading+0xc>
		}
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000b8 	.word	0x200000b8
 800100c:	200000bc 	.word	0x200000bc
 8001010:	20000014 	.word	0x20000014
 8001014:	20000024 	.word	0x20000024
 8001018:	200000b4 	.word	0x200000b4
 800101c:	200000c4 	.word	0x200000c4
 8001020:	200000c0 	.word	0x200000c0

08001024 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d901      	bls.n	8001038 <is_button_pressed+0x14>
 8001034:	2300      	movs	r3, #0
 8001036:	e007      	b.n	8001048 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <is_button_pressed+0x30>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200000b4 	.word	0x200000b4

08001058 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d901      	bls.n	800106c <is_button_pressed_1s+0x14>
 8001068:	2300      	movs	r3, #0
 800106a:	e007      	b.n	800107c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <is_button_pressed_1s+0x30>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b01      	cmp	r3, #1
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200000c0 	.word	0x200000c0

0800108c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Rx_data[11];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
	if(Rx_data[0] == 'G'){
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b47      	cmp	r3, #71	@ 0x47
 800109a:	d107      	bne.n	80010ac <HAL_UART_RxCpltCallback+0x20>
		sscanf((char*)Rx_data, "G%d R%d Y%d", &T_GREEN, &T_RED, &T_YELLOW);
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_UART_RxCpltCallback+0x3c>)
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_UART_RxCpltCallback+0x40>)
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_UART_RxCpltCallback+0x44>)
 80010a4:	490b      	ldr	r1, [pc, #44]	@ (80010d4 <HAL_UART_RxCpltCallback+0x48>)
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 80010a8:	f003 fde2 	bl	8004c70 <siscanf>
	}
	Rx_data[0] = '\0';
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, Rx_data, sizeof(Rx_data));
 80010b2:	220b      	movs	r2, #11
 80010b4:	4903      	ldr	r1, [pc, #12]	@ (80010c4 <HAL_UART_RxCpltCallback+0x38>)
 80010b6:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <HAL_UART_RxCpltCallback+0x4c>)
 80010b8:	f002 fe3f 	bl	8003d3a <HAL_UART_Receive_IT>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000015c 	.word	0x2000015c
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	08005ee4 	.word	0x08005ee4
 80010d8:	20000114 	.word	0x20000114

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f001 f81e 	bl	8002120 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f84c 	bl	8001180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 f92a 	bl	8001340 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ec:	f000 f8b2 	bl	8001254 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010f0:	f000 f8fc 	bl	80012ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  exti_config_wake();
 80010f4:	f000 ffb2 	bl	800205c <exti_config_wake>
  sleep_enter();
 80010f8:	f000 ff8e 	bl	8002018 <sleep_enter>

  HAL_TIM_Base_Start_IT(&htim2);
 80010fc:	4816      	ldr	r0, [pc, #88]	@ (8001158 <main+0x7c>)
 80010fe:	f002 f91b 	bl	8003338 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2, Rx_data, sizeof(Rx_data));
 8001102:	220b      	movs	r2, #11
 8001104:	4915      	ldr	r1, [pc, #84]	@ (800115c <main+0x80>)
 8001106:	4816      	ldr	r0, [pc, #88]	@ (8001160 <main+0x84>)
 8001108:	f002 fe17 	bl	8003d3a <HAL_UART_Receive_IT>

  SCH_Add_Task(timer_run, 0, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2100      	movs	r1, #0
 8001110:	4814      	ldr	r0, [pc, #80]	@ (8001164 <main+0x88>)
 8001112:	f000 fab9 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	2100      	movs	r1, #0
 800111a:	4813      	ldr	r0, [pc, #76]	@ (8001168 <main+0x8c>)
 800111c:	f000 fab4 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	2100      	movs	r1, #0
 8001124:	4811      	ldr	r0, [pc, #68]	@ (800116c <main+0x90>)
 8001126:	f000 faaf 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(fsm_red_manual, 0, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	2100      	movs	r1, #0
 800112e:	4810      	ldr	r0, [pc, #64]	@ (8001170 <main+0x94>)
 8001130:	f000 faaa 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(fsm_amber_manual, 0, 1);
 8001134:	2201      	movs	r2, #1
 8001136:	2100      	movs	r1, #0
 8001138:	480e      	ldr	r0, [pc, #56]	@ (8001174 <main+0x98>)
 800113a:	f000 faa5 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(fsm_green_manual, 0, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2100      	movs	r1, #0
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <main+0x9c>)
 8001144:	f000 faa0 	bl	8001688 <SCH_Add_Task>
  SCH_Add_Task(fsm_button_processing, 0, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2100      	movs	r1, #0
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <main+0xa0>)
 800114e:	f000 fa9b 	bl	8001688 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001152:	f000 fce5 	bl	8001b20 <SCH_Dispatch_Tasks>
 8001156:	e7fc      	b.n	8001152 <main+0x76>
 8001158:	200000cc 	.word	0x200000cc
 800115c:	2000015c 	.word	0x2000015c
 8001160:	20000114 	.word	0x20000114
 8001164:	08001e61 	.word	0x08001e61
 8001168:	08000f39 	.word	0x08000f39
 800116c:	08000571 	.word	0x08000571
 8001170:	08000711 	.word	0x08000711
 8001174:	08000781 	.word	0x08000781
 8001178:	080007f1 	.word	0x080007f1
 800117c:	08000b19 	.word	0x08000b19

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	@ 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2230      	movs	r2, #48	@ 0x30
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fd9a 	bl	8004cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <SystemClock_Config+0xcc>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <SystemClock_Config+0xcc>)
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <SystemClock_Config+0xd0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a21      	ldr	r2, [pc, #132]	@ (8001250 <SystemClock_Config+0xd0>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e4:	2310      	movs	r3, #16
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011f0:	2308      	movs	r3, #8
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011fc:	2307      	movs	r3, #7
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fbaf 	bl	8002968 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001210:	f000 fa0c 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2302      	movs	r3, #2
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001220:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2102      	movs	r1, #2
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fe10 	bl	8002e58 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800123e:	f000 f9f5 	bl	800162c <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3750      	adds	r7, #80	@ 0x50
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800127a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001288:	2209      	movs	r2, #9
 800128a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_TIM2_Init+0x94>)
 800129a:	f001 fffd 	bl	8003298 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a4:	f000 f9c2 	bl	800162c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM2_Init+0x94>)
 80012b6:	f002 f99f 	bl	80035f8 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f9b4 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_TIM2_Init+0x94>)
 80012d2:	f002 fbc7 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f9a6 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000cc 	.word	0x200000cc

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f002 fc2e 	bl	8003b84 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 f97d 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000114 	.word	0x20000114
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4ba9      	ldr	r3, [pc, #676]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4aa8      	ldr	r2, [pc, #672]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4ba6      	ldr	r3, [pc, #664]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4ba2      	ldr	r3, [pc, #648]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4aa1      	ldr	r2, [pc, #644]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b9f      	ldr	r3, [pc, #636]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b9b      	ldr	r3, [pc, #620]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a9a      	ldr	r2, [pc, #616]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b98      	ldr	r3, [pc, #608]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b94      	ldr	r3, [pc, #592]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a93      	ldr	r2, [pc, #588]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b91      	ldr	r3, [pc, #580]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a8c      	ldr	r2, [pc, #560]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b86      	ldr	r3, [pc, #536]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a85      	ldr	r2, [pc, #532]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b83      	ldr	r3, [pc, #524]	@ (8001600 <MX_GPIO_Init+0x2c0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|E4_Led1_G_Pin|E5_Led1_Y_Pin|E6_Led1_R_Pin
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8001404:	487f      	ldr	r0, [pc, #508]	@ (8001604 <MX_GPIO_Init+0x2c4>)
 8001406:	f001 fa75 	bl	80028f4 <HAL_GPIO_WritePin>
                          |E7_Led2_G_Pin|E8_Led2_Y_Pin|E9_Led2_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	487e      	ldr	r0, [pc, #504]	@ (8001608 <MX_GPIO_Init+0x2c8>)
 8001410:	f001 fa70 	bl	80028f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001414:	2200      	movs	r2, #0
 8001416:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800141a:	487c      	ldr	r0, [pc, #496]	@ (800160c <MX_GPIO_Init+0x2cc>)
 800141c:	f001 fa6a 	bl	80028f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin E4_Led1_G_Pin E5_Led1_Y_Pin E6_Led1_R_Pin
                           E7_Led2_G_Pin E8_Led2_Y_Pin E9_Led2_R_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|E4_Led1_G_Pin|E5_Led1_Y_Pin|E6_Led1_R_Pin
 8001420:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001424:	61fb      	str	r3, [r7, #28]
                          |E7_Led2_G_Pin|E8_Led2_Y_Pin|E9_Led2_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4872      	ldr	r0, [pc, #456]	@ (8001604 <MX_GPIO_Init+0x2c4>)
 800143a:	f001 f8a7 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	486c      	ldr	r0, [pc, #432]	@ (8001608 <MX_GPIO_Init+0x2c8>)
 8001456:	f001 f899 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800145a:	2308      	movs	r3, #8
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800146a:	2305      	movs	r3, #5
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4864      	ldr	r0, [pc, #400]	@ (8001608 <MX_GPIO_Init+0x2c8>)
 8001476:	f001 f889 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4860      	ldr	r0, [pc, #384]	@ (8001610 <MX_GPIO_Init+0x2d0>)
 8001490:	f001 f87c 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001494:	2310      	movs	r3, #16
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014a4:	2306      	movs	r3, #6
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4858      	ldr	r0, [pc, #352]	@ (8001610 <MX_GPIO_Init+0x2d0>)
 80014b0:	f001 f86c 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014b4:	23e0      	movs	r3, #224	@ 0xe0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c4:	2305      	movs	r3, #5
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4850      	ldr	r0, [pc, #320]	@ (8001610 <MX_GPIO_Init+0x2d0>)
 80014d0:	f001 f85c 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Btn1_Pin C5_Btn2_Pin */
  GPIO_InitStruct.Pin = C4_Btn1_Pin|C5_Btn2_Pin;
 80014d4:	2330      	movs	r3, #48	@ 0x30
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4848      	ldr	r0, [pc, #288]	@ (8001608 <MX_GPIO_Init+0x2c8>)
 80014e8:	f001 f850 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Btn3_Pin B1_Btn4_Pin BOOT1_Pin */
  GPIO_InitStruct.Pin = B0_Btn3_Pin|B1_Btn4_Pin|BOOT1_Pin;
 80014ec:	2307      	movs	r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4845      	ldr	r0, [pc, #276]	@ (8001614 <MX_GPIO_Init+0x2d4>)
 8001500:	f001 f844 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001516:	2305      	movs	r3, #5
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	483c      	ldr	r0, [pc, #240]	@ (8001614 <MX_GPIO_Init+0x2d4>)
 8001522:	f001 f833 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001526:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800152a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4833      	ldr	r0, [pc, #204]	@ (800160c <MX_GPIO_Init+0x2cc>)
 8001540:	f001 f824 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001544:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001556:	2306      	movs	r3, #6
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4829      	ldr	r0, [pc, #164]	@ (8001608 <MX_GPIO_Init+0x2c8>)
 8001562:	f001 f813 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001566:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4825      	ldr	r0, [pc, #148]	@ (8001610 <MX_GPIO_Init+0x2d0>)
 800157c:	f001 f806 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001580:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001592:	230a      	movs	r3, #10
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	481c      	ldr	r0, [pc, #112]	@ (8001610 <MX_GPIO_Init+0x2d0>)
 800159e:	f000 fff5 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015a2:	2320      	movs	r3, #32
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4815      	ldr	r0, [pc, #84]	@ (800160c <MX_GPIO_Init+0x2cc>)
 80015b6:	f000 ffe9 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015cc:	2304      	movs	r3, #4
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	480f      	ldr	r0, [pc, #60]	@ (8001614 <MX_GPIO_Init+0x2d4>)
 80015d8:	f000 ffd8 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015e0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_GPIO_Init+0x2c4>)
 80015f2:	f000 ffcb 	bl	800258c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	@ 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40021000 	.word	0x40021000
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400

08001618 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001620:	f000 f80a 	bl	8001638 <SCH_Update>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <Error_Handler+0x8>

08001638 <SCH_Update>:

        SCH_tasks_G[i].TaskID = -1;
    }
}

void SCH_Update(void) {
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 800163c:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <SCH_Update+0x48>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <SCH_Update+0x48>)
 8001644:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <SCH_Update+0x4c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <SCH_Update+0x3e>
 800164e:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <SCH_Update+0x4c>)
 8001650:	7b1b      	ldrb	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <SCH_Update+0x4c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <SCH_Update+0x4c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <SCH_Update+0x4c>)
 8001666:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SCH_Update+0x4c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SCH_Update+0x4c>)
 8001672:	2201      	movs	r2, #1
 8001674:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000234 	.word	0x20000234
 8001684:	20000168 	.word	0x20000168

08001688 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
 80016a4:	e133      	b.n	800190e <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80016a6:	7ffa      	ldrb	r2, [r7, #31]
 80016a8:	49a1      	ldr	r1, [pc, #644]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3304      	adds	r3, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4413      	add	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	f240 80c1 	bls.w	800184a <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80016c8:	7ffa      	ldrb	r2, [r7, #31]
 80016ca:	4999      	ldr	r1, [pc, #612]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80016e4:	7ffa      	ldrb	r2, [r7, #31]
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ac9      	subs	r1, r1, r3
 80016ec:	4890      	ldr	r0, [pc, #576]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4403      	add	r3, r0
 80016f8:	3304      	adds	r3, #4
 80016fa:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80016fc:	2309      	movs	r3, #9
 80016fe:	75fb      	strb	r3, [r7, #23]
 8001700:	e04c      	b.n	800179c <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	1e59      	subs	r1, r3, #1
 8001706:	7dfa      	ldrb	r2, [r7, #23]
 8001708:	4889      	ldr	r0, [pc, #548]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800170a:	460b      	mov	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4403      	add	r3, r0
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	4886      	ldr	r0, [pc, #536]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	1e59      	subs	r1, r3, #1
 8001728:	7dfa      	ldrb	r2, [r7, #23]
 800172a:	4881      	ldr	r0, [pc, #516]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4403      	add	r3, r0
 8001736:	3308      	adds	r3, #8
 8001738:	6819      	ldr	r1, [r3, #0]
 800173a:	487d      	ldr	r0, [pc, #500]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4403      	add	r3, r0
 8001746:	3308      	adds	r3, #8
 8001748:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	1e59      	subs	r1, r3, #1
 800174e:	7dfa      	ldrb	r2, [r7, #23]
 8001750:	4877      	ldr	r0, [pc, #476]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001752:	460b      	mov	r3, r1
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4403      	add	r3, r0
 800175c:	3304      	adds	r3, #4
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	4873      	ldr	r0, [pc, #460]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	3304      	adds	r3, #4
 800176e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	1e59      	subs	r1, r3, #1
 8001774:	7dfa      	ldrb	r2, [r7, #23]
 8001776:	486e      	ldr	r0, [pc, #440]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4403      	add	r3, r0
 8001782:	3310      	adds	r3, #16
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	486a      	ldr	r0, [pc, #424]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4403      	add	r3, r0
 8001792:	3310      	adds	r3, #16
 8001794:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	3b01      	subs	r3, #1
 800179a:	75fb      	strb	r3, [r7, #23]
 800179c:	7dfa      	ldrb	r2, [r7, #23]
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8ae      	bhi.n	8001702 <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80017a4:	7ffa      	ldrb	r2, [r7, #31]
 80017a6:	4962      	ldr	r1, [pc, #392]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80017b6:	7ffa      	ldrb	r2, [r7, #31]
 80017b8:	495d      	ldr	r1, [pc, #372]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80017ca:	7ffa      	ldrb	r2, [r7, #31]
 80017cc:	4958      	ldr	r1, [pc, #352]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	3308      	adds	r3, #8
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 80017de:	7ffa      	ldrb	r2, [r7, #31]
 80017e0:	4953      	ldr	r1, [pc, #332]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80017f4:	7ffa      	ldrb	r2, [r7, #31]
 80017f6:	494e      	ldr	r1, [pc, #312]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	330c      	adds	r3, #12
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e009      	b.n	800181e <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 800180a:	7ffa      	ldrb	r2, [r7, #31]
 800180c:	4948      	ldr	r1, [pc, #288]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	330c      	adds	r3, #12
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800181e:	7ffc      	ldrb	r4, [r7, #31]
 8001820:	f000 f9a6 	bl	8001b70 <Get_New_Task_ID>
 8001824:	4602      	mov	r2, r0
 8001826:	4942      	ldr	r1, [pc, #264]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001828:	4623      	mov	r3, r4
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4423      	add	r3, r4
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3310      	adds	r3, #16
 8001834:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8001836:	7ffa      	ldrb	r2, [r7, #31]
 8001838:	493d      	ldr	r1, [pc, #244]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3310      	adds	r3, #16
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e06e      	b.n	8001928 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 800184a:	7ffa      	ldrb	r2, [r7, #31]
 800184c:	4938      	ldr	r1, [pc, #224]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d154      	bne.n	8001908 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800185e:	7ffa      	ldrb	r2, [r7, #31]
 8001860:	4933      	ldr	r1, [pc, #204]	@ (8001930 <SCH_Add_Task+0x2a8>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001870:	7ffa      	ldrb	r2, [r7, #31]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ac9      	subs	r1, r1, r3
 8001878:	482d      	ldr	r0, [pc, #180]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4403      	add	r3, r0
 8001884:	3304      	adds	r3, #4
 8001886:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001888:	7ffa      	ldrb	r2, [r7, #31]
 800188a:	4929      	ldr	r1, [pc, #164]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	3308      	adds	r3, #8
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 800189c:	7ffa      	ldrb	r2, [r7, #31]
 800189e:	4924      	ldr	r1, [pc, #144]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80018b2:	7ffa      	ldrb	r2, [r7, #31]
 80018b4:	491e      	ldr	r1, [pc, #120]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	330c      	adds	r3, #12
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e009      	b.n	80018dc <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 80018c8:	7ffa      	ldrb	r2, [r7, #31]
 80018ca:	4919      	ldr	r1, [pc, #100]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	330c      	adds	r3, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80018dc:	7ffc      	ldrb	r4, [r7, #31]
 80018de:	f000 f947 	bl	8001b70 <Get_New_Task_ID>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4912      	ldr	r1, [pc, #72]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80018e6:	4623      	mov	r3, r4
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4423      	add	r3, r4
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	3310      	adds	r3, #16
 80018f2:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80018f4:	7ffa      	ldrb	r2, [r7, #31]
 80018f6:	490e      	ldr	r1, [pc, #56]	@ (8001930 <SCH_Add_Task+0x2a8>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3310      	adds	r3, #16
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e00f      	b.n	8001928 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	3301      	adds	r3, #1
 800190c:	77fb      	strb	r3, [r7, #31]
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b09      	cmp	r3, #9
 8001912:	f67f aec8 	bls.w	80016a6 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001916:	7ffa      	ldrb	r2, [r7, #31]
 8001918:	4905      	ldr	r1, [pc, #20]	@ (8001930 <SCH_Add_Task+0x2a8>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3310      	adds	r3, #16
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3724      	adds	r7, #36	@ 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	20000168 	.word	0x20000168

08001934 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80e2 	beq.w	8001b0c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e0da      	b.n	8001b04 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	4972      	ldr	r1, [pc, #456]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3310      	adds	r3, #16
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	f040 80cb 	bne.w	8001afe <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d02b      	beq.n	80019ca <SCH_Delete_Task+0x96>
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b08      	cmp	r3, #8
 8001976:	d828      	bhi.n	80019ca <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4967      	ldr	r1, [pc, #412]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d01d      	beq.n	80019ca <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4962      	ldr	r1, [pc, #392]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3304      	adds	r3, #4
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	485d      	ldr	r0, [pc, #372]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4403      	add	r3, r0
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	3201      	adds	r2, #1
 80019b8:	4419      	add	r1, r3
 80019ba:	4858      	ldr	r0, [pc, #352]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4403      	add	r3, r0
 80019c6:	3304      	adds	r3, #4
 80019c8:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	73bb      	strb	r3, [r7, #14]
 80019ce:	e060      	b.n	8001a92 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	7bba      	ldrb	r2, [r7, #14]
 80019d6:	4851      	ldr	r0, [pc, #324]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4403      	add	r3, r0
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	484d      	ldr	r0, [pc, #308]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4403      	add	r3, r0
 80019f0:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	7bba      	ldrb	r2, [r7, #14]
 80019f8:	4848      	ldr	r0, [pc, #288]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 80019fa:	460b      	mov	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	3308      	adds	r3, #8
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	4844      	ldr	r0, [pc, #272]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4403      	add	r3, r0
 8001a14:	3308      	adds	r3, #8
 8001a16:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	7bba      	ldrb	r2, [r7, #14]
 8001a1e:	483f      	ldr	r0, [pc, #252]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	483b      	ldr	r0, [pc, #236]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4403      	add	r3, r0
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	1c59      	adds	r1, r3, #1
 8001a42:	7bba      	ldrb	r2, [r7, #14]
 8001a44:	4835      	ldr	r0, [pc, #212]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a46:	460b      	mov	r3, r1
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4403      	add	r3, r0
 8001a50:	330c      	adds	r3, #12
 8001a52:	7818      	ldrb	r0, [r3, #0]
 8001a54:	4931      	ldr	r1, [pc, #196]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	330c      	adds	r3, #12
 8001a62:	4602      	mov	r2, r0
 8001a64:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	7bba      	ldrb	r2, [r7, #14]
 8001a6c:	482b      	ldr	r0, [pc, #172]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a6e:	460b      	mov	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4403      	add	r3, r0
 8001a78:	3310      	adds	r3, #16
 8001a7a:	6819      	ldr	r1, [r3, #0]
 8001a7c:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4403      	add	r3, r0
 8001a88:	3310      	adds	r3, #16
 8001a8a:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73bb      	strb	r3, [r7, #14]
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d99b      	bls.n	80019d0 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8001a98:	7bba      	ldrb	r2, [r7, #14]
 8001a9a:	4920      	ldr	r1, [pc, #128]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8001aaa:	7bba      	ldrb	r2, [r7, #14]
 8001aac:	491b      	ldr	r1, [pc, #108]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3308      	adds	r3, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001abe:	7bba      	ldrb	r2, [r7, #14]
 8001ac0:	4916      	ldr	r1, [pc, #88]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3304      	adds	r3, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001ad2:	7bba      	ldrb	r2, [r7, #14]
 8001ad4:	4911      	ldr	r1, [pc, #68]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001ae6:	7bba      	ldrb	r2, [r7, #14]
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <SCH_Delete_Task+0x1e8>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	3310      	adds	r3, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001afa:	7b7b      	ldrb	r3, [r7, #13]
 8001afc:	e007      	b.n	8001b0e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3301      	adds	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b09      	cmp	r3, #9
 8001b08:	f67f af21 	bls.w	800194e <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code;
 8001b0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000168 	.word	0x20000168

08001b20 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <SCH_Dispatch_Tasks+0x4c>)
 8001b28:	7b1b      	ldrb	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d019      	beq.n	8001b62 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <SCH_Dispatch_Tasks+0x4c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <SCH_Dispatch_Tasks+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <SCH_Dispatch_Tasks+0x4c>)
 8001b3c:	1d3c      	adds	r4, r7, #4
 8001b3e:	461d      	mov	r5, r3
 8001b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fef2 	bl	8001934 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd93 	bl	8001688 <SCH_Add_Task>
		}
	}
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000168 	.word	0x20000168

08001b70 <Get_New_Task_ID>:

uint32_t Get_New_Task_ID(void){
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	newTaskID++;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b7c:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b8e:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <Get_New_Task_ID+0x30>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000230 	.word	0x20000230

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001be2:	2007      	movs	r0, #7
 8001be4:	f000 fbfe 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c04:	d115      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_TIM_Base_MspInit+0x48>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_TIM_Base_MspInit+0x48>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_TIM_Base_MspInit+0x48>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	201c      	movs	r0, #28
 8001c28:	f000 fbe7 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c2c:	201c      	movs	r0, #28
 8001c2e:	f000 fc00 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd4 <HAL_UART_MspInit+0x94>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d133      	bne.n	8001cca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a14      	ldr	r2, [pc, #80]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_UART_MspInit+0x98>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001caa:	2307      	movs	r3, #7
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <HAL_UART_MspInit+0x9c>)
 8001cb6:	f000 fc69 	bl	800258c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2026      	movs	r0, #38	@ 0x26
 8001cc0:	f000 fb9b 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc4:	2026      	movs	r0, #38	@ 0x26
 8001cc6:	f000 fbb4 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d36:	f000 fa45 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d44:	4802      	ldr	r0, [pc, #8]	@ (8001d50 <TIM2_IRQHandler+0x10>)
 8001d46:	f001 fb67 	bl	8003418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000cc 	.word	0x200000cc

08001d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <USART2_IRQHandler+0x10>)
 8001d5a:	f002 f813 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000114 	.word	0x20000114

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f002 ff9e 	bl	8004cd8 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	20000238 	.word	0x20000238
 8001dd0:	200003c0 	.word	0x200003c0

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <setTimer1+0x28>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e0a:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <setTimer1+0x2c>)
 8001e0c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <setTimer1+0x30>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000030 	.word	0x20000030
 8001e24:	20000240 	.word	0x20000240
 8001e28:	2000025c 	.word	0x2000025c

08001e2c <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001e34:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <setTimer4+0x28>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3e:	4a06      	ldr	r2, [pc, #24]	@ (8001e58 <setTimer4+0x2c>)
 8001e40:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <setTimer4+0x30>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000030 	.word	0x20000030
 8001e58:	2000024c 	.word	0x2000024c
 8001e5c:	20000268 	.word	0x20000268

08001e60 <timer_run>:
void setTimer6(int duration) {
	timer6_counter = duration/TIMER_CYCLE;
	timer6_flag = 0;
}

void timer_run() {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001e64:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <timer_run+0xf0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd0b      	ble.n	8001e84 <timer_run+0x24>
		timer0_counter--;
 8001e6c:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <timer_run+0xf0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	4a37      	ldr	r2, [pc, #220]	@ (8001f50 <timer_run+0xf0>)
 8001e74:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8001e76:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <timer_run+0xf0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <timer_run+0x24>
 8001e7e:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <timer_run+0xf4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001e84:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <timer_run+0xf8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	dd0b      	ble.n	8001ea4 <timer_run+0x44>
		timer1_counter--;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <timer_run+0xf8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <timer_run+0xf8>)
 8001e94:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001e96:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <timer_run+0xf8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <timer_run+0x44>
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <timer_run+0xfc>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f60 <timer_run+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dd0b      	ble.n	8001ec4 <timer_run+0x64>
		timer2_counter--;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <timer_run+0x100>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f60 <timer_run+0x100>)
 8001eb4:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <timer_run+0x100>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <timer_run+0x64>
 8001ebe:	4b29      	ldr	r3, [pc, #164]	@ (8001f64 <timer_run+0x104>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001ec4:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <timer_run+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	dd0b      	ble.n	8001ee4 <timer_run+0x84>
		timer3_counter--;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <timer_run+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	4a25      	ldr	r2, [pc, #148]	@ (8001f68 <timer_run+0x108>)
 8001ed4:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <timer_run+0x108>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <timer_run+0x84>
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <timer_run+0x10c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <timer_run+0x110>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dd0b      	ble.n	8001f04 <timer_run+0xa4>
		timer4_counter--;
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <timer_run+0x110>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <timer_run+0x110>)
 8001ef4:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <timer_run+0x110>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <timer_run+0xa4>
 8001efe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <timer_run+0x114>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001f04:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <timer_run+0x118>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dd0b      	ble.n	8001f24 <timer_run+0xc4>
		timer5_counter--;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <timer_run+0x118>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <timer_run+0x118>)
 8001f14:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <timer_run+0x118>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <timer_run+0xc4>
 8001f1e:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <timer_run+0x11c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <timer_run+0x120>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd0b      	ble.n	8001f44 <timer_run+0xe4>
		timer6_counter--;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <timer_run+0x120>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <timer_run+0x120>)
 8001f34:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 8001f36:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <timer_run+0x120>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <timer_run+0xe4>
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <timer_run+0x124>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
	}
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000023c 	.word	0x2000023c
 8001f54:	20000258 	.word	0x20000258
 8001f58:	20000240 	.word	0x20000240
 8001f5c:	2000025c 	.word	0x2000025c
 8001f60:	20000244 	.word	0x20000244
 8001f64:	20000260 	.word	0x20000260
 8001f68:	20000248 	.word	0x20000248
 8001f6c:	20000264 	.word	0x20000264
 8001f70:	2000024c 	.word	0x2000024c
 8001f74:	20000268 	.word	0x20000268
 8001f78:	20000250 	.word	0x20000250
 8001f7c:	2000026c 	.word	0x2000026c
 8001f80:	20000254 	.word	0x20000254
 8001f84:	20000270 	.word	0x20000270

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	@ (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	@ (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	@ (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <sleep_enter>:
 *      Author: NGHIA
 */
#include "main.h"


void sleep_enter(){
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
	uint8_t str[] = "Sleep\n";
 800201e:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <sleep_enter+0x3c>)
 8002020:	463b      	mov	r3, r7
 8002022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002026:	6018      	str	r0, [r3, #0]
 8002028:	3304      	adds	r3, #4
 800202a:	8019      	strh	r1, [r3, #0]
 800202c:	3302      	adds	r3, #2
 800202e:	0c0a      	lsrs	r2, r1, #16
 8002030:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2,(uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
 8002032:	4639      	mov	r1, r7
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	2207      	movs	r2, #7
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <sleep_enter+0x40>)
 800203c:	f001 fdf2 	bl	8003c24 <HAL_UART_Transmit>

	HAL_SuspendTick();
 8002040:	f000 f8e0 	bl	8002204 <HAL_SuspendTick>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002044:	2101      	movs	r1, #1
 8002046:	2000      	movs	r0, #0
 8002048:	f000 fc6e 	bl	8002928 <HAL_PWR_EnterSLEEPMode>



}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08005ef0 	.word	0x08005ef0
 8002058:	20000114 	.word	0x20000114

0800205c <exti_config_wake>:


void exti_config_wake(){
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA; //EXTI on PA3
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <exti_config_wake+0x44>)
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <exti_config_wake+0x44>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_IM3; //interrupt request
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <exti_config_wake+0x48>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <exti_config_wake+0x48>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6013      	str	r3, [r2, #0]

	//falling edge
	EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <exti_config_wake+0x48>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <exti_config_wake+0x48>)
 800207a:	f023 0308 	bic.w	r3, r3, #8
 800207e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= EXTI_FTSR_TR3_Msk;
 8002080:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <exti_config_wake+0x48>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <exti_config_wake+0x48>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	60d3      	str	r3, [r2, #12]

	//NVIC init
	NVIC_SetPriority(EXTI3_IRQn, 0);
 800208c:	2100      	movs	r1, #0
 800208e:	2009      	movs	r0, #9
 8002090:	f7ff ff98 	bl	8001fc4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI3_IRQn);
 8002094:	2009      	movs	r0, #9
 8002096:	f7ff ff77 	bl	8001f88 <__NVIC_EnableIRQ>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	if((EXTI->PR & EXTI_PR_PR3_Msk) != 0){
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <EXTI3_IRQHandler+0x20>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <EXTI3_IRQHandler+0x1a>

		//clear pending
		EXTI->PR = EXTI_PR_PR3;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <EXTI3_IRQHandler+0x20>)
 80020ba:	2208      	movs	r2, #8
 80020bc:	615a      	str	r2, [r3, #20]

		//Exit sleep mode
		HAL_ResumeTick();
 80020be:	f000 f8b1 	bl	8002224 <HAL_ResumeTick>

//		uint8_t str[] = "Wake\n";
//
//		HAL_UART_Transmit(&huart2,(uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
	}
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40013c00 	.word	0x40013c00

080020cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020d0:	f7ff fe80 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	@ (800210c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f002 fdf3 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fe:	f7fe ffed 	bl	80010dc <main>
  bx  lr    
 8002102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002110:	0800607c 	.word	0x0800607c
  ldr r2, =_sbss
 8002114:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002118:	200003c0 	.word	0x200003c0

0800211c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC_IRQHandler>
	...

08002120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_Init+0x40>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <HAL_Init+0x40>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <HAL_Init+0x40>)
 8002142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f94b 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f808 	bl	8002164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002154:	f7ff fd26 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023c00 	.word	0x40023c00

08002164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x54>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x58>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f963 	bl	800244e <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00e      	b.n	80021b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0f      	cmp	r3, #15
 8002196:	d80a      	bhi.n	80021ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002198:	2200      	movs	r2, #0
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f000 f92b 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <HAL_InitTick+0x5c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000002c 	.word	0x2000002c
 80021bc:	20000038 	.word	0x20000038
 80021c0:	20000034 	.word	0x20000034

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000038 	.word	0x20000038
 80021e8:	20000274 	.word	0x20000274

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000274 	.word	0x20000274

08002204 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_SuspendTick+0x1c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_SuspendTick+0x1c>)
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_ResumeTick+0x1c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <HAL_ResumeTick+0x1c>)
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <__NVIC_SetPriorityGrouping>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	@ (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	@ (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff feba 	bl	80021ec <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d008      	beq.n	8002498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e052      	b.n	800253e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0216 	bic.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_DMA_Abort+0x62>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e8:	e013      	b.n	8002512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ea:	f7ff fe7f 	bl	80021ec <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d90c      	bls.n	8002512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2203      	movs	r2, #3
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e015      	b.n	800253e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e4      	bne.n	80024ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	223f      	movs	r2, #63	@ 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e00c      	b.n	800257e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	@ 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e16b      	b.n	8002880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 815a 	bne.w	800287a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80b4 	beq.w	800287a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b60      	ldr	r3, [pc, #384]	@ (8002898 <HAL_GPIO_Init+0x30c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	4a5f      	ldr	r2, [pc, #380]	@ (8002898 <HAL_GPIO_Init+0x30c>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002720:	6453      	str	r3, [r2, #68]	@ 0x44
 8002722:	4b5d      	ldr	r3, [pc, #372]	@ (8002898 <HAL_GPIO_Init+0x30c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a5b      	ldr	r2, [pc, #364]	@ (800289c <HAL_GPIO_Init+0x310>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_GPIO_Init+0x314>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d02b      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a51      	ldr	r2, [pc, #324]	@ (80028a4 <HAL_GPIO_Init+0x318>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d025      	beq.n	80027ae <HAL_GPIO_Init+0x222>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a50      	ldr	r2, [pc, #320]	@ (80028a8 <HAL_GPIO_Init+0x31c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <HAL_GPIO_Init+0x21e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4f      	ldr	r2, [pc, #316]	@ (80028ac <HAL_GPIO_Init+0x320>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d019      	beq.n	80027a6 <HAL_GPIO_Init+0x21a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	@ (80028b0 <HAL_GPIO_Init+0x324>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_GPIO_Init+0x216>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	@ (80028b4 <HAL_GPIO_Init+0x328>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00d      	beq.n	800279e <HAL_GPIO_Init+0x212>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	@ (80028b8 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <HAL_GPIO_Init+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	@ (80028bc <HAL_GPIO_Init+0x330>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_GPIO_Init+0x20a>
 8002792:	2307      	movs	r3, #7
 8002794:	e00e      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 8002796:	2308      	movs	r3, #8
 8002798:	e00c      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 800279a:	2306      	movs	r3, #6
 800279c:	e00a      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 800279e:	2305      	movs	r3, #5
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 80027a2:	2304      	movs	r3, #4
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x228>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c4:	4935      	ldr	r1, [pc, #212]	@ (800289c <HAL_GPIO_Init+0x310>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d2:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f6:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fc:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002820:	4a27      	ldr	r2, [pc, #156]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002826:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284a:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002874:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f ae90 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40021c00 	.word	0x40021c00
 80028c0:	40013c00 	.word	0x40013c00

080028c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_PWR_EnterSLEEPMode+0x3c>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8002946:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8002948:	e005      	b.n	8002956 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d001      	beq.n	8002954 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8002950:	bf40      	sev
      __WFE();
 8002952:	bf20      	wfe
    __WFE();
 8002954:	bf20      	wfe
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e267      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d075      	beq.n	8002a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d00c      	beq.n	80029ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d112      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x108>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e242      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x74>
 80029ce:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a75      	ldr	r2, [pc, #468]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b70      	ldr	r3, [pc, #448]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6f      	ldr	r2, [pc, #444]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a6c      	ldr	r2, [pc, #432]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 8002a00:	4b69      	ldr	r3, [pc, #420]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a68      	ldr	r2, [pc, #416]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a65      	ldr	r2, [pc, #404]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fbe4 	bl	80021ec <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fbe0 	bl	80021ec <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e207      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xc0>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff fbd0 	bl	80021ec <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff fbcc 	bl	80021ec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1f3      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0xe8>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b44      	ldr	r3, [pc, #272]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c7      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4937      	ldr	r1, [pc, #220]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <HAL_RCC_OscConfig+0x244>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7ff fb85 	bl	80021ec <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7ff fb81 	bl	80021ec <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a8      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4925      	ldr	r1, [pc, #148]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_OscConfig+0x244>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff fb64 	bl	80021ec <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7ff fb60 	bl	80021ec <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e187      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d036      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_RCC_OscConfig+0x248>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff fb44 	bl	80021ec <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7ff fb40 	bl	80021ec <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e167      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x200>
 8002b86:	e01b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_OscConfig+0x248>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fb2d 	bl	80021ec <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	e00e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7ff fb29 	bl	80021ec <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d907      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e150      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	42470000 	.word	0x42470000
 8002bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b88      	ldr	r3, [pc, #544]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ea      	bne.n	8002b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8097 	beq.w	8002cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd2:	4b81      	ldr	r3, [pc, #516]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b7d      	ldr	r3, [pc, #500]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bee:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b77      	ldr	r3, [pc, #476]	@ (8002ddc <HAL_RCC_OscConfig+0x474>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b74      	ldr	r3, [pc, #464]	@ (8002ddc <HAL_RCC_OscConfig+0x474>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a73      	ldr	r2, [pc, #460]	@ (8002ddc <HAL_RCC_OscConfig+0x474>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fae9 	bl	80021ec <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7ff fae5 	bl	80021ec <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e10c      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b6a      	ldr	r3, [pc, #424]	@ (8002ddc <HAL_RCC_OscConfig+0x474>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2ea>
 8002c44:	4b64      	ldr	r3, [pc, #400]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	4a63      	ldr	r2, [pc, #396]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x324>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x30c>
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c66:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0x324>
 8002c74:	4b58      	ldr	r3, [pc, #352]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c80:	4b55      	ldr	r3, [pc, #340]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a54      	ldr	r2, [pc, #336]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 0304 	bic.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7ff faaa 	bl	80021ec <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7ff faa6 	bl	80021ec <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e0cb      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ee      	beq.n	8002c9c <HAL_RCC_OscConfig+0x334>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7ff fa94 	bl	80021ec <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fa90 	bl	80021ec <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0b5      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ee      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	4a38      	ldr	r2, [pc, #224]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a1 	beq.w	8002e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d05c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d141      	bne.n	8002d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_RCC_OscConfig+0x478>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa64 	bl	80021ec <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff fa60 	bl	80021ec <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e087      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	491b      	ldr	r1, [pc, #108]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x478>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7ff fa39 	bl	80021ec <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7ff fa35 	bl	80021ec <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e05c      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x416>
 8002d9c:	e054      	b.n	8002e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <HAL_RCC_OscConfig+0x478>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fa22 	bl	80021ec <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7ff fa1e 	bl	80021ec <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e045      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x444>
 8002dca:	e03d      	b.n	8002e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e038      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d121      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cc      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b68      	ldr	r3, [pc, #416]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90c      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b3f      	ldr	r3, [pc, #252]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e067      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b37      	ldr	r3, [pc, #220]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4934      	ldr	r1, [pc, #208]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7ff f950 	bl	80021ec <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7ff f94c 	bl	80021ec <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	@ (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f8b0 	bl	8002164 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	08005f04 	.word	0x08005f04
 800301c:	2000002c 	.word	0x2000002c
 8003020:	20000034 	.word	0x20000034

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003028:	b094      	sub	sp, #80	@ 0x50
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003030:	2300      	movs	r3, #0
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003034:	2300      	movs	r3, #0
 8003036:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b79      	ldr	r3, [pc, #484]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80e1 	bhi.w	8003210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e0db      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b73      	ldr	r3, [pc, #460]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 800305a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800305c:	e0db      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b73      	ldr	r3, [pc, #460]	@ (800322c <HAL_RCC_GetSysClockFreq+0x208>)
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003062:	e0d8      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b6f      	ldr	r3, [pc, #444]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800306c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306e:	4b6d      	ldr	r3, [pc, #436]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d063      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b6a      	ldr	r3, [pc, #424]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003084:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	@ 0x34
 8003092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4621      	mov	r1, r4
 80030b0:	1a51      	subs	r1, r2, r1
 80030b2:	6139      	str	r1, [r7, #16]
 80030b4:	4629      	mov	r1, r5
 80030b6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c8:	4659      	mov	r1, fp
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d2:	4651      	mov	r1, sl
 80030d4:	018a      	lsls	r2, r1, #6
 80030d6:	4651      	mov	r1, sl
 80030d8:	ebb2 0801 	subs.w	r8, r2, r1
 80030dc:	4659      	mov	r1, fp
 80030de:	eb63 0901 	sbc.w	r9, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb18 0303 	adds.w	r3, r8, r3
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	462b      	mov	r3, r5
 8003104:	eb49 0303 	adc.w	r3, r9, r3
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003116:	4629      	mov	r1, r5
 8003118:	024b      	lsls	r3, r1, #9
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003120:	4621      	mov	r1, r4
 8003122:	024a      	lsls	r2, r1, #9
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312a:	2200      	movs	r2, #0
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800312e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003134:	f7fd f8a4 	bl	8000280 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003140:	e058      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b38      	ldr	r3, [pc, #224]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	2200      	movs	r2, #0
 800314a:	4618      	mov	r0, r3
 800314c:	4611      	mov	r1, r2
 800314e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
 8003158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0159      	lsls	r1, r3, #5
 800316a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316e:	0150      	lsls	r0, r2, #5
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4641      	mov	r1, r8
 8003176:	ebb2 0a01 	subs.w	sl, r2, r1
 800317a:	4649      	mov	r1, r9
 800317c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800318c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003194:	ebb2 040a 	subs.w	r4, r2, sl
 8003198:	eb63 050b 	sbc.w	r5, r3, fp
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	00eb      	lsls	r3, r5, #3
 80031a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031aa:	00e2      	lsls	r2, r4, #3
 80031ac:	4614      	mov	r4, r2
 80031ae:	461d      	mov	r5, r3
 80031b0:	4643      	mov	r3, r8
 80031b2:	18e3      	adds	r3, r4, r3
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	464b      	mov	r3, r9
 80031b8:	eb45 0303 	adc.w	r3, r5, r3
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ca:	4629      	mov	r1, r5
 80031cc:	028b      	lsls	r3, r1, #10
 80031ce:	4621      	mov	r1, r4
 80031d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d4:	4621      	mov	r1, r4
 80031d6:	028a      	lsls	r2, r1, #10
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031de:	2200      	movs	r2, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	61fa      	str	r2, [r7, #28]
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	f7fd f84a 	bl	8000280 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003204:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x204>)
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003218:	4618      	mov	r0, r3
 800321a:	3750      	adds	r7, #80	@ 0x50
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	00f42400 	.word	0x00f42400
 800322c:	007a1200 	.word	0x007a1200

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000002c 	.word	0x2000002c

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800324c:	f7ff fff0 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_GetPCLK1Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	08005f14 	.word	0x08005f14

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003274:	f7ff ffdc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0b5b      	lsrs	r3, r3, #13
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	08005f14 	.word	0x08005f14

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fc98 	bl	8001bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fa7e 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d001      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e04e      	b.n	80033ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a23      	ldr	r2, [pc, #140]	@ (80033fc <HAL_TIM_Base_Start_IT+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d01d      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_TIM_Base_Start_IT+0xc8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1e      	ldr	r2, [pc, #120]	@ (8003404 <HAL_TIM_Base_Start_IT+0xcc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1c      	ldr	r2, [pc, #112]	@ (8003408 <HAL_TIM_Base_Start_IT+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <HAL_TIM_Base_Start_IT+0xd4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_TIM_Base_Start_IT+0xd8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_TIM_Base_Start_IT+0xdc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d010      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	e007      	b.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40001800 	.word	0x40001800

08003418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0202 	mvn.w	r2, #2
 800344c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f999 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f98b 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f99c 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d020      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0204 	mvn.w	r2, #4
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f973 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f965 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f976 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d020      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0208 	mvn.w	r2, #8
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2204      	movs	r2, #4
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f94d 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f93f 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f950 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f927 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f919 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f92a 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0201 	mvn.w	r2, #1
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f84a 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fae4 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8fb 	bl	80037c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0220 	mvn.w	r2, #32
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fab6 	bl	8003b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIM_ConfigClockSource+0x1c>
 8003610:	2302      	movs	r3, #2
 8003612:	e0b4      	b.n	800377e <HAL_TIM_ConfigClockSource+0x186>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800363a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364c:	d03e      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0xd4>
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003652:	f200 8087 	bhi.w	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	f000 8086 	beq.w	800376a <HAL_TIM_ConfigClockSource+0x172>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003662:	d87f      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b70      	cmp	r3, #112	@ 0x70
 8003666:	d01a      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xa6>
 8003668:	2b70      	cmp	r3, #112	@ 0x70
 800366a:	d87b      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b60      	cmp	r3, #96	@ 0x60
 800366e:	d050      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x11a>
 8003670:	2b60      	cmp	r3, #96	@ 0x60
 8003672:	d877      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b50      	cmp	r3, #80	@ 0x50
 8003676:	d03c      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003678:	2b50      	cmp	r3, #80	@ 0x50
 800367a:	d873      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d058      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x13a>
 8003680:	2b40      	cmp	r3, #64	@ 0x40
 8003682:	d86f      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b30      	cmp	r3, #48	@ 0x30
 8003686:	d064      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b30      	cmp	r3, #48	@ 0x30
 800368a:	d86b      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b20      	cmp	r3, #32
 800368e:	d060      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b20      	cmp	r3, #32
 8003692:	d867      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d05c      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b10      	cmp	r3, #16
 800369a:	d05a      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x15a>
 800369c:	e062      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ae:	f000 f9b9 	bl	8003a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	609a      	str	r2, [r3, #8]
      break;
 80036ca:	e04f      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036dc:	f000 f9a2 	bl	8003a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036ee:	609a      	str	r2, [r3, #8]
      break;
 80036f0:	e03c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 f916 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2150      	movs	r1, #80	@ 0x50
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f96f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003710:	e02c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800371e:	461a      	mov	r2, r3
 8003720:	f000 f935 	bl	800398e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2160      	movs	r1, #96	@ 0x60
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f95f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003730:	e01c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800373e:	461a      	mov	r2, r3
 8003740:	f000 f8f6 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2140      	movs	r1, #64	@ 0x40
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f94f 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003750:	e00c      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 f946 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 8003762:	e003      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e000      	b.n	800376c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800376a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a46      	ldr	r2, [pc, #280]	@ (8003904 <TIM_Base_SetConfig+0x12c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f6:	d00f      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a43      	ldr	r2, [pc, #268]	@ (8003908 <TIM_Base_SetConfig+0x130>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a42      	ldr	r2, [pc, #264]	@ (800390c <TIM_Base_SetConfig+0x134>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a41      	ldr	r2, [pc, #260]	@ (8003910 <TIM_Base_SetConfig+0x138>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	@ (8003914 <TIM_Base_SetConfig+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a35      	ldr	r2, [pc, #212]	@ (8003904 <TIM_Base_SetConfig+0x12c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003838:	d027      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <TIM_Base_SetConfig+0x130>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d023      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a31      	ldr	r2, [pc, #196]	@ (800390c <TIM_Base_SetConfig+0x134>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a30      	ldr	r2, [pc, #192]	@ (8003910 <TIM_Base_SetConfig+0x138>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2f      	ldr	r2, [pc, #188]	@ (8003914 <TIM_Base_SetConfig+0x13c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d017      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2e      	ldr	r2, [pc, #184]	@ (8003918 <TIM_Base_SetConfig+0x140>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2d      	ldr	r2, [pc, #180]	@ (800391c <TIM_Base_SetConfig+0x144>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2c      	ldr	r2, [pc, #176]	@ (8003920 <TIM_Base_SetConfig+0x148>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2b      	ldr	r2, [pc, #172]	@ (8003924 <TIM_Base_SetConfig+0x14c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2a      	ldr	r2, [pc, #168]	@ (8003928 <TIM_Base_SetConfig+0x150>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a29      	ldr	r2, [pc, #164]	@ (800392c <TIM_Base_SetConfig+0x154>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a10      	ldr	r2, [pc, #64]	@ (8003904 <TIM_Base_SetConfig+0x12c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <TIM_Base_SetConfig+0x13c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d103      	bne.n	80038d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f023 0201 	bic.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]
  }
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	40001800 	.word	0x40001800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 0210 	bic.w	r2, r3, #16
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 0307 	orr.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e05a      	b.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a21      	ldr	r2, [pc, #132]	@ (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac8:	d01d      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1d      	ldr	r2, [pc, #116]	@ (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10c      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40010400 	.word	0x40010400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40001800 	.word	0x40001800

08003b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e042      	b.n	8003c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe f848 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fdbd 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	@ 0x28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d175      	bne.n	8003d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Transmit+0x2c>
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e06e      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fe fac3 	bl	80021ec <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7c:	d108      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e003      	b.n	8003c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c98:	e02e      	b.n	8003cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2180      	movs	r1, #128	@ 0x80
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fb1f 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03a      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e007      	b.n	8003cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1cb      	bne.n	8003c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2140      	movs	r1, #64	@ 0x40
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 faeb 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d112      	bne.n	8003d7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Receive_IT+0x26>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00b      	b.n	8003d7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fb12 	bl	800439a <UART_Start_Receive_IT>
 8003d76:	4603      	mov	r3, r0
 8003d78:	e000      	b.n	8003d7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0ba      	sub	sp, #232	@ 0xe8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
 8003dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fbf2 	bl	80045cc <UART_Receive_IT>
      return;
 8003de8:	e25b      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80de 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
 8003df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80d1 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
 8003e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 81f2 	beq.w	8004298 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fb7d 	bl	80045cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_UART_IRQHandler+0x17a>
 8003ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04f      	beq.n	8003f9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa85 	bl	800440e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d141      	bne.n	8003f96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d9      	bne.n	8003f12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_UART_IRQHandler+0x3e0>)
 8003f6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fae7 	bl	8002546 <HAL_DMA_Abort_IT>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00e      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f994 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00a      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f990 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e006      	b.n	8003fac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f98c 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003faa:	e175      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	bf00      	nop
    return;
 8003fae:	e173      	b.n	8004298 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 814f 	bne.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8148 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8141 	beq.w	8004258 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b40      	cmp	r3, #64	@ 0x40
 8003ff8:	f040 80b6 	bne.w	8004168 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8145 	beq.w	800429c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800401a:	429a      	cmp	r2, r3
 800401c:	f080 813e 	bcs.w	800429c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004026:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004032:	f000 8088 	beq.w	8004146 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800404c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004062:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800406e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800407a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1d9      	bne.n	8004036 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3314      	adds	r3, #20
 8004088:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e1      	bne.n	8004082 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3314      	adds	r3, #20
 80040c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3314      	adds	r3, #20
 80040de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004116:	f023 0310 	bic.w	r3, r3, #16
 800411a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004128:	65ba      	str	r2, [r7, #88]	@ 0x58
 800412a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e3      	bne.n	8004104 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f990 	bl	8002466 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004154:	b29b      	uxth	r3, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	b29b      	uxth	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f8b7 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004162:	e09b      	b.n	800429c <HAL_UART_IRQHandler+0x518>
 8004164:	080044d5 	.word	0x080044d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004170:	b29b      	uxth	r3, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808e 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8089 	beq.w	80042a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800419e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	623b      	str	r3, [r7, #32]
   return(result);
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f83d 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004256:	e023      	b.n	80042a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f943 	bl	80044fc <UART_Transmit_IT>
    return;
 8004276:	e014      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f983 	bl	800459c <UART_EndTransmit_IT>
    return;
 8004296:	e004      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
  }
}
 80042a2:	37e8      	adds	r7, #232	@ 0xe8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e03b      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d037      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fd ff73 	bl	80021ec <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e03a      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d023      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b80      	cmp	r3, #128	@ 0x80
 800432e:	d020      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d01d      	beq.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d116      	bne.n	8004372 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f857 	bl	800440e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2208      	movs	r2, #8
 8004364:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e00f      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d0b4      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2222      	movs	r2, #34	@ 0x22
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0220 	orr.w	r2, r2, #32
 80043fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440e:	b480      	push	{r7}
 8004410:	b095      	sub	sp, #84	@ 0x54
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800442c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004436:	643a      	str	r2, [r7, #64]	@ 0x40
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800443c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	61fb      	str	r3, [r7, #28]
   return(result);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	2b01      	cmp	r3, #1
 8004484:	d119      	bne.n	80044ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	60bb      	str	r3, [r7, #8]
   return(result);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0310 	bic.w	r3, r3, #16
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a6:	61ba      	str	r2, [r7, #24]
 80044a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	613b      	str	r3, [r7, #16]
   return(result);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044c8:	bf00      	nop
 80044ca:	3754      	adds	r7, #84	@ 0x54
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fee4 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b21      	cmp	r3, #33	@ 0x21
 800450e:	d13e      	bne.n	800458e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004518:	d114      	bne.n	8004544 <UART_Transmit_IT+0x48>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d110      	bne.n	8004544 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004536:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]
 8004542:	e008      	b.n	8004556 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6211      	str	r1, [r2, #32]
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4619      	mov	r1, r3
 8004564:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004578:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004588:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fe73 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08c      	sub	sp, #48	@ 0x30
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b22      	cmp	r3, #34	@ 0x22
 80045de:	f040 80ae 	bne.w	800473e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ea:	d117      	bne.n	800461c <UART_Receive_IT+0x50>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d113      	bne.n	800461c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	b29a      	uxth	r2, r3
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004614:	1c9a      	adds	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	629a      	str	r2, [r3, #40]	@ 0x28
 800461a:	e026      	b.n	800466a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462e:	d007      	beq.n	8004640 <UART_Receive_IT+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <UART_Receive_IT+0x82>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e008      	b.n	8004660 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4619      	mov	r1, r3
 8004678:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800467a:	2b00      	cmp	r3, #0
 800467c:	d15d      	bne.n	800473a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0220 	bic.w	r2, r2, #32
 800468c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800469c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d135      	bne.n	8004730 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	613b      	str	r3, [r7, #16]
   return(result);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ea:	623a      	str	r2, [r7, #32]
 80046ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	69f9      	ldr	r1, [r7, #28]
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d10a      	bne.n	8004722 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fdd1 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
 800472e:	e002      	b.n	8004736 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fc fcab 	bl	800108c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	e002      	b.n	8004740 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b0c0      	sub	sp, #256	@ 0x100
 800474e:	af00      	add	r7, sp, #0
 8004750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	ea40 0301 	orr.w	r3, r0, r1
 8004770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047a0:	f021 010c 	bic.w	r1, r1, #12
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ae:	430b      	orrs	r3, r1
 80047b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	6999      	ldr	r1, [r3, #24]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	ea40 0301 	orr.w	r3, r0, r1
 80047ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004a14 <UART_SetConfig+0x2cc>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0xa0>
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <UART_SetConfig+0x2d0>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fd42 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 80047ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047f0:	e003      	b.n	80047fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f2:	f7fe fd29 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 80047f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004804:	f040 810c 	bne.w	8004a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	1891      	adds	r1, r2, r2
 8004820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004822:	415b      	adcs	r3, r3
 8004824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800482a:	4621      	mov	r1, r4
 800482c:	eb12 0801 	adds.w	r8, r2, r1
 8004830:	4629      	mov	r1, r5
 8004832:	eb43 0901 	adc.w	r9, r3, r1
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484a:	4690      	mov	r8, r2
 800484c:	4699      	mov	r9, r3
 800484e:	4623      	mov	r3, r4
 8004850:	eb18 0303 	adds.w	r3, r8, r3
 8004854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004858:	462b      	mov	r3, r5
 800485a:	eb49 0303 	adc.w	r3, r9, r3
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800486e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004876:	460b      	mov	r3, r1
 8004878:	18db      	adds	r3, r3, r3
 800487a:	653b      	str	r3, [r7, #80]	@ 0x50
 800487c:	4613      	mov	r3, r2
 800487e:	eb42 0303 	adc.w	r3, r2, r3
 8004882:	657b      	str	r3, [r7, #84]	@ 0x54
 8004884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800488c:	f7fb fcf8 	bl	8000280 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b61      	ldr	r3, [pc, #388]	@ (8004a1c <UART_SetConfig+0x2d4>)
 8004896:	fba3 2302 	umull	r2, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	011c      	lsls	r4, r3, #4
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048b8:	415b      	adcs	r3, r3
 80048ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048c0:	4641      	mov	r1, r8
 80048c2:	eb12 0a01 	adds.w	sl, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0b01 	adc.w	fp, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	4692      	mov	sl, r2
 80048e2:	469b      	mov	fp, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048ee:	464b      	mov	r3, r9
 80048f0:	eb4b 0303 	adc.w	r3, fp, r3
 80048f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800490c:	460b      	mov	r3, r1
 800490e:	18db      	adds	r3, r3, r3
 8004910:	643b      	str	r3, [r7, #64]	@ 0x40
 8004912:	4613      	mov	r3, r2
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
 800491a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800491e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004922:	f7fb fcad 	bl	8000280 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <UART_SetConfig+0x2d4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	@ 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004942:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <UART_SetConfig+0x2d4>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800495c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800496c:	415b      	adcs	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6339      	str	r1, [r7, #48]	@ 0x30
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049de:	f7fb fc4f 	bl	8000280 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <UART_SetConfig+0x2d4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	@ 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3332      	adds	r3, #50	@ 0x32
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <UART_SetConfig+0x2d4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 0207 	and.w	r2, r3, #7
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4422      	add	r2, r4
 8004a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a10:	e106      	b.n	8004c20 <UART_SetConfig+0x4d8>
 8004a12:	bf00      	nop
 8004a14:	40011000 	.word	0x40011000
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	6239      	str	r1, [r7, #32]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1854      	adds	r4, r2, r1
 8004a46:	4649      	mov	r1, r9
 8004a48:	eb43 0501 	adc.w	r5, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a68:	464b      	mov	r3, r9
 8004a6a:	eb45 0303 	adc.w	r3, r5, r3
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a8e:	4629      	mov	r1, r5
 8004a90:	008b      	lsls	r3, r1, #2
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a98:	4621      	mov	r1, r4
 8004a9a:	008a      	lsls	r2, r1, #2
 8004a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aa0:	f7fb fbee 	bl	8000280 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b60      	ldr	r3, [pc, #384]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	61b9      	str	r1, [r7, #24]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b36:	4641      	mov	r1, r8
 8004b38:	008a      	lsls	r2, r1, #2
 8004b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b3e:	f7fb fb9f 	bl	8000280 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	4b38      	ldr	r3, [pc, #224]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2264      	movs	r2, #100	@ 0x64
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	1acb      	subs	r3, r1, r3
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	3332      	adds	r3, #50	@ 0x32
 8004b5c:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bba:	464b      	mov	r3, r9
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	eb42 0303 	adc.w	r3, r2, r3
 8004bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bdc:	4649      	mov	r1, r9
 8004bde:	008b      	lsls	r3, r1, #2
 8004be0:	4641      	mov	r1, r8
 8004be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be6:	4641      	mov	r1, r8
 8004be8:	008a      	lsls	r2, r1, #2
 8004bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bee:	f7fb fb47 	bl	8000280 <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2164      	movs	r1, #100	@ 0x64
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	@ 0x32
 8004c0a:	4a08      	ldr	r2, [pc, #32]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4422      	add	r2, r4
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2c:	51eb851f 	.word	0x51eb851f

08004c30 <siprintf>:
 8004c30:	b40e      	push	{r1, r2, r3}
 8004c32:	b500      	push	{lr}
 8004c34:	b09c      	sub	sp, #112	@ 0x70
 8004c36:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c38:	9002      	str	r0, [sp, #8]
 8004c3a:	9006      	str	r0, [sp, #24]
 8004c3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c40:	4809      	ldr	r0, [pc, #36]	@ (8004c68 <siprintf+0x38>)
 8004c42:	9107      	str	r1, [sp, #28]
 8004c44:	9104      	str	r1, [sp, #16]
 8004c46:	4909      	ldr	r1, [pc, #36]	@ (8004c6c <siprintf+0x3c>)
 8004c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	a902      	add	r1, sp, #8
 8004c54:	f000 f9c0 	bl	8004fd8 <_svfiprintf_r>
 8004c58:	9b02      	ldr	r3, [sp, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	b01c      	add	sp, #112	@ 0x70
 8004c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c64:	b003      	add	sp, #12
 8004c66:	4770      	bx	lr
 8004c68:	2000003c 	.word	0x2000003c
 8004c6c:	ffff0208 	.word	0xffff0208

08004c70 <siscanf>:
 8004c70:	b40e      	push	{r1, r2, r3}
 8004c72:	b530      	push	{r4, r5, lr}
 8004c74:	b09c      	sub	sp, #112	@ 0x70
 8004c76:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004c78:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004c7c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004c80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004c84:	9002      	str	r0, [sp, #8]
 8004c86:	9006      	str	r0, [sp, #24]
 8004c88:	f7fb faa2 	bl	80001d0 <strlen>
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <siscanf+0x4c>)
 8004c8e:	9003      	str	r0, [sp, #12]
 8004c90:	9007      	str	r0, [sp, #28]
 8004c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c94:	480a      	ldr	r0, [pc, #40]	@ (8004cc0 <siscanf+0x50>)
 8004c96:	9401      	str	r4, [sp, #4]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8004c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ca2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ca6:	462a      	mov	r2, r5
 8004ca8:	4623      	mov	r3, r4
 8004caa:	a902      	add	r1, sp, #8
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f000 fae7 	bl	8005280 <__ssvfiscanf_r>
 8004cb2:	b01c      	add	sp, #112	@ 0x70
 8004cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb8:	b003      	add	sp, #12
 8004cba:	4770      	bx	lr
 8004cbc:	08004cc5 	.word	0x08004cc5
 8004cc0:	2000003c 	.word	0x2000003c

08004cc4 <__seofread>:
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	4770      	bx	lr

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <__errno>:
 8004cd8:	4b01      	ldr	r3, [pc, #4]	@ (8004ce0 <__errno+0x8>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	2000003c 	.word	0x2000003c

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1b64      	subs	r4, r4, r5
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2600      	movs	r6, #0
 8004cf0:	42a6      	cmp	r6, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f001 f8e0 	bl	8005ebc <_init>
 8004cfc:	1b64      	subs	r4, r4, r5
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2600      	movs	r6, #0
 8004d02:	42a6      	cmp	r6, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0c:	4798      	blx	r3
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d16:	4798      	blx	r3
 8004d18:	3601      	adds	r6, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	08006074 	.word	0x08006074
 8004d20:	08006074 	.word	0x08006074
 8004d24:	08006074 	.word	0x08006074
 8004d28:	08006078 	.word	0x08006078

08004d2c <__retarget_lock_acquire_recursive>:
 8004d2c:	4770      	bx	lr

08004d2e <__retarget_lock_release_recursive>:
 8004d2e:	4770      	bx	lr

08004d30 <_free_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d041      	beq.n	8004dbc <_free_r+0x8c>
 8004d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3c:	1f0c      	subs	r4, r1, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfb8      	it	lt
 8004d42:	18e4      	addlt	r4, r4, r3
 8004d44:	f000 f8e0 	bl	8004f08 <__malloc_lock>
 8004d48:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc0 <_free_r+0x90>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	b933      	cbnz	r3, 8004d5c <_free_r+0x2c>
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	6014      	str	r4, [r2, #0]
 8004d52:	4628      	mov	r0, r5
 8004d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d58:	f000 b8dc 	b.w	8004f14 <__malloc_unlock>
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d908      	bls.n	8004d72 <_free_r+0x42>
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	1821      	adds	r1, r4, r0
 8004d64:	428b      	cmp	r3, r1
 8004d66:	bf01      	itttt	eq
 8004d68:	6819      	ldreq	r1, [r3, #0]
 8004d6a:	685b      	ldreq	r3, [r3, #4]
 8004d6c:	1809      	addeq	r1, r1, r0
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	e7ed      	b.n	8004d4e <_free_r+0x1e>
 8004d72:	461a      	mov	r2, r3
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	b10b      	cbz	r3, 8004d7c <_free_r+0x4c>
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d9fa      	bls.n	8004d72 <_free_r+0x42>
 8004d7c:	6811      	ldr	r1, [r2, #0]
 8004d7e:	1850      	adds	r0, r2, r1
 8004d80:	42a0      	cmp	r0, r4
 8004d82:	d10b      	bne.n	8004d9c <_free_r+0x6c>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	4401      	add	r1, r0
 8004d88:	1850      	adds	r0, r2, r1
 8004d8a:	4283      	cmp	r3, r0
 8004d8c:	6011      	str	r1, [r2, #0]
 8004d8e:	d1e0      	bne.n	8004d52 <_free_r+0x22>
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	6053      	str	r3, [r2, #4]
 8004d96:	4408      	add	r0, r1
 8004d98:	6010      	str	r0, [r2, #0]
 8004d9a:	e7da      	b.n	8004d52 <_free_r+0x22>
 8004d9c:	d902      	bls.n	8004da4 <_free_r+0x74>
 8004d9e:	230c      	movs	r3, #12
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	e7d6      	b.n	8004d52 <_free_r+0x22>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	1821      	adds	r1, r4, r0
 8004da8:	428b      	cmp	r3, r1
 8004daa:	bf04      	itt	eq
 8004dac:	6819      	ldreq	r1, [r3, #0]
 8004dae:	685b      	ldreq	r3, [r3, #4]
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	bf04      	itt	eq
 8004db4:	1809      	addeq	r1, r1, r0
 8004db6:	6021      	streq	r1, [r4, #0]
 8004db8:	6054      	str	r4, [r2, #4]
 8004dba:	e7ca      	b.n	8004d52 <_free_r+0x22>
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200003bc 	.word	0x200003bc

08004dc4 <sbrk_aligned>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8004e04 <sbrk_aligned+0x40>)
 8004dc8:	460c      	mov	r4, r1
 8004dca:	6831      	ldr	r1, [r6, #0]
 8004dcc:	4605      	mov	r5, r0
 8004dce:	b911      	cbnz	r1, 8004dd6 <sbrk_aligned+0x12>
 8004dd0:	f000 ff34 	bl	8005c3c <_sbrk_r>
 8004dd4:	6030      	str	r0, [r6, #0]
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f000 ff2f 	bl	8005c3c <_sbrk_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	d103      	bne.n	8004dea <sbrk_aligned+0x26>
 8004de2:	f04f 34ff 	mov.w	r4, #4294967295
 8004de6:	4620      	mov	r0, r4
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	1cc4      	adds	r4, r0, #3
 8004dec:	f024 0403 	bic.w	r4, r4, #3
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d0f8      	beq.n	8004de6 <sbrk_aligned+0x22>
 8004df4:	1a21      	subs	r1, r4, r0
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 ff20 	bl	8005c3c <_sbrk_r>
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d1f2      	bne.n	8004de6 <sbrk_aligned+0x22>
 8004e00:	e7ef      	b.n	8004de2 <sbrk_aligned+0x1e>
 8004e02:	bf00      	nop
 8004e04:	200003b8 	.word	0x200003b8

08004e08 <_malloc_r>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	1ccd      	adds	r5, r1, #3
 8004e0e:	f025 0503 	bic.w	r5, r5, #3
 8004e12:	3508      	adds	r5, #8
 8004e14:	2d0c      	cmp	r5, #12
 8004e16:	bf38      	it	cc
 8004e18:	250c      	movcc	r5, #12
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	db01      	blt.n	8004e24 <_malloc_r+0x1c>
 8004e20:	42a9      	cmp	r1, r5
 8004e22:	d904      	bls.n	8004e2e <_malloc_r+0x26>
 8004e24:	230c      	movs	r3, #12
 8004e26:	6033      	str	r3, [r6, #0]
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f04 <_malloc_r+0xfc>
 8004e32:	f000 f869 	bl	8004f08 <__malloc_lock>
 8004e36:	f8d8 3000 	ldr.w	r3, [r8]
 8004e3a:	461c      	mov	r4, r3
 8004e3c:	bb44      	cbnz	r4, 8004e90 <_malloc_r+0x88>
 8004e3e:	4629      	mov	r1, r5
 8004e40:	4630      	mov	r0, r6
 8004e42:	f7ff ffbf 	bl	8004dc4 <sbrk_aligned>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	4604      	mov	r4, r0
 8004e4a:	d158      	bne.n	8004efe <_malloc_r+0xf6>
 8004e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e50:	4627      	mov	r7, r4
 8004e52:	2f00      	cmp	r7, #0
 8004e54:	d143      	bne.n	8004ede <_malloc_r+0xd6>
 8004e56:	2c00      	cmp	r4, #0
 8004e58:	d04b      	beq.n	8004ef2 <_malloc_r+0xea>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	4630      	mov	r0, r6
 8004e60:	eb04 0903 	add.w	r9, r4, r3
 8004e64:	f000 feea 	bl	8005c3c <_sbrk_r>
 8004e68:	4581      	cmp	r9, r0
 8004e6a:	d142      	bne.n	8004ef2 <_malloc_r+0xea>
 8004e6c:	6821      	ldr	r1, [r4, #0]
 8004e6e:	1a6d      	subs	r5, r5, r1
 8004e70:	4629      	mov	r1, r5
 8004e72:	4630      	mov	r0, r6
 8004e74:	f7ff ffa6 	bl	8004dc4 <sbrk_aligned>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d03a      	beq.n	8004ef2 <_malloc_r+0xea>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	442b      	add	r3, r5
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	f8d8 3000 	ldr.w	r3, [r8]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	bb62      	cbnz	r2, 8004ee4 <_malloc_r+0xdc>
 8004e8a:	f8c8 7000 	str.w	r7, [r8]
 8004e8e:	e00f      	b.n	8004eb0 <_malloc_r+0xa8>
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	1b52      	subs	r2, r2, r5
 8004e94:	d420      	bmi.n	8004ed8 <_malloc_r+0xd0>
 8004e96:	2a0b      	cmp	r2, #11
 8004e98:	d917      	bls.n	8004eca <_malloc_r+0xc2>
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	6025      	str	r5, [r4, #0]
 8004ea0:	bf18      	it	ne
 8004ea2:	6059      	strne	r1, [r3, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	bf08      	it	eq
 8004ea8:	f8c8 1000 	streq.w	r1, [r8]
 8004eac:	5162      	str	r2, [r4, r5]
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f000 f82f 	bl	8004f14 <__malloc_unlock>
 8004eb6:	f104 000b 	add.w	r0, r4, #11
 8004eba:	1d23      	adds	r3, r4, #4
 8004ebc:	f020 0007 	bic.w	r0, r0, #7
 8004ec0:	1ac2      	subs	r2, r0, r3
 8004ec2:	bf1c      	itt	ne
 8004ec4:	1a1b      	subne	r3, r3, r0
 8004ec6:	50a3      	strne	r3, [r4, r2]
 8004ec8:	e7af      	b.n	8004e2a <_malloc_r+0x22>
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	bf0c      	ite	eq
 8004ed0:	f8c8 2000 	streq.w	r2, [r8]
 8004ed4:	605a      	strne	r2, [r3, #4]
 8004ed6:	e7eb      	b.n	8004eb0 <_malloc_r+0xa8>
 8004ed8:	4623      	mov	r3, r4
 8004eda:	6864      	ldr	r4, [r4, #4]
 8004edc:	e7ae      	b.n	8004e3c <_malloc_r+0x34>
 8004ede:	463c      	mov	r4, r7
 8004ee0:	687f      	ldr	r7, [r7, #4]
 8004ee2:	e7b6      	b.n	8004e52 <_malloc_r+0x4a>
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d1fb      	bne.n	8004ee4 <_malloc_r+0xdc>
 8004eec:	2300      	movs	r3, #0
 8004eee:	6053      	str	r3, [r2, #4]
 8004ef0:	e7de      	b.n	8004eb0 <_malloc_r+0xa8>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f000 f80c 	bl	8004f14 <__malloc_unlock>
 8004efc:	e794      	b.n	8004e28 <_malloc_r+0x20>
 8004efe:	6005      	str	r5, [r0, #0]
 8004f00:	e7d6      	b.n	8004eb0 <_malloc_r+0xa8>
 8004f02:	bf00      	nop
 8004f04:	200003bc 	.word	0x200003bc

08004f08 <__malloc_lock>:
 8004f08:	4801      	ldr	r0, [pc, #4]	@ (8004f10 <__malloc_lock+0x8>)
 8004f0a:	f7ff bf0f 	b.w	8004d2c <__retarget_lock_acquire_recursive>
 8004f0e:	bf00      	nop
 8004f10:	200003b4 	.word	0x200003b4

08004f14 <__malloc_unlock>:
 8004f14:	4801      	ldr	r0, [pc, #4]	@ (8004f1c <__malloc_unlock+0x8>)
 8004f16:	f7ff bf0a 	b.w	8004d2e <__retarget_lock_release_recursive>
 8004f1a:	bf00      	nop
 8004f1c:	200003b4 	.word	0x200003b4

08004f20 <__ssputs_r>:
 8004f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	688e      	ldr	r6, [r1, #8]
 8004f26:	461f      	mov	r7, r3
 8004f28:	42be      	cmp	r6, r7
 8004f2a:	680b      	ldr	r3, [r1, #0]
 8004f2c:	4682      	mov	sl, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4690      	mov	r8, r2
 8004f32:	d82d      	bhi.n	8004f90 <__ssputs_r+0x70>
 8004f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f3c:	d026      	beq.n	8004f8c <__ssputs_r+0x6c>
 8004f3e:	6965      	ldr	r5, [r4, #20]
 8004f40:	6909      	ldr	r1, [r1, #16]
 8004f42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f46:	eba3 0901 	sub.w	r9, r3, r1
 8004f4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f4e:	1c7b      	adds	r3, r7, #1
 8004f50:	444b      	add	r3, r9
 8004f52:	106d      	asrs	r5, r5, #1
 8004f54:	429d      	cmp	r5, r3
 8004f56:	bf38      	it	cc
 8004f58:	461d      	movcc	r5, r3
 8004f5a:	0553      	lsls	r3, r2, #21
 8004f5c:	d527      	bpl.n	8004fae <__ssputs_r+0x8e>
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7ff ff52 	bl	8004e08 <_malloc_r>
 8004f64:	4606      	mov	r6, r0
 8004f66:	b360      	cbz	r0, 8004fc2 <__ssputs_r+0xa2>
 8004f68:	6921      	ldr	r1, [r4, #16]
 8004f6a:	464a      	mov	r2, r9
 8004f6c:	f000 fe76 	bl	8005c5c <memcpy>
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7a:	81a3      	strh	r3, [r4, #12]
 8004f7c:	6126      	str	r6, [r4, #16]
 8004f7e:	6165      	str	r5, [r4, #20]
 8004f80:	444e      	add	r6, r9
 8004f82:	eba5 0509 	sub.w	r5, r5, r9
 8004f86:	6026      	str	r6, [r4, #0]
 8004f88:	60a5      	str	r5, [r4, #8]
 8004f8a:	463e      	mov	r6, r7
 8004f8c:	42be      	cmp	r6, r7
 8004f8e:	d900      	bls.n	8004f92 <__ssputs_r+0x72>
 8004f90:	463e      	mov	r6, r7
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	4632      	mov	r2, r6
 8004f96:	4641      	mov	r1, r8
 8004f98:	f000 fe35 	bl	8005c06 <memmove>
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	1b9b      	subs	r3, r3, r6
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4433      	add	r3, r6
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	2000      	movs	r0, #0
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	462a      	mov	r2, r5
 8004fb0:	f000 fe62 	bl	8005c78 <_realloc_r>
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1e0      	bne.n	8004f7c <__ssputs_r+0x5c>
 8004fba:	6921      	ldr	r1, [r4, #16]
 8004fbc:	4650      	mov	r0, sl
 8004fbe:	f7ff feb7 	bl	8004d30 <_free_r>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	f8ca 3000 	str.w	r3, [sl]
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e7e9      	b.n	8004faa <__ssputs_r+0x8a>
	...

08004fd8 <_svfiprintf_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4698      	mov	r8, r3
 8004fde:	898b      	ldrh	r3, [r1, #12]
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	b09d      	sub	sp, #116	@ 0x74
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	d510      	bpl.n	800500e <_svfiprintf_r+0x36>
 8004fec:	690b      	ldr	r3, [r1, #16]
 8004fee:	b973      	cbnz	r3, 800500e <_svfiprintf_r+0x36>
 8004ff0:	2140      	movs	r1, #64	@ 0x40
 8004ff2:	f7ff ff09 	bl	8004e08 <_malloc_r>
 8004ff6:	6028      	str	r0, [r5, #0]
 8004ff8:	6128      	str	r0, [r5, #16]
 8004ffa:	b930      	cbnz	r0, 800500a <_svfiprintf_r+0x32>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	b01d      	add	sp, #116	@ 0x74
 8005006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500a:	2340      	movs	r3, #64	@ 0x40
 800500c:	616b      	str	r3, [r5, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	9309      	str	r3, [sp, #36]	@ 0x24
 8005012:	2320      	movs	r3, #32
 8005014:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005018:	f8cd 800c 	str.w	r8, [sp, #12]
 800501c:	2330      	movs	r3, #48	@ 0x30
 800501e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051bc <_svfiprintf_r+0x1e4>
 8005022:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005026:	f04f 0901 	mov.w	r9, #1
 800502a:	4623      	mov	r3, r4
 800502c:	469a      	mov	sl, r3
 800502e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005032:	b10a      	cbz	r2, 8005038 <_svfiprintf_r+0x60>
 8005034:	2a25      	cmp	r2, #37	@ 0x25
 8005036:	d1f9      	bne.n	800502c <_svfiprintf_r+0x54>
 8005038:	ebba 0b04 	subs.w	fp, sl, r4
 800503c:	d00b      	beq.n	8005056 <_svfiprintf_r+0x7e>
 800503e:	465b      	mov	r3, fp
 8005040:	4622      	mov	r2, r4
 8005042:	4629      	mov	r1, r5
 8005044:	4638      	mov	r0, r7
 8005046:	f7ff ff6b 	bl	8004f20 <__ssputs_r>
 800504a:	3001      	adds	r0, #1
 800504c:	f000 80a7 	beq.w	800519e <_svfiprintf_r+0x1c6>
 8005050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005052:	445a      	add	r2, fp
 8005054:	9209      	str	r2, [sp, #36]	@ 0x24
 8005056:	f89a 3000 	ldrb.w	r3, [sl]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 809f 	beq.w	800519e <_svfiprintf_r+0x1c6>
 8005060:	2300      	movs	r3, #0
 8005062:	f04f 32ff 	mov.w	r2, #4294967295
 8005066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506a:	f10a 0a01 	add.w	sl, sl, #1
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005076:	931a      	str	r3, [sp, #104]	@ 0x68
 8005078:	4654      	mov	r4, sl
 800507a:	2205      	movs	r2, #5
 800507c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005080:	484e      	ldr	r0, [pc, #312]	@ (80051bc <_svfiprintf_r+0x1e4>)
 8005082:	f7fb f8ad 	bl	80001e0 <memchr>
 8005086:	9a04      	ldr	r2, [sp, #16]
 8005088:	b9d8      	cbnz	r0, 80050c2 <_svfiprintf_r+0xea>
 800508a:	06d0      	lsls	r0, r2, #27
 800508c:	bf44      	itt	mi
 800508e:	2320      	movmi	r3, #32
 8005090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005094:	0711      	lsls	r1, r2, #28
 8005096:	bf44      	itt	mi
 8005098:	232b      	movmi	r3, #43	@ 0x2b
 800509a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800509e:	f89a 3000 	ldrb.w	r3, [sl]
 80050a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a4:	d015      	beq.n	80050d2 <_svfiprintf_r+0xfa>
 80050a6:	9a07      	ldr	r2, [sp, #28]
 80050a8:	4654      	mov	r4, sl
 80050aa:	2000      	movs	r0, #0
 80050ac:	f04f 0c0a 	mov.w	ip, #10
 80050b0:	4621      	mov	r1, r4
 80050b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b6:	3b30      	subs	r3, #48	@ 0x30
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d94b      	bls.n	8005154 <_svfiprintf_r+0x17c>
 80050bc:	b1b0      	cbz	r0, 80050ec <_svfiprintf_r+0x114>
 80050be:	9207      	str	r2, [sp, #28]
 80050c0:	e014      	b.n	80050ec <_svfiprintf_r+0x114>
 80050c2:	eba0 0308 	sub.w	r3, r0, r8
 80050c6:	fa09 f303 	lsl.w	r3, r9, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	46a2      	mov	sl, r4
 80050d0:	e7d2      	b.n	8005078 <_svfiprintf_r+0xa0>
 80050d2:	9b03      	ldr	r3, [sp, #12]
 80050d4:	1d19      	adds	r1, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	9103      	str	r1, [sp, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfbb      	ittet	lt
 80050de:	425b      	neglt	r3, r3
 80050e0:	f042 0202 	orrlt.w	r2, r2, #2
 80050e4:	9307      	strge	r3, [sp, #28]
 80050e6:	9307      	strlt	r3, [sp, #28]
 80050e8:	bfb8      	it	lt
 80050ea:	9204      	strlt	r2, [sp, #16]
 80050ec:	7823      	ldrb	r3, [r4, #0]
 80050ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80050f0:	d10a      	bne.n	8005108 <_svfiprintf_r+0x130>
 80050f2:	7863      	ldrb	r3, [r4, #1]
 80050f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f6:	d132      	bne.n	800515e <_svfiprintf_r+0x186>
 80050f8:	9b03      	ldr	r3, [sp, #12]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	9203      	str	r2, [sp, #12]
 8005100:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005104:	3402      	adds	r4, #2
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80051cc <_svfiprintf_r+0x1f4>
 800510c:	7821      	ldrb	r1, [r4, #0]
 800510e:	2203      	movs	r2, #3
 8005110:	4650      	mov	r0, sl
 8005112:	f7fb f865 	bl	80001e0 <memchr>
 8005116:	b138      	cbz	r0, 8005128 <_svfiprintf_r+0x150>
 8005118:	9b04      	ldr	r3, [sp, #16]
 800511a:	eba0 000a 	sub.w	r0, r0, sl
 800511e:	2240      	movs	r2, #64	@ 0x40
 8005120:	4082      	lsls	r2, r0
 8005122:	4313      	orrs	r3, r2
 8005124:	3401      	adds	r4, #1
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	4824      	ldr	r0, [pc, #144]	@ (80051c0 <_svfiprintf_r+0x1e8>)
 800512e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005132:	2206      	movs	r2, #6
 8005134:	f7fb f854 	bl	80001e0 <memchr>
 8005138:	2800      	cmp	r0, #0
 800513a:	d036      	beq.n	80051aa <_svfiprintf_r+0x1d2>
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <_svfiprintf_r+0x1ec>)
 800513e:	bb1b      	cbnz	r3, 8005188 <_svfiprintf_r+0x1b0>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	3307      	adds	r3, #7
 8005144:	f023 0307 	bic.w	r3, r3, #7
 8005148:	3308      	adds	r3, #8
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514e:	4433      	add	r3, r6
 8005150:	9309      	str	r3, [sp, #36]	@ 0x24
 8005152:	e76a      	b.n	800502a <_svfiprintf_r+0x52>
 8005154:	fb0c 3202 	mla	r2, ip, r2, r3
 8005158:	460c      	mov	r4, r1
 800515a:	2001      	movs	r0, #1
 800515c:	e7a8      	b.n	80050b0 <_svfiprintf_r+0xd8>
 800515e:	2300      	movs	r3, #0
 8005160:	3401      	adds	r4, #1
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	4619      	mov	r1, r3
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4620      	mov	r0, r4
 800516c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005170:	3a30      	subs	r2, #48	@ 0x30
 8005172:	2a09      	cmp	r2, #9
 8005174:	d903      	bls.n	800517e <_svfiprintf_r+0x1a6>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0c6      	beq.n	8005108 <_svfiprintf_r+0x130>
 800517a:	9105      	str	r1, [sp, #20]
 800517c:	e7c4      	b.n	8005108 <_svfiprintf_r+0x130>
 800517e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005182:	4604      	mov	r4, r0
 8005184:	2301      	movs	r3, #1
 8005186:	e7f0      	b.n	800516a <_svfiprintf_r+0x192>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	462a      	mov	r2, r5
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <_svfiprintf_r+0x1f0>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4638      	mov	r0, r7
 8005194:	f3af 8000 	nop.w
 8005198:	1c42      	adds	r2, r0, #1
 800519a:	4606      	mov	r6, r0
 800519c:	d1d6      	bne.n	800514c <_svfiprintf_r+0x174>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	065b      	lsls	r3, r3, #25
 80051a2:	f53f af2d 	bmi.w	8005000 <_svfiprintf_r+0x28>
 80051a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a8:	e72c      	b.n	8005004 <_svfiprintf_r+0x2c>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <_svfiprintf_r+0x1f0>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4638      	mov	r0, r7
 80051b6:	f000 fa45 	bl	8005644 <_printf_i>
 80051ba:	e7ed      	b.n	8005198 <_svfiprintf_r+0x1c0>
 80051bc:	08005f1c 	.word	0x08005f1c
 80051c0:	08005f26 	.word	0x08005f26
 80051c4:	00000000 	.word	0x00000000
 80051c8:	08004f21 	.word	0x08004f21
 80051cc:	08005f22 	.word	0x08005f22

080051d0 <_sungetc_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	1c4b      	adds	r3, r1, #1
 80051d4:	4614      	mov	r4, r2
 80051d6:	d103      	bne.n	80051e0 <_sungetc_r+0x10>
 80051d8:	f04f 35ff 	mov.w	r5, #4294967295
 80051dc:	4628      	mov	r0, r5
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	8993      	ldrh	r3, [r2, #12]
 80051e2:	f023 0320 	bic.w	r3, r3, #32
 80051e6:	8193      	strh	r3, [r2, #12]
 80051e8:	6853      	ldr	r3, [r2, #4]
 80051ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051ec:	b2cd      	uxtb	r5, r1
 80051ee:	b18a      	cbz	r2, 8005214 <_sungetc_r+0x44>
 80051f0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80051f2:	429a      	cmp	r2, r3
 80051f4:	dd08      	ble.n	8005208 <_sungetc_r+0x38>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	1e5a      	subs	r2, r3, #1
 80051fa:	6022      	str	r2, [r4, #0]
 80051fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	3301      	adds	r3, #1
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	e7e9      	b.n	80051dc <_sungetc_r+0xc>
 8005208:	4621      	mov	r1, r4
 800520a:	f000 fcc2 	bl	8005b92 <__submore>
 800520e:	2800      	cmp	r0, #0
 8005210:	d0f1      	beq.n	80051f6 <_sungetc_r+0x26>
 8005212:	e7e1      	b.n	80051d8 <_sungetc_r+0x8>
 8005214:	6921      	ldr	r1, [r4, #16]
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	b141      	cbz	r1, 800522c <_sungetc_r+0x5c>
 800521a:	4291      	cmp	r1, r2
 800521c:	d206      	bcs.n	800522c <_sungetc_r+0x5c>
 800521e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005222:	42a9      	cmp	r1, r5
 8005224:	d102      	bne.n	800522c <_sungetc_r+0x5c>
 8005226:	3a01      	subs	r2, #1
 8005228:	6022      	str	r2, [r4, #0]
 800522a:	e7ea      	b.n	8005202 <_sungetc_r+0x32>
 800522c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005234:	6363      	str	r3, [r4, #52]	@ 0x34
 8005236:	2303      	movs	r3, #3
 8005238:	63a3      	str	r3, [r4, #56]	@ 0x38
 800523a:	4623      	mov	r3, r4
 800523c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	2301      	movs	r3, #1
 8005244:	e7de      	b.n	8005204 <_sungetc_r+0x34>

08005246 <__ssrefill_r>:
 8005246:	b510      	push	{r4, lr}
 8005248:	460c      	mov	r4, r1
 800524a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800524c:	b169      	cbz	r1, 800526a <__ssrefill_r+0x24>
 800524e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005252:	4299      	cmp	r1, r3
 8005254:	d001      	beq.n	800525a <__ssrefill_r+0x14>
 8005256:	f7ff fd6b 	bl	8004d30 <_free_r>
 800525a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	2000      	movs	r0, #0
 8005260:	6360      	str	r0, [r4, #52]	@ 0x34
 8005262:	b113      	cbz	r3, 800526a <__ssrefill_r+0x24>
 8005264:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	bd10      	pop	{r4, pc}
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	2300      	movs	r3, #0
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	e7f3      	b.n	8005268 <__ssrefill_r+0x22>

08005280 <__ssvfiscanf_r>:
 8005280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005284:	460c      	mov	r4, r1
 8005286:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800528a:	2100      	movs	r1, #0
 800528c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005290:	49a5      	ldr	r1, [pc, #660]	@ (8005528 <__ssvfiscanf_r+0x2a8>)
 8005292:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005294:	f10d 0804 	add.w	r8, sp, #4
 8005298:	49a4      	ldr	r1, [pc, #656]	@ (800552c <__ssvfiscanf_r+0x2ac>)
 800529a:	4fa5      	ldr	r7, [pc, #660]	@ (8005530 <__ssvfiscanf_r+0x2b0>)
 800529c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80052a0:	4606      	mov	r6, r0
 80052a2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	7813      	ldrb	r3, [r2, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8158 	beq.w	800555e <__ssvfiscanf_r+0x2de>
 80052ae:	5cf9      	ldrb	r1, [r7, r3]
 80052b0:	f011 0108 	ands.w	r1, r1, #8
 80052b4:	f102 0501 	add.w	r5, r2, #1
 80052b8:	d019      	beq.n	80052ee <__ssvfiscanf_r+0x6e>
 80052ba:	6863      	ldr	r3, [r4, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dd0f      	ble.n	80052e0 <__ssvfiscanf_r+0x60>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	5cba      	ldrb	r2, [r7, r2]
 80052c6:	0712      	lsls	r2, r2, #28
 80052c8:	d401      	bmi.n	80052ce <__ssvfiscanf_r+0x4e>
 80052ca:	462a      	mov	r2, r5
 80052cc:	e7eb      	b.n	80052a6 <__ssvfiscanf_r+0x26>
 80052ce:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80052d0:	3201      	adds	r2, #1
 80052d2:	9245      	str	r2, [sp, #276]	@ 0x114
 80052d4:	6862      	ldr	r2, [r4, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	3a01      	subs	r2, #1
 80052da:	6062      	str	r2, [r4, #4]
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	e7ec      	b.n	80052ba <__ssvfiscanf_r+0x3a>
 80052e0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80052e2:	4621      	mov	r1, r4
 80052e4:	4630      	mov	r0, r6
 80052e6:	4798      	blx	r3
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0e9      	beq.n	80052c0 <__ssvfiscanf_r+0x40>
 80052ec:	e7ed      	b.n	80052ca <__ssvfiscanf_r+0x4a>
 80052ee:	2b25      	cmp	r3, #37	@ 0x25
 80052f0:	d012      	beq.n	8005318 <__ssvfiscanf_r+0x98>
 80052f2:	4699      	mov	r9, r3
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f340 8093 	ble.w	8005422 <__ssvfiscanf_r+0x1a2>
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	7813      	ldrb	r3, [r2, #0]
 8005300:	454b      	cmp	r3, r9
 8005302:	f040 812c 	bne.w	800555e <__ssvfiscanf_r+0x2de>
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	3b01      	subs	r3, #1
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800530e:	3201      	adds	r2, #1
 8005310:	3301      	adds	r3, #1
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	9345      	str	r3, [sp, #276]	@ 0x114
 8005316:	e7d8      	b.n	80052ca <__ssvfiscanf_r+0x4a>
 8005318:	9141      	str	r1, [sp, #260]	@ 0x104
 800531a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800531c:	7853      	ldrb	r3, [r2, #1]
 800531e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005320:	bf02      	ittt	eq
 8005322:	2310      	moveq	r3, #16
 8005324:	1c95      	addeq	r5, r2, #2
 8005326:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005328:	220a      	movs	r2, #10
 800532a:	46a9      	mov	r9, r5
 800532c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005330:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005334:	2b09      	cmp	r3, #9
 8005336:	d91e      	bls.n	8005376 <__ssvfiscanf_r+0xf6>
 8005338:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005534 <__ssvfiscanf_r+0x2b4>
 800533c:	2203      	movs	r2, #3
 800533e:	4650      	mov	r0, sl
 8005340:	f7fa ff4e 	bl	80001e0 <memchr>
 8005344:	b138      	cbz	r0, 8005356 <__ssvfiscanf_r+0xd6>
 8005346:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005348:	eba0 000a 	sub.w	r0, r0, sl
 800534c:	2301      	movs	r3, #1
 800534e:	4083      	lsls	r3, r0
 8005350:	4313      	orrs	r3, r2
 8005352:	9341      	str	r3, [sp, #260]	@ 0x104
 8005354:	464d      	mov	r5, r9
 8005356:	f815 3b01 	ldrb.w	r3, [r5], #1
 800535a:	2b78      	cmp	r3, #120	@ 0x78
 800535c:	d806      	bhi.n	800536c <__ssvfiscanf_r+0xec>
 800535e:	2b57      	cmp	r3, #87	@ 0x57
 8005360:	d810      	bhi.n	8005384 <__ssvfiscanf_r+0x104>
 8005362:	2b25      	cmp	r3, #37	@ 0x25
 8005364:	d0c5      	beq.n	80052f2 <__ssvfiscanf_r+0x72>
 8005366:	d857      	bhi.n	8005418 <__ssvfiscanf_r+0x198>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d065      	beq.n	8005438 <__ssvfiscanf_r+0x1b8>
 800536c:	2303      	movs	r3, #3
 800536e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005370:	230a      	movs	r3, #10
 8005372:	9342      	str	r3, [sp, #264]	@ 0x108
 8005374:	e078      	b.n	8005468 <__ssvfiscanf_r+0x1e8>
 8005376:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005378:	fb02 1103 	mla	r1, r2, r3, r1
 800537c:	3930      	subs	r1, #48	@ 0x30
 800537e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005380:	464d      	mov	r5, r9
 8005382:	e7d2      	b.n	800532a <__ssvfiscanf_r+0xaa>
 8005384:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005388:	2a20      	cmp	r2, #32
 800538a:	d8ef      	bhi.n	800536c <__ssvfiscanf_r+0xec>
 800538c:	a101      	add	r1, pc, #4	@ (adr r1, 8005394 <__ssvfiscanf_r+0x114>)
 800538e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005392:	bf00      	nop
 8005394:	08005447 	.word	0x08005447
 8005398:	0800536d 	.word	0x0800536d
 800539c:	0800536d 	.word	0x0800536d
 80053a0:	080054a1 	.word	0x080054a1
 80053a4:	0800536d 	.word	0x0800536d
 80053a8:	0800536d 	.word	0x0800536d
 80053ac:	0800536d 	.word	0x0800536d
 80053b0:	0800536d 	.word	0x0800536d
 80053b4:	0800536d 	.word	0x0800536d
 80053b8:	0800536d 	.word	0x0800536d
 80053bc:	0800536d 	.word	0x0800536d
 80053c0:	080054b7 	.word	0x080054b7
 80053c4:	0800549d 	.word	0x0800549d
 80053c8:	0800541f 	.word	0x0800541f
 80053cc:	0800541f 	.word	0x0800541f
 80053d0:	0800541f 	.word	0x0800541f
 80053d4:	0800536d 	.word	0x0800536d
 80053d8:	08005459 	.word	0x08005459
 80053dc:	0800536d 	.word	0x0800536d
 80053e0:	0800536d 	.word	0x0800536d
 80053e4:	0800536d 	.word	0x0800536d
 80053e8:	0800536d 	.word	0x0800536d
 80053ec:	080054c7 	.word	0x080054c7
 80053f0:	08005461 	.word	0x08005461
 80053f4:	0800543f 	.word	0x0800543f
 80053f8:	0800536d 	.word	0x0800536d
 80053fc:	0800536d 	.word	0x0800536d
 8005400:	080054c3 	.word	0x080054c3
 8005404:	0800536d 	.word	0x0800536d
 8005408:	0800549d 	.word	0x0800549d
 800540c:	0800536d 	.word	0x0800536d
 8005410:	0800536d 	.word	0x0800536d
 8005414:	08005447 	.word	0x08005447
 8005418:	3b45      	subs	r3, #69	@ 0x45
 800541a:	2b02      	cmp	r3, #2
 800541c:	d8a6      	bhi.n	800536c <__ssvfiscanf_r+0xec>
 800541e:	2305      	movs	r3, #5
 8005420:	e021      	b.n	8005466 <__ssvfiscanf_r+0x1e6>
 8005422:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005424:	4621      	mov	r1, r4
 8005426:	4630      	mov	r0, r6
 8005428:	4798      	blx	r3
 800542a:	2800      	cmp	r0, #0
 800542c:	f43f af66 	beq.w	80052fc <__ssvfiscanf_r+0x7c>
 8005430:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005432:	2800      	cmp	r0, #0
 8005434:	f040 808b 	bne.w	800554e <__ssvfiscanf_r+0x2ce>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e08b      	b.n	8005556 <__ssvfiscanf_r+0x2d6>
 800543e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005440:	f042 0220 	orr.w	r2, r2, #32
 8005444:	9241      	str	r2, [sp, #260]	@ 0x104
 8005446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800544c:	9241      	str	r2, [sp, #260]	@ 0x104
 800544e:	2210      	movs	r2, #16
 8005450:	2b6e      	cmp	r3, #110	@ 0x6e
 8005452:	9242      	str	r2, [sp, #264]	@ 0x108
 8005454:	d902      	bls.n	800545c <__ssvfiscanf_r+0x1dc>
 8005456:	e005      	b.n	8005464 <__ssvfiscanf_r+0x1e4>
 8005458:	2300      	movs	r3, #0
 800545a:	9342      	str	r3, [sp, #264]	@ 0x108
 800545c:	2303      	movs	r3, #3
 800545e:	e002      	b.n	8005466 <__ssvfiscanf_r+0x1e6>
 8005460:	2308      	movs	r3, #8
 8005462:	9342      	str	r3, [sp, #264]	@ 0x108
 8005464:	2304      	movs	r3, #4
 8005466:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	dd39      	ble.n	80054e2 <__ssvfiscanf_r+0x262>
 800546e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005470:	0659      	lsls	r1, r3, #25
 8005472:	d404      	bmi.n	800547e <__ssvfiscanf_r+0x1fe>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	5cba      	ldrb	r2, [r7, r2]
 800547a:	0712      	lsls	r2, r2, #28
 800547c:	d438      	bmi.n	80054f0 <__ssvfiscanf_r+0x270>
 800547e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005480:	2b02      	cmp	r3, #2
 8005482:	dc47      	bgt.n	8005514 <__ssvfiscanf_r+0x294>
 8005484:	466b      	mov	r3, sp
 8005486:	4622      	mov	r2, r4
 8005488:	a941      	add	r1, sp, #260	@ 0x104
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f9fa 	bl	8005884 <_scanf_chars>
 8005490:	2801      	cmp	r0, #1
 8005492:	d064      	beq.n	800555e <__ssvfiscanf_r+0x2de>
 8005494:	2802      	cmp	r0, #2
 8005496:	f47f af18 	bne.w	80052ca <__ssvfiscanf_r+0x4a>
 800549a:	e7c9      	b.n	8005430 <__ssvfiscanf_r+0x1b0>
 800549c:	220a      	movs	r2, #10
 800549e:	e7d7      	b.n	8005450 <__ssvfiscanf_r+0x1d0>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4640      	mov	r0, r8
 80054a4:	f000 fb3c 	bl	8005b20 <__sccl>
 80054a8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80054aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ae:	9341      	str	r3, [sp, #260]	@ 0x104
 80054b0:	4605      	mov	r5, r0
 80054b2:	2301      	movs	r3, #1
 80054b4:	e7d7      	b.n	8005466 <__ssvfiscanf_r+0x1e6>
 80054b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80054b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054bc:	9341      	str	r3, [sp, #260]	@ 0x104
 80054be:	2300      	movs	r3, #0
 80054c0:	e7d1      	b.n	8005466 <__ssvfiscanf_r+0x1e6>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e7cf      	b.n	8005466 <__ssvfiscanf_r+0x1e6>
 80054c6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80054c8:	06c3      	lsls	r3, r0, #27
 80054ca:	f53f aefe 	bmi.w	80052ca <__ssvfiscanf_r+0x4a>
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80054d2:	1d19      	adds	r1, r3, #4
 80054d4:	9100      	str	r1, [sp, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	07c0      	lsls	r0, r0, #31
 80054da:	bf4c      	ite	mi
 80054dc:	801a      	strhmi	r2, [r3, #0]
 80054de:	601a      	strpl	r2, [r3, #0]
 80054e0:	e6f3      	b.n	80052ca <__ssvfiscanf_r+0x4a>
 80054e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80054e4:	4621      	mov	r1, r4
 80054e6:	4630      	mov	r0, r6
 80054e8:	4798      	blx	r3
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d0bf      	beq.n	800546e <__ssvfiscanf_r+0x1ee>
 80054ee:	e79f      	b.n	8005430 <__ssvfiscanf_r+0x1b0>
 80054f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80054f2:	3201      	adds	r2, #1
 80054f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	3a01      	subs	r2, #1
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	6062      	str	r2, [r4, #4]
 80054fe:	dd02      	ble.n	8005506 <__ssvfiscanf_r+0x286>
 8005500:	3301      	adds	r3, #1
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	e7b6      	b.n	8005474 <__ssvfiscanf_r+0x1f4>
 8005506:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005508:	4621      	mov	r1, r4
 800550a:	4630      	mov	r0, r6
 800550c:	4798      	blx	r3
 800550e:	2800      	cmp	r0, #0
 8005510:	d0b0      	beq.n	8005474 <__ssvfiscanf_r+0x1f4>
 8005512:	e78d      	b.n	8005430 <__ssvfiscanf_r+0x1b0>
 8005514:	2b04      	cmp	r3, #4
 8005516:	dc0f      	bgt.n	8005538 <__ssvfiscanf_r+0x2b8>
 8005518:	466b      	mov	r3, sp
 800551a:	4622      	mov	r2, r4
 800551c:	a941      	add	r1, sp, #260	@ 0x104
 800551e:	4630      	mov	r0, r6
 8005520:	f000 fa0a 	bl	8005938 <_scanf_i>
 8005524:	e7b4      	b.n	8005490 <__ssvfiscanf_r+0x210>
 8005526:	bf00      	nop
 8005528:	080051d1 	.word	0x080051d1
 800552c:	08005247 	.word	0x08005247
 8005530:	08005f6b 	.word	0x08005f6b
 8005534:	08005f22 	.word	0x08005f22
 8005538:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <__ssvfiscanf_r+0x2e4>)
 800553a:	2b00      	cmp	r3, #0
 800553c:	f43f aec5 	beq.w	80052ca <__ssvfiscanf_r+0x4a>
 8005540:	466b      	mov	r3, sp
 8005542:	4622      	mov	r2, r4
 8005544:	a941      	add	r1, sp, #260	@ 0x104
 8005546:	4630      	mov	r0, r6
 8005548:	f3af 8000 	nop.w
 800554c:	e7a0      	b.n	8005490 <__ssvfiscanf_r+0x210>
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	065b      	lsls	r3, r3, #25
 8005552:	f53f af71 	bmi.w	8005438 <__ssvfiscanf_r+0x1b8>
 8005556:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005560:	e7f9      	b.n	8005556 <__ssvfiscanf_r+0x2d6>
 8005562:	bf00      	nop
 8005564:	00000000 	.word	0x00000000

08005568 <_printf_common>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	4616      	mov	r6, r2
 800556e:	4698      	mov	r8, r3
 8005570:	688a      	ldr	r2, [r1, #8]
 8005572:	690b      	ldr	r3, [r1, #16]
 8005574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005578:	4293      	cmp	r3, r2
 800557a:	bfb8      	it	lt
 800557c:	4613      	movlt	r3, r2
 800557e:	6033      	str	r3, [r6, #0]
 8005580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005584:	4607      	mov	r7, r0
 8005586:	460c      	mov	r4, r1
 8005588:	b10a      	cbz	r2, 800558e <_printf_common+0x26>
 800558a:	3301      	adds	r3, #1
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0699      	lsls	r1, r3, #26
 8005592:	bf42      	ittt	mi
 8005594:	6833      	ldrmi	r3, [r6, #0]
 8005596:	3302      	addmi	r3, #2
 8005598:	6033      	strmi	r3, [r6, #0]
 800559a:	6825      	ldr	r5, [r4, #0]
 800559c:	f015 0506 	ands.w	r5, r5, #6
 80055a0:	d106      	bne.n	80055b0 <_printf_common+0x48>
 80055a2:	f104 0a19 	add.w	sl, r4, #25
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	6832      	ldr	r2, [r6, #0]
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc26      	bgt.n	80055fe <_printf_common+0x96>
 80055b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	3b00      	subs	r3, #0
 80055b8:	bf18      	it	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	0692      	lsls	r2, r2, #26
 80055be:	d42b      	bmi.n	8005618 <_printf_common+0xb0>
 80055c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055c4:	4641      	mov	r1, r8
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c8      	blx	r9
 80055ca:	3001      	adds	r0, #1
 80055cc:	d01e      	beq.n	800560c <_printf_common+0xa4>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	6922      	ldr	r2, [r4, #16]
 80055d2:	f003 0306 	and.w	r3, r3, #6
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	bf02      	ittt	eq
 80055da:	68e5      	ldreq	r5, [r4, #12]
 80055dc:	6833      	ldreq	r3, [r6, #0]
 80055de:	1aed      	subeq	r5, r5, r3
 80055e0:	68a3      	ldr	r3, [r4, #8]
 80055e2:	bf0c      	ite	eq
 80055e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e8:	2500      	movne	r5, #0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bfc4      	itt	gt
 80055ee:	1a9b      	subgt	r3, r3, r2
 80055f0:	18ed      	addgt	r5, r5, r3
 80055f2:	2600      	movs	r6, #0
 80055f4:	341a      	adds	r4, #26
 80055f6:	42b5      	cmp	r5, r6
 80055f8:	d11a      	bne.n	8005630 <_printf_common+0xc8>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e008      	b.n	8005610 <_printf_common+0xa8>
 80055fe:	2301      	movs	r3, #1
 8005600:	4652      	mov	r2, sl
 8005602:	4641      	mov	r1, r8
 8005604:	4638      	mov	r0, r7
 8005606:	47c8      	blx	r9
 8005608:	3001      	adds	r0, #1
 800560a:	d103      	bne.n	8005614 <_printf_common+0xac>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	3501      	adds	r5, #1
 8005616:	e7c6      	b.n	80055a6 <_printf_common+0x3e>
 8005618:	18e1      	adds	r1, r4, r3
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	2030      	movs	r0, #48	@ 0x30
 800561e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005622:	4422      	add	r2, r4
 8005624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800562c:	3302      	adds	r3, #2
 800562e:	e7c7      	b.n	80055c0 <_printf_common+0x58>
 8005630:	2301      	movs	r3, #1
 8005632:	4622      	mov	r2, r4
 8005634:	4641      	mov	r1, r8
 8005636:	4638      	mov	r0, r7
 8005638:	47c8      	blx	r9
 800563a:	3001      	adds	r0, #1
 800563c:	d0e6      	beq.n	800560c <_printf_common+0xa4>
 800563e:	3601      	adds	r6, #1
 8005640:	e7d9      	b.n	80055f6 <_printf_common+0x8e>
	...

08005644 <_printf_i>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	7e0f      	ldrb	r7, [r1, #24]
 800564a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800564c:	2f78      	cmp	r7, #120	@ 0x78
 800564e:	4691      	mov	r9, r2
 8005650:	4680      	mov	r8, r0
 8005652:	460c      	mov	r4, r1
 8005654:	469a      	mov	sl, r3
 8005656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800565a:	d807      	bhi.n	800566c <_printf_i+0x28>
 800565c:	2f62      	cmp	r7, #98	@ 0x62
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x32>
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80d2 	beq.w	800580a <_printf_i+0x1c6>
 8005666:	2f58      	cmp	r7, #88	@ 0x58
 8005668:	f000 80b9 	beq.w	80057de <_printf_i+0x19a>
 800566c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005674:	e03a      	b.n	80056ec <_printf_i+0xa8>
 8005676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800567a:	2b15      	cmp	r3, #21
 800567c:	d8f6      	bhi.n	800566c <_printf_i+0x28>
 800567e:	a101      	add	r1, pc, #4	@ (adr r1, 8005684 <_printf_i+0x40>)
 8005680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056f1 	.word	0x080056f1
 800568c:	0800566d 	.word	0x0800566d
 8005690:	0800566d 	.word	0x0800566d
 8005694:	0800566d 	.word	0x0800566d
 8005698:	0800566d 	.word	0x0800566d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800566d 	.word	0x0800566d
 80056a4:	0800566d 	.word	0x0800566d
 80056a8:	0800566d 	.word	0x0800566d
 80056ac:	0800566d 	.word	0x0800566d
 80056b0:	080057f1 	.word	0x080057f1
 80056b4:	0800571b 	.word	0x0800571b
 80056b8:	080057ab 	.word	0x080057ab
 80056bc:	0800566d 	.word	0x0800566d
 80056c0:	0800566d 	.word	0x0800566d
 80056c4:	08005813 	.word	0x08005813
 80056c8:	0800566d 	.word	0x0800566d
 80056cc:	0800571b 	.word	0x0800571b
 80056d0:	0800566d 	.word	0x0800566d
 80056d4:	0800566d 	.word	0x0800566d
 80056d8:	080057b3 	.word	0x080057b3
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6032      	str	r2, [r6, #0]
 80056e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056ec:	2301      	movs	r3, #1
 80056ee:	e09d      	b.n	800582c <_printf_i+0x1e8>
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	1d19      	adds	r1, r3, #4
 80056f6:	6031      	str	r1, [r6, #0]
 80056f8:	0606      	lsls	r6, r0, #24
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0xbc>
 80056fc:	681d      	ldr	r5, [r3, #0]
 80056fe:	e003      	b.n	8005708 <_printf_i+0xc4>
 8005700:	0645      	lsls	r5, r0, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0xb8>
 8005704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005708:	2d00      	cmp	r5, #0
 800570a:	da03      	bge.n	8005714 <_printf_i+0xd0>
 800570c:	232d      	movs	r3, #45	@ 0x2d
 800570e:	426d      	negs	r5, r5
 8005710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005714:	4859      	ldr	r0, [pc, #356]	@ (800587c <_printf_i+0x238>)
 8005716:	230a      	movs	r3, #10
 8005718:	e011      	b.n	800573e <_printf_i+0xfa>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	0608      	lsls	r0, r1, #24
 8005720:	f853 5b04 	ldr.w	r5, [r3], #4
 8005724:	d402      	bmi.n	800572c <_printf_i+0xe8>
 8005726:	0649      	lsls	r1, r1, #25
 8005728:	bf48      	it	mi
 800572a:	b2ad      	uxthmi	r5, r5
 800572c:	2f6f      	cmp	r7, #111	@ 0x6f
 800572e:	4853      	ldr	r0, [pc, #332]	@ (800587c <_printf_i+0x238>)
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	bf14      	ite	ne
 8005734:	230a      	movne	r3, #10
 8005736:	2308      	moveq	r3, #8
 8005738:	2100      	movs	r1, #0
 800573a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800573e:	6866      	ldr	r6, [r4, #4]
 8005740:	60a6      	str	r6, [r4, #8]
 8005742:	2e00      	cmp	r6, #0
 8005744:	bfa2      	ittt	ge
 8005746:	6821      	ldrge	r1, [r4, #0]
 8005748:	f021 0104 	bicge.w	r1, r1, #4
 800574c:	6021      	strge	r1, [r4, #0]
 800574e:	b90d      	cbnz	r5, 8005754 <_printf_i+0x110>
 8005750:	2e00      	cmp	r6, #0
 8005752:	d04b      	beq.n	80057ec <_printf_i+0x1a8>
 8005754:	4616      	mov	r6, r2
 8005756:	fbb5 f1f3 	udiv	r1, r5, r3
 800575a:	fb03 5711 	mls	r7, r3, r1, r5
 800575e:	5dc7      	ldrb	r7, [r0, r7]
 8005760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005764:	462f      	mov	r7, r5
 8005766:	42bb      	cmp	r3, r7
 8005768:	460d      	mov	r5, r1
 800576a:	d9f4      	bls.n	8005756 <_printf_i+0x112>
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10b      	bne.n	8005788 <_printf_i+0x144>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	07df      	lsls	r7, r3, #31
 8005774:	d508      	bpl.n	8005788 <_printf_i+0x144>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	4299      	cmp	r1, r3
 800577c:	bfde      	ittt	le
 800577e:	2330      	movle	r3, #48	@ 0x30
 8005780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005788:	1b92      	subs	r2, r2, r6
 800578a:	6122      	str	r2, [r4, #16]
 800578c:	f8cd a000 	str.w	sl, [sp]
 8005790:	464b      	mov	r3, r9
 8005792:	aa03      	add	r2, sp, #12
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f7ff fee6 	bl	8005568 <_printf_common>
 800579c:	3001      	adds	r0, #1
 800579e:	d14a      	bne.n	8005836 <_printf_i+0x1f2>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	b004      	add	sp, #16
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	4833      	ldr	r0, [pc, #204]	@ (8005880 <_printf_i+0x23c>)
 80057b4:	2778      	movs	r7, #120	@ 0x78
 80057b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	6831      	ldr	r1, [r6, #0]
 80057be:	061f      	lsls	r7, r3, #24
 80057c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80057c4:	d402      	bmi.n	80057cc <_printf_i+0x188>
 80057c6:	065f      	lsls	r7, r3, #25
 80057c8:	bf48      	it	mi
 80057ca:	b2ad      	uxthmi	r5, r5
 80057cc:	6031      	str	r1, [r6, #0]
 80057ce:	07d9      	lsls	r1, r3, #31
 80057d0:	bf44      	itt	mi
 80057d2:	f043 0320 	orrmi.w	r3, r3, #32
 80057d6:	6023      	strmi	r3, [r4, #0]
 80057d8:	b11d      	cbz	r5, 80057e2 <_printf_i+0x19e>
 80057da:	2310      	movs	r3, #16
 80057dc:	e7ac      	b.n	8005738 <_printf_i+0xf4>
 80057de:	4827      	ldr	r0, [pc, #156]	@ (800587c <_printf_i+0x238>)
 80057e0:	e7e9      	b.n	80057b6 <_printf_i+0x172>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f023 0320 	bic.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	e7f6      	b.n	80057da <_printf_i+0x196>
 80057ec:	4616      	mov	r6, r2
 80057ee:	e7bd      	b.n	800576c <_printf_i+0x128>
 80057f0:	6833      	ldr	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	6961      	ldr	r1, [r4, #20]
 80057f6:	1d18      	adds	r0, r3, #4
 80057f8:	6030      	str	r0, [r6, #0]
 80057fa:	062e      	lsls	r6, r5, #24
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	d501      	bpl.n	8005804 <_printf_i+0x1c0>
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	e002      	b.n	800580a <_printf_i+0x1c6>
 8005804:	0668      	lsls	r0, r5, #25
 8005806:	d5fb      	bpl.n	8005800 <_printf_i+0x1bc>
 8005808:	8019      	strh	r1, [r3, #0]
 800580a:	2300      	movs	r3, #0
 800580c:	6123      	str	r3, [r4, #16]
 800580e:	4616      	mov	r6, r2
 8005810:	e7bc      	b.n	800578c <_printf_i+0x148>
 8005812:	6833      	ldr	r3, [r6, #0]
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	6032      	str	r2, [r6, #0]
 8005818:	681e      	ldr	r6, [r3, #0]
 800581a:	6862      	ldr	r2, [r4, #4]
 800581c:	2100      	movs	r1, #0
 800581e:	4630      	mov	r0, r6
 8005820:	f7fa fcde 	bl	80001e0 <memchr>
 8005824:	b108      	cbz	r0, 800582a <_printf_i+0x1e6>
 8005826:	1b80      	subs	r0, r0, r6
 8005828:	6060      	str	r0, [r4, #4]
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	2300      	movs	r3, #0
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005834:	e7aa      	b.n	800578c <_printf_i+0x148>
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	4632      	mov	r2, r6
 800583a:	4649      	mov	r1, r9
 800583c:	4640      	mov	r0, r8
 800583e:	47d0      	blx	sl
 8005840:	3001      	adds	r0, #1
 8005842:	d0ad      	beq.n	80057a0 <_printf_i+0x15c>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	079b      	lsls	r3, r3, #30
 8005848:	d413      	bmi.n	8005872 <_printf_i+0x22e>
 800584a:	68e0      	ldr	r0, [r4, #12]
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	4298      	cmp	r0, r3
 8005850:	bfb8      	it	lt
 8005852:	4618      	movlt	r0, r3
 8005854:	e7a6      	b.n	80057a4 <_printf_i+0x160>
 8005856:	2301      	movs	r3, #1
 8005858:	4632      	mov	r2, r6
 800585a:	4649      	mov	r1, r9
 800585c:	4640      	mov	r0, r8
 800585e:	47d0      	blx	sl
 8005860:	3001      	adds	r0, #1
 8005862:	d09d      	beq.n	80057a0 <_printf_i+0x15c>
 8005864:	3501      	adds	r5, #1
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	9903      	ldr	r1, [sp, #12]
 800586a:	1a5b      	subs	r3, r3, r1
 800586c:	42ab      	cmp	r3, r5
 800586e:	dcf2      	bgt.n	8005856 <_printf_i+0x212>
 8005870:	e7eb      	b.n	800584a <_printf_i+0x206>
 8005872:	2500      	movs	r5, #0
 8005874:	f104 0619 	add.w	r6, r4, #25
 8005878:	e7f5      	b.n	8005866 <_printf_i+0x222>
 800587a:	bf00      	nop
 800587c:	08005f2d 	.word	0x08005f2d
 8005880:	08005f3e 	.word	0x08005f3e

08005884 <_scanf_chars>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	4615      	mov	r5, r2
 800588a:	688a      	ldr	r2, [r1, #8]
 800588c:	4680      	mov	r8, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b932      	cbnz	r2, 80058a0 <_scanf_chars+0x1c>
 8005892:	698a      	ldr	r2, [r1, #24]
 8005894:	2a00      	cmp	r2, #0
 8005896:	bf14      	ite	ne
 8005898:	f04f 32ff 	movne.w	r2, #4294967295
 800589c:	2201      	moveq	r2, #1
 800589e:	608a      	str	r2, [r1, #8]
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005934 <_scanf_chars+0xb0>
 80058a6:	06d1      	lsls	r1, r2, #27
 80058a8:	bf5f      	itttt	pl
 80058aa:	681a      	ldrpl	r2, [r3, #0]
 80058ac:	1d11      	addpl	r1, r2, #4
 80058ae:	6019      	strpl	r1, [r3, #0]
 80058b0:	6816      	ldrpl	r6, [r2, #0]
 80058b2:	2700      	movs	r7, #0
 80058b4:	69a0      	ldr	r0, [r4, #24]
 80058b6:	b188      	cbz	r0, 80058dc <_scanf_chars+0x58>
 80058b8:	2801      	cmp	r0, #1
 80058ba:	d107      	bne.n	80058cc <_scanf_chars+0x48>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	5c9b      	ldrb	r3, [r3, r2]
 80058c4:	b953      	cbnz	r3, 80058dc <_scanf_chars+0x58>
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	d031      	beq.n	800592e <_scanf_chars+0xaa>
 80058ca:	e022      	b.n	8005912 <_scanf_chars+0x8e>
 80058cc:	2802      	cmp	r0, #2
 80058ce:	d120      	bne.n	8005912 <_scanf_chars+0x8e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80058d8:	071b      	lsls	r3, r3, #28
 80058da:	d41a      	bmi.n	8005912 <_scanf_chars+0x8e>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	06da      	lsls	r2, r3, #27
 80058e0:	bf5e      	ittt	pl
 80058e2:	682b      	ldrpl	r3, [r5, #0]
 80058e4:	781b      	ldrbpl	r3, [r3, #0]
 80058e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80058ea:	682a      	ldr	r2, [r5, #0]
 80058ec:	686b      	ldr	r3, [r5, #4]
 80058ee:	3201      	adds	r2, #1
 80058f0:	602a      	str	r2, [r5, #0]
 80058f2:	68a2      	ldr	r2, [r4, #8]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	3a01      	subs	r2, #1
 80058f8:	606b      	str	r3, [r5, #4]
 80058fa:	3701      	adds	r7, #1
 80058fc:	60a2      	str	r2, [r4, #8]
 80058fe:	b142      	cbz	r2, 8005912 <_scanf_chars+0x8e>
 8005900:	2b00      	cmp	r3, #0
 8005902:	dcd7      	bgt.n	80058b4 <_scanf_chars+0x30>
 8005904:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005908:	4629      	mov	r1, r5
 800590a:	4640      	mov	r0, r8
 800590c:	4798      	blx	r3
 800590e:	2800      	cmp	r0, #0
 8005910:	d0d0      	beq.n	80058b4 <_scanf_chars+0x30>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	f013 0310 	ands.w	r3, r3, #16
 8005918:	d105      	bne.n	8005926 <_scanf_chars+0xa2>
 800591a:	68e2      	ldr	r2, [r4, #12]
 800591c:	3201      	adds	r2, #1
 800591e:	60e2      	str	r2, [r4, #12]
 8005920:	69a2      	ldr	r2, [r4, #24]
 8005922:	b102      	cbz	r2, 8005926 <_scanf_chars+0xa2>
 8005924:	7033      	strb	r3, [r6, #0]
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	443b      	add	r3, r7
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	2000      	movs	r0, #0
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	bf00      	nop
 8005934:	08005f6b 	.word	0x08005f6b

08005938 <_scanf_i>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	4698      	mov	r8, r3
 800593e:	4b74      	ldr	r3, [pc, #464]	@ (8005b10 <_scanf_i+0x1d8>)
 8005940:	460c      	mov	r4, r1
 8005942:	4682      	mov	sl, r0
 8005944:	4616      	mov	r6, r2
 8005946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800594a:	b087      	sub	sp, #28
 800594c:	ab03      	add	r3, sp, #12
 800594e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005952:	4b70      	ldr	r3, [pc, #448]	@ (8005b14 <_scanf_i+0x1dc>)
 8005954:	69a1      	ldr	r1, [r4, #24]
 8005956:	4a70      	ldr	r2, [pc, #448]	@ (8005b18 <_scanf_i+0x1e0>)
 8005958:	2903      	cmp	r1, #3
 800595a:	bf08      	it	eq
 800595c:	461a      	moveq	r2, r3
 800595e:	68a3      	ldr	r3, [r4, #8]
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	1e5a      	subs	r2, r3, #1
 8005964:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005968:	bf88      	it	hi
 800596a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800596e:	4627      	mov	r7, r4
 8005970:	bf82      	ittt	hi
 8005972:	eb03 0905 	addhi.w	r9, r3, r5
 8005976:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800597a:	60a3      	strhi	r3, [r4, #8]
 800597c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005980:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005984:	bf98      	it	ls
 8005986:	f04f 0900 	movls.w	r9, #0
 800598a:	6023      	str	r3, [r4, #0]
 800598c:	463d      	mov	r5, r7
 800598e:	f04f 0b00 	mov.w	fp, #0
 8005992:	6831      	ldr	r1, [r6, #0]
 8005994:	ab03      	add	r3, sp, #12
 8005996:	7809      	ldrb	r1, [r1, #0]
 8005998:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800599c:	2202      	movs	r2, #2
 800599e:	f7fa fc1f 	bl	80001e0 <memchr>
 80059a2:	b328      	cbz	r0, 80059f0 <_scanf_i+0xb8>
 80059a4:	f1bb 0f01 	cmp.w	fp, #1
 80059a8:	d159      	bne.n	8005a5e <_scanf_i+0x126>
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	b92a      	cbnz	r2, 80059ba <_scanf_i+0x82>
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	2108      	movs	r1, #8
 80059b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b6:	6061      	str	r1, [r4, #4]
 80059b8:	6022      	str	r2, [r4, #0]
 80059ba:	6822      	ldr	r2, [r4, #0]
 80059bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80059c0:	6022      	str	r2, [r4, #0]
 80059c2:	68a2      	ldr	r2, [r4, #8]
 80059c4:	1e51      	subs	r1, r2, #1
 80059c6:	60a1      	str	r1, [r4, #8]
 80059c8:	b192      	cbz	r2, 80059f0 <_scanf_i+0xb8>
 80059ca:	6832      	ldr	r2, [r6, #0]
 80059cc:	1c51      	adds	r1, r2, #1
 80059ce:	6031      	str	r1, [r6, #0]
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	f805 2b01 	strb.w	r2, [r5], #1
 80059d6:	6872      	ldr	r2, [r6, #4]
 80059d8:	3a01      	subs	r2, #1
 80059da:	2a00      	cmp	r2, #0
 80059dc:	6072      	str	r2, [r6, #4]
 80059de:	dc07      	bgt.n	80059f0 <_scanf_i+0xb8>
 80059e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80059e4:	4631      	mov	r1, r6
 80059e6:	4650      	mov	r0, sl
 80059e8:	4790      	blx	r2
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f040 8085 	bne.w	8005afa <_scanf_i+0x1c2>
 80059f0:	f10b 0b01 	add.w	fp, fp, #1
 80059f4:	f1bb 0f03 	cmp.w	fp, #3
 80059f8:	d1cb      	bne.n	8005992 <_scanf_i+0x5a>
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	b90b      	cbnz	r3, 8005a02 <_scanf_i+0xca>
 80059fe:	230a      	movs	r3, #10
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	4945      	ldr	r1, [pc, #276]	@ (8005b1c <_scanf_i+0x1e4>)
 8005a06:	6960      	ldr	r0, [r4, #20]
 8005a08:	1ac9      	subs	r1, r1, r3
 8005a0a:	f000 f889 	bl	8005b20 <__sccl>
 8005a0e:	f04f 0b00 	mov.w	fp, #0
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d03d      	beq.n	8005a96 <_scanf_i+0x15e>
 8005a1a:	6831      	ldr	r1, [r6, #0]
 8005a1c:	6960      	ldr	r0, [r4, #20]
 8005a1e:	f891 c000 	ldrb.w	ip, [r1]
 8005a22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d035      	beq.n	8005a96 <_scanf_i+0x15e>
 8005a2a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005a2e:	d124      	bne.n	8005a7a <_scanf_i+0x142>
 8005a30:	0510      	lsls	r0, r2, #20
 8005a32:	d522      	bpl.n	8005a7a <_scanf_i+0x142>
 8005a34:	f10b 0b01 	add.w	fp, fp, #1
 8005a38:	f1b9 0f00 	cmp.w	r9, #0
 8005a3c:	d003      	beq.n	8005a46 <_scanf_i+0x10e>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	6873      	ldr	r3, [r6, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	6073      	str	r3, [r6, #4]
 8005a4e:	dd1b      	ble.n	8005a88 <_scanf_i+0x150>
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	6033      	str	r3, [r6, #0]
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	e7d9      	b.n	8005a12 <_scanf_i+0xda>
 8005a5e:	f1bb 0f02 	cmp.w	fp, #2
 8005a62:	d1ae      	bne.n	80059c2 <_scanf_i+0x8a>
 8005a64:	6822      	ldr	r2, [r4, #0]
 8005a66:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005a6a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005a6e:	d1bf      	bne.n	80059f0 <_scanf_i+0xb8>
 8005a70:	2110      	movs	r1, #16
 8005a72:	6061      	str	r1, [r4, #4]
 8005a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a78:	e7a2      	b.n	80059c0 <_scanf_i+0x88>
 8005a7a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005a7e:	6022      	str	r2, [r4, #0]
 8005a80:	780b      	ldrb	r3, [r1, #0]
 8005a82:	f805 3b01 	strb.w	r3, [r5], #1
 8005a86:	e7de      	b.n	8005a46 <_scanf_i+0x10e>
 8005a88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4650      	mov	r0, sl
 8005a90:	4798      	blx	r3
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0df      	beq.n	8005a56 <_scanf_i+0x11e>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	05d9      	lsls	r1, r3, #23
 8005a9a:	d50d      	bpl.n	8005ab8 <_scanf_i+0x180>
 8005a9c:	42bd      	cmp	r5, r7
 8005a9e:	d909      	bls.n	8005ab4 <_scanf_i+0x17c>
 8005aa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4650      	mov	r0, sl
 8005aac:	4798      	blx	r3
 8005aae:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ab2:	464d      	mov	r5, r9
 8005ab4:	42bd      	cmp	r5, r7
 8005ab6:	d028      	beq.n	8005b0a <_scanf_i+0x1d2>
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	f012 0210 	ands.w	r2, r2, #16
 8005abe:	d113      	bne.n	8005ae8 <_scanf_i+0x1b0>
 8005ac0:	702a      	strb	r2, [r5, #0]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	9e01      	ldr	r6, [sp, #4]
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4650      	mov	r0, sl
 8005aca:	47b0      	blx	r6
 8005acc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad0:	6821      	ldr	r1, [r4, #0]
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	f8c8 2000 	str.w	r2, [r8]
 8005ad8:	f011 0f20 	tst.w	r1, #32
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	d00f      	beq.n	8005b00 <_scanf_i+0x1c8>
 8005ae0:	6018      	str	r0, [r3, #0]
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60e3      	str	r3, [r4, #12]
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	1bed      	subs	r5, r5, r7
 8005aec:	445d      	add	r5, fp
 8005aee:	442b      	add	r3, r5
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	2000      	movs	r0, #0
 8005af4:	b007      	add	sp, #28
 8005af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afa:	f04f 0b00 	mov.w	fp, #0
 8005afe:	e7ca      	b.n	8005a96 <_scanf_i+0x15e>
 8005b00:	07ca      	lsls	r2, r1, #31
 8005b02:	bf4c      	ite	mi
 8005b04:	8018      	strhmi	r0, [r3, #0]
 8005b06:	6018      	strpl	r0, [r3, #0]
 8005b08:	e7eb      	b.n	8005ae2 <_scanf_i+0x1aa>
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e7f2      	b.n	8005af4 <_scanf_i+0x1bc>
 8005b0e:	bf00      	nop
 8005b10:	08005ef8 	.word	0x08005ef8
 8005b14:	08005dc9 	.word	0x08005dc9
 8005b18:	08005ea9 	.word	0x08005ea9
 8005b1c:	08005f5f 	.word	0x08005f5f

08005b20 <__sccl>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	780b      	ldrb	r3, [r1, #0]
 8005b24:	4604      	mov	r4, r0
 8005b26:	2b5e      	cmp	r3, #94	@ 0x5e
 8005b28:	bf0b      	itete	eq
 8005b2a:	784b      	ldrbeq	r3, [r1, #1]
 8005b2c:	1c4a      	addne	r2, r1, #1
 8005b2e:	1c8a      	addeq	r2, r1, #2
 8005b30:	2100      	movne	r1, #0
 8005b32:	bf08      	it	eq
 8005b34:	2101      	moveq	r1, #1
 8005b36:	3801      	subs	r0, #1
 8005b38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005b3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005b40:	42a8      	cmp	r0, r5
 8005b42:	d1fb      	bne.n	8005b3c <__sccl+0x1c>
 8005b44:	b90b      	cbnz	r3, 8005b4a <__sccl+0x2a>
 8005b46:	1e50      	subs	r0, r2, #1
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	f081 0101 	eor.w	r1, r1, #1
 8005b4e:	54e1      	strb	r1, [r4, r3]
 8005b50:	4610      	mov	r0, r2
 8005b52:	4602      	mov	r2, r0
 8005b54:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b58:	2d2d      	cmp	r5, #45	@ 0x2d
 8005b5a:	d005      	beq.n	8005b68 <__sccl+0x48>
 8005b5c:	2d5d      	cmp	r5, #93	@ 0x5d
 8005b5e:	d016      	beq.n	8005b8e <__sccl+0x6e>
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	d0f1      	beq.n	8005b48 <__sccl+0x28>
 8005b64:	462b      	mov	r3, r5
 8005b66:	e7f2      	b.n	8005b4e <__sccl+0x2e>
 8005b68:	7846      	ldrb	r6, [r0, #1]
 8005b6a:	2e5d      	cmp	r6, #93	@ 0x5d
 8005b6c:	d0fa      	beq.n	8005b64 <__sccl+0x44>
 8005b6e:	42b3      	cmp	r3, r6
 8005b70:	dcf8      	bgt.n	8005b64 <__sccl+0x44>
 8005b72:	3002      	adds	r0, #2
 8005b74:	461a      	mov	r2, r3
 8005b76:	3201      	adds	r2, #1
 8005b78:	4296      	cmp	r6, r2
 8005b7a:	54a1      	strb	r1, [r4, r2]
 8005b7c:	dcfb      	bgt.n	8005b76 <__sccl+0x56>
 8005b7e:	1af2      	subs	r2, r6, r3
 8005b80:	3a01      	subs	r2, #1
 8005b82:	1c5d      	adds	r5, r3, #1
 8005b84:	42b3      	cmp	r3, r6
 8005b86:	bfa8      	it	ge
 8005b88:	2200      	movge	r2, #0
 8005b8a:	18ab      	adds	r3, r5, r2
 8005b8c:	e7e1      	b.n	8005b52 <__sccl+0x32>
 8005b8e:	4610      	mov	r0, r2
 8005b90:	e7da      	b.n	8005b48 <__sccl+0x28>

08005b92 <__submore>:
 8005b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	d11d      	bne.n	8005bde <__submore+0x4c>
 8005ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ba6:	f7ff f92f 	bl	8004e08 <_malloc_r>
 8005baa:	b918      	cbnz	r0, 8005bb4 <__submore+0x22>
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005bba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005bbe:	6360      	str	r0, [r4, #52]	@ 0x34
 8005bc0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005bc4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005bc8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005bcc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005bd0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005bd4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005bd8:	6020      	str	r0, [r4, #0]
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e7e8      	b.n	8005bb0 <__submore+0x1e>
 8005bde:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005be0:	0077      	lsls	r7, r6, #1
 8005be2:	463a      	mov	r2, r7
 8005be4:	f000 f848 	bl	8005c78 <_realloc_r>
 8005be8:	4605      	mov	r5, r0
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d0de      	beq.n	8005bac <__submore+0x1a>
 8005bee:	eb00 0806 	add.w	r8, r0, r6
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f000 f830 	bl	8005c5c <memcpy>
 8005bfc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005c00:	f8c4 8000 	str.w	r8, [r4]
 8005c04:	e7e9      	b.n	8005bda <__submore+0x48>

08005c06 <memmove>:
 8005c06:	4288      	cmp	r0, r1
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	eb01 0402 	add.w	r4, r1, r2
 8005c0e:	d902      	bls.n	8005c16 <memmove+0x10>
 8005c10:	4284      	cmp	r4, r0
 8005c12:	4623      	mov	r3, r4
 8005c14:	d807      	bhi.n	8005c26 <memmove+0x20>
 8005c16:	1e43      	subs	r3, r0, #1
 8005c18:	42a1      	cmp	r1, r4
 8005c1a:	d008      	beq.n	8005c2e <memmove+0x28>
 8005c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c24:	e7f8      	b.n	8005c18 <memmove+0x12>
 8005c26:	4402      	add	r2, r0
 8005c28:	4601      	mov	r1, r0
 8005c2a:	428a      	cmp	r2, r1
 8005c2c:	d100      	bne.n	8005c30 <memmove+0x2a>
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c38:	e7f7      	b.n	8005c2a <memmove+0x24>
	...

08005c3c <_sbrk_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d06      	ldr	r5, [pc, #24]	@ (8005c58 <_sbrk_r+0x1c>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	f7fc f88e 	bl	8001d68 <_sbrk>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_sbrk_r+0x1a>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_sbrk_r+0x1a>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200003b0 	.word	0x200003b0

08005c5c <memcpy>:
 8005c5c:	440a      	add	r2, r1
 8005c5e:	4291      	cmp	r1, r2
 8005c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c64:	d100      	bne.n	8005c68 <memcpy+0xc>
 8005c66:	4770      	bx	lr
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c72:	4291      	cmp	r1, r2
 8005c74:	d1f9      	bne.n	8005c6a <memcpy+0xe>
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <_realloc_r>:
 8005c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4615      	mov	r5, r2
 8005c80:	460c      	mov	r4, r1
 8005c82:	b921      	cbnz	r1, 8005c8e <_realloc_r+0x16>
 8005c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	4611      	mov	r1, r2
 8005c8a:	f7ff b8bd 	b.w	8004e08 <_malloc_r>
 8005c8e:	b92a      	cbnz	r2, 8005c9c <_realloc_r+0x24>
 8005c90:	f7ff f84e 	bl	8004d30 <_free_r>
 8005c94:	2400      	movs	r4, #0
 8005c96:	4620      	mov	r0, r4
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	f000 f906 	bl	8005eac <_malloc_usable_size_r>
 8005ca0:	4285      	cmp	r5, r0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	d802      	bhi.n	8005cac <_realloc_r+0x34>
 8005ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005caa:	d8f4      	bhi.n	8005c96 <_realloc_r+0x1e>
 8005cac:	4629      	mov	r1, r5
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff f8aa 	bl	8004e08 <_malloc_r>
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d0ec      	beq.n	8005c94 <_realloc_r+0x1c>
 8005cba:	42b5      	cmp	r5, r6
 8005cbc:	462a      	mov	r2, r5
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	bf28      	it	cs
 8005cc2:	4632      	movcs	r2, r6
 8005cc4:	f7ff ffca 	bl	8005c5c <memcpy>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7ff f830 	bl	8004d30 <_free_r>
 8005cd0:	463c      	mov	r4, r7
 8005cd2:	e7e0      	b.n	8005c96 <_realloc_r+0x1e>

08005cd4 <_strtol_l.constprop.0>:
 8005cd4:	2b24      	cmp	r3, #36	@ 0x24
 8005cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cda:	4686      	mov	lr, r0
 8005cdc:	4690      	mov	r8, r2
 8005cde:	d801      	bhi.n	8005ce4 <_strtol_l.constprop.0+0x10>
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d106      	bne.n	8005cf2 <_strtol_l.constprop.0+0x1e>
 8005ce4:	f7fe fff8 	bl	8004cd8 <__errno>
 8005ce8:	2316      	movs	r3, #22
 8005cea:	6003      	str	r3, [r0, #0]
 8005cec:	2000      	movs	r0, #0
 8005cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf2:	4834      	ldr	r0, [pc, #208]	@ (8005dc4 <_strtol_l.constprop.0+0xf0>)
 8005cf4:	460d      	mov	r5, r1
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfc:	5d06      	ldrb	r6, [r0, r4]
 8005cfe:	f016 0608 	ands.w	r6, r6, #8
 8005d02:	d1f8      	bne.n	8005cf6 <_strtol_l.constprop.0+0x22>
 8005d04:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d06:	d12d      	bne.n	8005d64 <_strtol_l.constprop.0+0x90>
 8005d08:	782c      	ldrb	r4, [r5, #0]
 8005d0a:	2601      	movs	r6, #1
 8005d0c:	1c95      	adds	r5, r2, #2
 8005d0e:	f033 0210 	bics.w	r2, r3, #16
 8005d12:	d109      	bne.n	8005d28 <_strtol_l.constprop.0+0x54>
 8005d14:	2c30      	cmp	r4, #48	@ 0x30
 8005d16:	d12a      	bne.n	8005d6e <_strtol_l.constprop.0+0x9a>
 8005d18:	782a      	ldrb	r2, [r5, #0]
 8005d1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d1e:	2a58      	cmp	r2, #88	@ 0x58
 8005d20:	d125      	bne.n	8005d6e <_strtol_l.constprop.0+0x9a>
 8005d22:	786c      	ldrb	r4, [r5, #1]
 8005d24:	2310      	movs	r3, #16
 8005d26:	3502      	adds	r5, #2
 8005d28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005d2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d30:	2200      	movs	r2, #0
 8005d32:	fbbc f9f3 	udiv	r9, ip, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005d40:	2f09      	cmp	r7, #9
 8005d42:	d81b      	bhi.n	8005d7c <_strtol_l.constprop.0+0xa8>
 8005d44:	463c      	mov	r4, r7
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	dd27      	ble.n	8005d9a <_strtol_l.constprop.0+0xc6>
 8005d4a:	1c57      	adds	r7, r2, #1
 8005d4c:	d007      	beq.n	8005d5e <_strtol_l.constprop.0+0x8a>
 8005d4e:	4581      	cmp	r9, r0
 8005d50:	d320      	bcc.n	8005d94 <_strtol_l.constprop.0+0xc0>
 8005d52:	d101      	bne.n	8005d58 <_strtol_l.constprop.0+0x84>
 8005d54:	45a2      	cmp	sl, r4
 8005d56:	db1d      	blt.n	8005d94 <_strtol_l.constprop.0+0xc0>
 8005d58:	fb00 4003 	mla	r0, r0, r3, r4
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d62:	e7eb      	b.n	8005d3c <_strtol_l.constprop.0+0x68>
 8005d64:	2c2b      	cmp	r4, #43	@ 0x2b
 8005d66:	bf04      	itt	eq
 8005d68:	782c      	ldrbeq	r4, [r5, #0]
 8005d6a:	1c95      	addeq	r5, r2, #2
 8005d6c:	e7cf      	b.n	8005d0e <_strtol_l.constprop.0+0x3a>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1da      	bne.n	8005d28 <_strtol_l.constprop.0+0x54>
 8005d72:	2c30      	cmp	r4, #48	@ 0x30
 8005d74:	bf0c      	ite	eq
 8005d76:	2308      	moveq	r3, #8
 8005d78:	230a      	movne	r3, #10
 8005d7a:	e7d5      	b.n	8005d28 <_strtol_l.constprop.0+0x54>
 8005d7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d80:	2f19      	cmp	r7, #25
 8005d82:	d801      	bhi.n	8005d88 <_strtol_l.constprop.0+0xb4>
 8005d84:	3c37      	subs	r4, #55	@ 0x37
 8005d86:	e7de      	b.n	8005d46 <_strtol_l.constprop.0+0x72>
 8005d88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d8c:	2f19      	cmp	r7, #25
 8005d8e:	d804      	bhi.n	8005d9a <_strtol_l.constprop.0+0xc6>
 8005d90:	3c57      	subs	r4, #87	@ 0x57
 8005d92:	e7d8      	b.n	8005d46 <_strtol_l.constprop.0+0x72>
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	e7e1      	b.n	8005d5e <_strtol_l.constprop.0+0x8a>
 8005d9a:	1c53      	adds	r3, r2, #1
 8005d9c:	d108      	bne.n	8005db0 <_strtol_l.constprop.0+0xdc>
 8005d9e:	2322      	movs	r3, #34	@ 0x22
 8005da0:	f8ce 3000 	str.w	r3, [lr]
 8005da4:	4660      	mov	r0, ip
 8005da6:	f1b8 0f00 	cmp.w	r8, #0
 8005daa:	d0a0      	beq.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005dac:	1e69      	subs	r1, r5, #1
 8005dae:	e006      	b.n	8005dbe <_strtol_l.constprop.0+0xea>
 8005db0:	b106      	cbz	r6, 8005db4 <_strtol_l.constprop.0+0xe0>
 8005db2:	4240      	negs	r0, r0
 8005db4:	f1b8 0f00 	cmp.w	r8, #0
 8005db8:	d099      	beq.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	d1f6      	bne.n	8005dac <_strtol_l.constprop.0+0xd8>
 8005dbe:	f8c8 1000 	str.w	r1, [r8]
 8005dc2:	e794      	b.n	8005cee <_strtol_l.constprop.0+0x1a>
 8005dc4:	08005f6b 	.word	0x08005f6b

08005dc8 <_strtol_r>:
 8005dc8:	f7ff bf84 	b.w	8005cd4 <_strtol_l.constprop.0>

08005dcc <_strtoul_l.constprop.0>:
 8005dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dd0:	4e34      	ldr	r6, [pc, #208]	@ (8005ea4 <_strtoul_l.constprop.0+0xd8>)
 8005dd2:	4686      	mov	lr, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ddc:	5d37      	ldrb	r7, [r6, r4]
 8005dde:	f017 0708 	ands.w	r7, r7, #8
 8005de2:	d1f8      	bne.n	8005dd6 <_strtoul_l.constprop.0+0xa>
 8005de4:	2c2d      	cmp	r4, #45	@ 0x2d
 8005de6:	d12f      	bne.n	8005e48 <_strtoul_l.constprop.0+0x7c>
 8005de8:	782c      	ldrb	r4, [r5, #0]
 8005dea:	2701      	movs	r7, #1
 8005dec:	1c85      	adds	r5, r0, #2
 8005dee:	f033 0010 	bics.w	r0, r3, #16
 8005df2:	d109      	bne.n	8005e08 <_strtoul_l.constprop.0+0x3c>
 8005df4:	2c30      	cmp	r4, #48	@ 0x30
 8005df6:	d12c      	bne.n	8005e52 <_strtoul_l.constprop.0+0x86>
 8005df8:	7828      	ldrb	r0, [r5, #0]
 8005dfa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005dfe:	2858      	cmp	r0, #88	@ 0x58
 8005e00:	d127      	bne.n	8005e52 <_strtoul_l.constprop.0+0x86>
 8005e02:	786c      	ldrb	r4, [r5, #1]
 8005e04:	2310      	movs	r3, #16
 8005e06:	3502      	adds	r5, #2
 8005e08:	f04f 38ff 	mov.w	r8, #4294967295
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8005e12:	fb03 f908 	mul.w	r9, r3, r8
 8005e16:	ea6f 0909 	mvn.w	r9, r9
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005e20:	f1bc 0f09 	cmp.w	ip, #9
 8005e24:	d81c      	bhi.n	8005e60 <_strtoul_l.constprop.0+0x94>
 8005e26:	4664      	mov	r4, ip
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	dd2a      	ble.n	8005e82 <_strtoul_l.constprop.0+0xb6>
 8005e2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005e30:	d007      	beq.n	8005e42 <_strtoul_l.constprop.0+0x76>
 8005e32:	4580      	cmp	r8, r0
 8005e34:	d322      	bcc.n	8005e7c <_strtoul_l.constprop.0+0xb0>
 8005e36:	d101      	bne.n	8005e3c <_strtoul_l.constprop.0+0x70>
 8005e38:	45a1      	cmp	r9, r4
 8005e3a:	db1f      	blt.n	8005e7c <_strtoul_l.constprop.0+0xb0>
 8005e3c:	fb00 4003 	mla	r0, r0, r3, r4
 8005e40:	2601      	movs	r6, #1
 8005e42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e46:	e7e9      	b.n	8005e1c <_strtoul_l.constprop.0+0x50>
 8005e48:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e4a:	bf04      	itt	eq
 8005e4c:	782c      	ldrbeq	r4, [r5, #0]
 8005e4e:	1c85      	addeq	r5, r0, #2
 8005e50:	e7cd      	b.n	8005dee <_strtoul_l.constprop.0+0x22>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1d8      	bne.n	8005e08 <_strtoul_l.constprop.0+0x3c>
 8005e56:	2c30      	cmp	r4, #48	@ 0x30
 8005e58:	bf0c      	ite	eq
 8005e5a:	2308      	moveq	r3, #8
 8005e5c:	230a      	movne	r3, #10
 8005e5e:	e7d3      	b.n	8005e08 <_strtoul_l.constprop.0+0x3c>
 8005e60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005e64:	f1bc 0f19 	cmp.w	ip, #25
 8005e68:	d801      	bhi.n	8005e6e <_strtoul_l.constprop.0+0xa2>
 8005e6a:	3c37      	subs	r4, #55	@ 0x37
 8005e6c:	e7dc      	b.n	8005e28 <_strtoul_l.constprop.0+0x5c>
 8005e6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005e72:	f1bc 0f19 	cmp.w	ip, #25
 8005e76:	d804      	bhi.n	8005e82 <_strtoul_l.constprop.0+0xb6>
 8005e78:	3c57      	subs	r4, #87	@ 0x57
 8005e7a:	e7d5      	b.n	8005e28 <_strtoul_l.constprop.0+0x5c>
 8005e7c:	f04f 36ff 	mov.w	r6, #4294967295
 8005e80:	e7df      	b.n	8005e42 <_strtoul_l.constprop.0+0x76>
 8005e82:	1c73      	adds	r3, r6, #1
 8005e84:	d106      	bne.n	8005e94 <_strtoul_l.constprop.0+0xc8>
 8005e86:	2322      	movs	r3, #34	@ 0x22
 8005e88:	f8ce 3000 	str.w	r3, [lr]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	b932      	cbnz	r2, 8005e9e <_strtoul_l.constprop.0+0xd2>
 8005e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e94:	b107      	cbz	r7, 8005e98 <_strtoul_l.constprop.0+0xcc>
 8005e96:	4240      	negs	r0, r0
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d0f9      	beq.n	8005e90 <_strtoul_l.constprop.0+0xc4>
 8005e9c:	b106      	cbz	r6, 8005ea0 <_strtoul_l.constprop.0+0xd4>
 8005e9e:	1e69      	subs	r1, r5, #1
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	e7f5      	b.n	8005e90 <_strtoul_l.constprop.0+0xc4>
 8005ea4:	08005f6b 	.word	0x08005f6b

08005ea8 <_strtoul_r>:
 8005ea8:	f7ff bf90 	b.w	8005dcc <_strtoul_l.constprop.0>

08005eac <_malloc_usable_size_r>:
 8005eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb0:	1f18      	subs	r0, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bfbc      	itt	lt
 8005eb6:	580b      	ldrlt	r3, [r1, r0]
 8005eb8:	18c0      	addlt	r0, r0, r3
 8005eba:	4770      	bx	lr

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
