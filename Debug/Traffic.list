
Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d4c  08005d4c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08005eec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000708c  2**0
                  CONTENTS
 10 .bss          00000334  2000008c  2000008c  0000708c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000708c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eec4  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026bb  00000000  00000000  00015f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00018640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  00019470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022891  00000000  00000000  00019f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001306a  00000000  00000000  0003c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc0ea  00000000  00000000  0004f85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b944  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004160  00000000  00000000  0011b988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d34 	.word	0x08005d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08005d34 	.word	0x08005d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <fsm_automatic>:



int t_road_1 = 0, t_road_2 = 0;

void fsm_automatic() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	switch (status) {
 8000574:	4b5f      	ldr	r3, [pc, #380]	@ (80006f4 <fsm_automatic+0x184>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	2b05      	cmp	r3, #5
 800057c:	f200 80af 	bhi.w	80006de <fsm_automatic+0x16e>
 8000580:	a201      	add	r2, pc, #4	@ (adr r2, 8000588 <fsm_automatic+0x18>)
 8000582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000586:	bf00      	nop
 8000588:	080005a1 	.word	0x080005a1
 800058c:	080005a9 	.word	0x080005a9
 8000590:	080005cd 	.word	0x080005cd
 8000594:	0800060f 	.word	0x0800060f
 8000598:	08000657 	.word	0x08000657
 800059c:	08000697 	.word	0x08000697
		case INIT:
			//TODO: wake MCU up by PC
			status = MODE1;
 80005a0:	4b54      	ldr	r3, [pc, #336]	@ (80006f4 <fsm_automatic+0x184>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			break;
 80005a6:	e0a3      	b.n	80006f0 <fsm_automatic+0x180>
		case MODE1:
			led_config();
 80005a8:	f000 f95a 	bl	8000860 <led_config>
			t_road_1 = T_RED;
 80005ac:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <fsm_automatic+0x188>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a52      	ldr	r2, [pc, #328]	@ (80006fc <fsm_automatic+0x18c>)
 80005b2:	6013      	str	r3, [r2, #0]
			t_road_2 = T_GREEN;
 80005b4:	4b52      	ldr	r3, [pc, #328]	@ (8000700 <fsm_automatic+0x190>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a52      	ldr	r2, [pc, #328]	@ (8000704 <fsm_automatic+0x194>)
 80005ba:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c0:	f001 fc30 	bl	8001e24 <setTimer4>
			status = RED_GREEN;
 80005c4:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <fsm_automatic+0x184>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
			break;
 80005ca:	e091      	b.n	80006f0 <fsm_automatic+0x180>
		case RED_GREEN:
			led_config();
 80005cc:	f000 f948 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 80005d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000708 <fsm_automatic+0x198>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	f040 8084 	bne.w	80006e2 <fsm_automatic+0x172>
				t_road_1--;
 80005da:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <fsm_automatic+0x18c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <fsm_automatic+0x18c>)
 80005e2:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80005e4:	4b47      	ldr	r3, [pc, #284]	@ (8000704 <fsm_automatic+0x194>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a46      	ldr	r2, [pc, #280]	@ (8000704 <fsm_automatic+0x194>)
 80005ec:	6013      	str	r3, [r2, #0]
				if (t_road_2 <= 0) { // next state pre-setup
 80005ee:	4b45      	ldr	r3, [pc, #276]	@ (8000704 <fsm_automatic+0x194>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dc06      	bgt.n	8000604 <fsm_automatic+0x94>
					t_road_2 = T_YELLOW;
 80005f6:	4b45      	ldr	r3, [pc, #276]	@ (800070c <fsm_automatic+0x19c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a42      	ldr	r2, [pc, #264]	@ (8000704 <fsm_automatic+0x194>)
 80005fc:	6013      	str	r3, [r2, #0]
					status = RED_YELLOW; // Change state
 80005fe:	4b3d      	ldr	r3, [pc, #244]	@ (80006f4 <fsm_automatic+0x184>)
 8000600:	2202      	movs	r2, #2
 8000602:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000608:	f001 fc0c 	bl	8001e24 <setTimer4>
			}
			break;
 800060c:	e069      	b.n	80006e2 <fsm_automatic+0x172>
		case RED_YELLOW:
			led_config();
 800060e:	f000 f927 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 8000612:	4b3d      	ldr	r3, [pc, #244]	@ (8000708 <fsm_automatic+0x198>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d165      	bne.n	80006e6 <fsm_automatic+0x176>
				t_road_1--;
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <fsm_automatic+0x18c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a36      	ldr	r2, [pc, #216]	@ (80006fc <fsm_automatic+0x18c>)
 8000622:	6013      	str	r3, [r2, #0]
				t_road_2--;
 8000624:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <fsm_automatic+0x194>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <fsm_automatic+0x194>)
 800062c:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 800062e:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <fsm_automatic+0x18c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	dc0a      	bgt.n	800064c <fsm_automatic+0xdc>
					t_road_1 = T_GREEN;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <fsm_automatic+0x190>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a30      	ldr	r2, [pc, #192]	@ (80006fc <fsm_automatic+0x18c>)
 800063c:	6013      	str	r3, [r2, #0]
					t_road_2 = T_RED;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <fsm_automatic+0x188>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	@ (8000704 <fsm_automatic+0x194>)
 8000644:	6013      	str	r3, [r2, #0]
					status = GREEN_RED; // Change state
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <fsm_automatic+0x184>)
 8000648:	2203      	movs	r2, #3
 800064a:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000650:	f001 fbe8 	bl	8001e24 <setTimer4>
			}
			break;
 8000654:	e047      	b.n	80006e6 <fsm_automatic+0x176>
		case GREEN_RED:
			led_config();
 8000656:	f000 f903 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <fsm_automatic+0x198>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d143      	bne.n	80006ea <fsm_automatic+0x17a>
				t_road_1--;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <fsm_automatic+0x18c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <fsm_automatic+0x18c>)
 800066a:	6013      	str	r3, [r2, #0]
				t_road_2--;
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <fsm_automatic+0x194>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3b01      	subs	r3, #1
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <fsm_automatic+0x194>)
 8000674:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <fsm_automatic+0x18c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	dc06      	bgt.n	800068c <fsm_automatic+0x11c>
					t_road_1 = T_YELLOW;
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <fsm_automatic+0x19c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1e      	ldr	r2, [pc, #120]	@ (80006fc <fsm_automatic+0x18c>)
 8000684:	6013      	str	r3, [r2, #0]
					status = YELLOW_RED; // Change state
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <fsm_automatic+0x184>)
 8000688:	2204      	movs	r2, #4
 800068a:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000690:	f001 fbc8 	bl	8001e24 <setTimer4>
			}
			break;
 8000694:	e029      	b.n	80006ea <fsm_automatic+0x17a>
		case YELLOW_RED:
			led_config();
 8000696:	f000 f8e3 	bl	8000860 <led_config>
			if (timer4_flag == 1) {
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <fsm_automatic+0x198>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d125      	bne.n	80006ee <fsm_automatic+0x17e>
				t_road_1--;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <fsm_automatic+0x18c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <fsm_automatic+0x18c>)
 80006aa:	6013      	str	r3, [r2, #0]
				t_road_2--;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <fsm_automatic+0x194>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <fsm_automatic+0x194>)
 80006b4:	6013      	str	r3, [r2, #0]
				if (t_road_1 <= 0) { // next state pre-setup
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <fsm_automatic+0x18c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dc0a      	bgt.n	80006d4 <fsm_automatic+0x164>
					t_road_1 = T_RED;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <fsm_automatic+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <fsm_automatic+0x18c>)
 80006c4:	6013      	str	r3, [r2, #0]
					t_road_2 = T_GREEN;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <fsm_automatic+0x190>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <fsm_automatic+0x194>)
 80006cc:	6013      	str	r3, [r2, #0]
					status = RED_GREEN; // Change state
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <fsm_automatic+0x184>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
				}
				setTimer4(1000);
 80006d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d8:	f001 fba4 	bl	8001e24 <setTimer4>
			}
			break;
 80006dc:	e007      	b.n	80006ee <fsm_automatic+0x17e>
		default:
			break;
 80006de:	bf00      	nop
 80006e0:	e006      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006e2:	bf00      	nop
 80006e4:	e004      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <fsm_automatic+0x180>
			break;
 80006ee:	bf00      	nop
	}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200000a8 	.word	0x200000a8
 8000700:	20000008 	.word	0x20000008
 8000704:	200000ac 	.word	0x200000ac
 8000708:	20000268 	.word	0x20000268
 800070c:	20000004 	.word	0x20000004

08000710 <fsm_red_manual>:
/*
 * Functions related to led blinking in manual state
 * fsm_led_manual: *led* blinks every 500ms
 * */

void fsm_red_manual() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	switch(status) {
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <fsm_red_manual+0x68>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d01b      	beq.n	8000754 <fsm_red_manual+0x44>
 800071c:	2b07      	cmp	r3, #7
 800071e:	dc24      	bgt.n	800076a <fsm_red_manual+0x5a>
 8000720:	2b05      	cmp	r3, #5
 8000722:	d002      	beq.n	800072a <fsm_red_manual+0x1a>
 8000724:	2b06      	cmp	r3, #6
 8000726:	d00a      	beq.n	800073e <fsm_red_manual+0x2e>
				toggle_red();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000728:	e01f      	b.n	800076a <fsm_red_manual+0x5a>
			led_config();
 800072a:	f000 f899 	bl	8000860 <led_config>
			setTimer1(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000732:	f001 fb5d 	bl	8001df0 <setTimer1>
			status = AUTO_RED;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <fsm_red_manual+0x68>)
 8000738:	2206      	movs	r2, #6
 800073a:	601a      	str	r2, [r3, #0]
			break;
 800073c:	e01a      	b.n	8000774 <fsm_red_manual+0x64>
			if (timer1_flag == 1) {
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <fsm_red_manual+0x6c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d113      	bne.n	800076e <fsm_red_manual+0x5e>
				toggle_red();
 8000746:	f000 f999 	bl	8000a7c <toggle_red>
				setTimer1(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074e:	f001 fb4f 	bl	8001df0 <setTimer1>
			break;
 8000752:	e00c      	b.n	800076e <fsm_red_manual+0x5e>
			if (timer1_flag == 1) {
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <fsm_red_manual+0x6c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <fsm_red_manual+0x62>
				toggle_red();
 800075c:	f000 f98e 	bl	8000a7c <toggle_red>
				setTimer1(500);
 8000760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000764:	f001 fb44 	bl	8001df0 <setTimer1>
			break;
 8000768:	e003      	b.n	8000772 <fsm_red_manual+0x62>
			break;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <fsm_red_manual+0x64>
			break;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <fsm_red_manual+0x64>
			break;
 8000772:	bf00      	nop
	}
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000000c 	.word	0x2000000c
 800077c:	2000025c 	.word	0x2000025c

08000780 <fsm_amber_manual>:

void fsm_amber_manual() {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	switch(status) {
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <fsm_amber_manual+0x68>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d01b      	beq.n	80007c4 <fsm_amber_manual+0x44>
 800078c:	2b0a      	cmp	r3, #10
 800078e:	dc24      	bgt.n	80007da <fsm_amber_manual+0x5a>
 8000790:	2b08      	cmp	r3, #8
 8000792:	d002      	beq.n	800079a <fsm_amber_manual+0x1a>
 8000794:	2b09      	cmp	r3, #9
 8000796:	d00a      	beq.n	80007ae <fsm_amber_manual+0x2e>
				toggle_yellow();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000798:	e01f      	b.n	80007da <fsm_amber_manual+0x5a>
			led_config();
 800079a:	f000 f861 	bl	8000860 <led_config>
			setTimer1(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a2:	f001 fb25 	bl	8001df0 <setTimer1>
			status = AUTO_YELLOW;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <fsm_amber_manual+0x68>)
 80007a8:	2209      	movs	r2, #9
 80007aa:	601a      	str	r2, [r3, #0]
			break;
 80007ac:	e01a      	b.n	80007e4 <fsm_amber_manual+0x64>
			if (timer1_flag == 1) {
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <fsm_amber_manual+0x6c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d113      	bne.n	80007de <fsm_amber_manual+0x5e>
				toggle_yellow();
 80007b6:	f000 f97b 	bl	8000ab0 <toggle_yellow>
				setTimer1(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007be:	f001 fb17 	bl	8001df0 <setTimer1>
			break;
 80007c2:	e00c      	b.n	80007de <fsm_amber_manual+0x5e>
			if (timer1_flag == 1) {
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <fsm_amber_manual+0x6c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10a      	bne.n	80007e2 <fsm_amber_manual+0x62>
				toggle_yellow();
 80007cc:	f000 f970 	bl	8000ab0 <toggle_yellow>
				setTimer1(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d4:	f001 fb0c 	bl	8001df0 <setTimer1>
			break;
 80007d8:	e003      	b.n	80007e2 <fsm_amber_manual+0x62>
			break;
 80007da:	bf00      	nop
 80007dc:	e002      	b.n	80007e4 <fsm_amber_manual+0x64>
			break;
 80007de:	bf00      	nop
 80007e0:	e000      	b.n	80007e4 <fsm_amber_manual+0x64>
			break;
 80007e2:	bf00      	nop
	}
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	2000025c 	.word	0x2000025c

080007f0 <fsm_green_manual>:

void fsm_green_manual() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	switch(status) {
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <fsm_green_manual+0x68>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b0d      	cmp	r3, #13
 80007fa:	d01b      	beq.n	8000834 <fsm_green_manual+0x44>
 80007fc:	2b0d      	cmp	r3, #13
 80007fe:	dc24      	bgt.n	800084a <fsm_green_manual+0x5a>
 8000800:	2b0b      	cmp	r3, #11
 8000802:	d002      	beq.n	800080a <fsm_green_manual+0x1a>
 8000804:	2b0c      	cmp	r3, #12
 8000806:	d00a      	beq.n	800081e <fsm_green_manual+0x2e>
				toggle_green();
				setTimer1(500);
			}
			break;
		default:
			break;
 8000808:	e01f      	b.n	800084a <fsm_green_manual+0x5a>
			led_config();
 800080a:	f000 f829 	bl	8000860 <led_config>
			setTimer1(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000812:	f001 faed 	bl	8001df0 <setTimer1>
			status = AUTO_GREEN;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <fsm_green_manual+0x68>)
 8000818:	220c      	movs	r2, #12
 800081a:	601a      	str	r2, [r3, #0]
			break;
 800081c:	e01a      	b.n	8000854 <fsm_green_manual+0x64>
			if (timer1_flag == 1) {
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <fsm_green_manual+0x6c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d113      	bne.n	800084e <fsm_green_manual+0x5e>
				toggle_green();
 8000826:	f000 f95d 	bl	8000ae4 <toggle_green>
				setTimer1(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f001 fadf 	bl	8001df0 <setTimer1>
			break;
 8000832:	e00c      	b.n	800084e <fsm_green_manual+0x5e>
			if (timer1_flag == 1) {
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <fsm_green_manual+0x6c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10a      	bne.n	8000852 <fsm_green_manual+0x62>
				toggle_green();
 800083c:	f000 f952 	bl	8000ae4 <toggle_green>
				setTimer1(500);
 8000840:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000844:	f001 fad4 	bl	8001df0 <setTimer1>
			break;
 8000848:	e003      	b.n	8000852 <fsm_green_manual+0x62>
			break;
 800084a:	bf00      	nop
 800084c:	e002      	b.n	8000854 <fsm_green_manual+0x64>
			break;
 800084e:	bf00      	nop
 8000850:	e000      	b.n	8000854 <fsm_green_manual+0x64>
			break;
 8000852:	bf00      	nop
	}
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000000c 	.word	0x2000000c
 800085c:	2000025c 	.word	0x2000025c

08000860 <led_config>:
void on_yellow_road_2();
void on_green_road_1();
void on_green_road_2();


void led_config() {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	switch (status) {
 8000864:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <led_config+0xa4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b0b      	cmp	r3, #11
 800086a:	d848      	bhi.n	80008fe <led_config+0x9e>
 800086c:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <led_config+0x14>)
 800086e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000872:	bf00      	nop
 8000874:	080008a5 	.word	0x080008a5
 8000878:	080008af 	.word	0x080008af
 800087c:	080008b9 	.word	0x080008b9
 8000880:	080008bf 	.word	0x080008bf
 8000884:	080008c9 	.word	0x080008c9
 8000888:	080008cf 	.word	0x080008cf
 800088c:	080008ff 	.word	0x080008ff
 8000890:	080008ff 	.word	0x080008ff
 8000894:	080008df 	.word	0x080008df
 8000898:	080008ff 	.word	0x080008ff
 800089c:	080008ff 	.word	0x080008ff
 80008a0:	080008ef 	.word	0x080008ef
		case MODE1:
			off_all_leds_road_1();
 80008a4:	f000 f832 	bl	800090c <off_all_leds_road_1>
			off_all_leds_road_2();
 80008a8:	f000 f846 	bl	8000938 <off_all_leds_road_2>
			break;
 80008ac:	e028      	b.n	8000900 <led_config+0xa0>
		case RED_GREEN:
			on_red_road_1();
 80008ae:	f000 f85b 	bl	8000968 <on_red_road_1>
			on_green_road_2();
 80008b2:	f000 f8cb 	bl	8000a4c <on_green_road_2>
			break;
 80008b6:	e023      	b.n	8000900 <led_config+0xa0>
		case RED_YELLOW:
			on_yellow_road_2();
 80008b8:	f000 f89a 	bl	80009f0 <on_yellow_road_2>
			break;
 80008bc:	e020      	b.n	8000900 <led_config+0xa0>
		case GREEN_RED:
			on_green_road_1();
 80008be:	f000 f8af 	bl	8000a20 <on_green_road_1>
			on_red_road_2();
 80008c2:	f000 f867 	bl	8000994 <on_red_road_2>
			break;
 80008c6:	e01b      	b.n	8000900 <led_config+0xa0>
		case YELLOW_RED:
			on_yellow_road_1();
 80008c8:	f000 f87c 	bl	80009c4 <on_yellow_road_1>
			break;
 80008cc:	e018      	b.n	8000900 <led_config+0xa0>
		case MODE2:
			on_red_road_1();
 80008ce:	f000 f84b 	bl	8000968 <on_red_road_1>
			on_red_road_2();
 80008d2:	f000 f85f 	bl	8000994 <on_red_road_2>
			toggle_flag = 0;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <led_config+0xa8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			break;
 80008dc:	e010      	b.n	8000900 <led_config+0xa0>
		case MODE3:
			on_yellow_road_1();
 80008de:	f000 f871 	bl	80009c4 <on_yellow_road_1>
			on_yellow_road_2();
 80008e2:	f000 f885 	bl	80009f0 <on_yellow_road_2>
			toggle_flag = 0;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <led_config+0xa8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			break;
 80008ec:	e008      	b.n	8000900 <led_config+0xa0>
		case MODE4:
			on_green_road_1();
 80008ee:	f000 f897 	bl	8000a20 <on_green_road_1>
			on_green_road_2();
 80008f2:	f000 f8ab 	bl	8000a4c <on_green_road_2>
			toggle_flag = 0;
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <led_config+0xa8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
			break;
 80008fc:	e000      	b.n	8000900 <led_config+0xa0>
		default:
			break;
 80008fe:	bf00      	nop
	}
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000000c 	.word	0x2000000c
 8000908:	200000b0 	.word	0x200000b0

0800090c <off_all_leds_road_1>:


void off_all_leds_road_1() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4807      	ldr	r0, [pc, #28]	@ (8000934 <off_all_leds_road_1+0x28>)
 8000916:	f001 ff49 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <off_all_leds_road_1+0x28>)
 8000920:	f001 ff44 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	@ 0x40
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <off_all_leds_road_1+0x28>)
 800092a:	f001 ff3f 	bl	80027ac <HAL_GPIO_WritePin>

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <off_all_leds_road_2>:

void off_all_leds_road_2() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <off_all_leds_road_2+0x2c>)
 8000942:	f001 ff33 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <off_all_leds_road_2+0x2c>)
 800094e:	f001 ff2d 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <off_all_leds_road_2+0x2c>)
 800095a:	f001 ff27 	bl	80027ac <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <on_red_road_1>:

void on_red_road_1() {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <on_red_road_1+0x28>)
 8000972:	f001 ff1b 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2120      	movs	r1, #32
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <on_red_road_1+0x28>)
 800097c:	f001 ff16 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	@ 0x40
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <on_red_road_1+0x28>)
 8000986:	f001 ff11 	bl	80027ac <HAL_GPIO_WritePin>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <on_red_road_2>:

void on_red_road_2() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <on_red_road_2+0x2c>)
 800099e:	f001 ff05 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <on_red_road_2+0x2c>)
 80009aa:	f001 feff 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <on_red_road_2+0x2c>)
 80009b6:	f001 fef9 	bl	80027ac <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <on_yellow_road_1>:

void on_yellow_road_1() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <on_yellow_road_1+0x28>)
 80009ce:	f001 feed 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2120      	movs	r1, #32
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <on_yellow_road_1+0x28>)
 80009d8:	f001 fee8 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	@ 0x40
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <on_yellow_road_1+0x28>)
 80009e2:	f001 fee3 	bl	80027ac <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <on_yellow_road_2>:

void on_yellow_road_2() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2180      	movs	r1, #128	@ 0x80
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <on_yellow_road_2+0x2c>)
 80009fa:	f001 fed7 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <on_yellow_road_2+0x2c>)
 8000a06:	f001 fed1 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <on_yellow_road_2+0x2c>)
 8000a12:	f001 fecb 	bl	80027ac <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <on_green_road_1>:

void on_green_road_1() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E4_Led1_G_GPIO_Port, E4_Led1_G_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2110      	movs	r1, #16
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <on_green_road_1+0x28>)
 8000a2a:	f001 febf 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E5_Led1_Y_GPIO_Port, E5_Led1_Y_Pin, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <on_green_road_1+0x28>)
 8000a34:	f001 feba 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E6_Led1_R_GPIO_Port, E6_Led1_R_Pin, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2140      	movs	r1, #64	@ 0x40
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <on_green_road_1+0x28>)
 8000a3e:	f001 feb5 	bl	80027ac <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <on_green_road_2>:

void on_green_road_2() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (E7_Led2_G_GPIO_Port, E7_Led2_G_Pin, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2180      	movs	r1, #128	@ 0x80
 8000a54:	4808      	ldr	r0, [pc, #32]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a56:	f001 fea9 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E8_Led2_Y_GPIO_Port, E8_Led2_Y_Pin, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a62:	f001 fea3 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (E9_Led2_R_GPIO_Port, E9_Led2_R_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <on_green_road_2+0x2c>)
 8000a6e:	f001 fe9d 	bl	80027ac <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <toggle_red>:


void toggle_red() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <toggle_red+0x30>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <toggle_red+0x1c>
		on_red_road_1();
 8000a88:	f7ff ff6e 	bl	8000968 <on_red_road_1>
		on_red_road_2();
 8000a8c:	f7ff ff82 	bl	8000994 <on_red_road_2>
		toggle_flag = 1;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <toggle_red+0x30>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000a96:	e006      	b.n	8000aa6 <toggle_red+0x2a>
		off_all_leds_road_1();
 8000a98:	f7ff ff38 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000a9c:	f7ff ff4c 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <toggle_red+0x30>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000b0 	.word	0x200000b0

08000ab0 <toggle_yellow>:

void toggle_yellow() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d107      	bne.n	8000acc <toggle_yellow+0x1c>
		on_yellow_road_1();
 8000abc:	f7ff ff82 	bl	80009c4 <on_yellow_road_1>
		on_yellow_road_2();
 8000ac0:	f7ff ff96 	bl	80009f0 <on_yellow_road_2>
		toggle_flag = 1;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000aca:	e006      	b.n	8000ada <toggle_yellow+0x2a>
		off_all_leds_road_1();
 8000acc:	f7ff ff1e 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000ad0:	f7ff ff32 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	@ (8000ae0 <toggle_yellow+0x30>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000b0 	.word	0x200000b0

08000ae4 <toggle_green>:

void toggle_green() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if (toggle_flag == 0) {
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <toggle_green+0x30>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <toggle_green+0x1c>
		on_green_road_1();
 8000af0:	f7ff ff96 	bl	8000a20 <on_green_road_1>
		on_green_road_2();
 8000af4:	f7ff ffaa 	bl	8000a4c <on_green_road_2>
		toggle_flag = 1;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <toggle_green+0x30>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
	} else {
		off_all_leds_road_1();
		off_all_leds_road_2();
		toggle_flag = 0;
	}
}
 8000afe:	e006      	b.n	8000b0e <toggle_green+0x2a>
		off_all_leds_road_1();
 8000b00:	f7ff ff04 	bl	800090c <off_all_leds_road_1>
		off_all_leds_road_2();
 8000b04:	f7ff ff18 	bl	8000938 <off_all_leds_road_2>
		toggle_flag = 0;
 8000b08:	4b02      	ldr	r3, [pc, #8]	@ (8000b14 <toggle_green+0x30>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000b0 	.word	0x200000b0

08000b18 <fsm_button_processing>:
enum ButtonState button_0_state = BUTTON_PRESSED; //Change mode
enum ButtonState button_1_state = BUTTON_PRESSED; //Increment time
enum ButtonState button_2_state = BUTTON_PRESSED; //Decrement time
enum ButtonState button_3_state = BUTTON_PRESSED; //Save time

void fsm_button_processing() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af02      	add	r7, sp, #8
	switch (button_0_state) {
 8000b1e:	4b74      	ldr	r3, [pc, #464]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d04c      	beq.n	8000bc0 <fsm_button_processing+0xa8>
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	dc59      	bgt.n	8000bde <fsm_button_processing+0xc6>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <fsm_button_processing+0x1c>
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d032      	beq.n	8000b98 <fsm_button_processing+0x80>
 8000b32:	e054      	b.n	8000bde <fsm_button_processing+0xc6>
		case BUTTON_RELEASED:
			if (is_button_pressed(0)) {
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 fa81 	bl	800103c <is_button_pressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d049      	beq.n	8000bd4 <fsm_button_processing+0xbc>
				button_0_state = BUTTON_PRESSED;
 8000b40:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
				if ((status == RED_GREEN) || (status == RED_YELLOW) || (status == GREEN_RED) || (status == YELLOW_RED))	status = MODE2;
 8000b46:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d00b      	beq.n	8000b66 <fsm_button_processing+0x4e>
 8000b4e:	4b69      	ldr	r3, [pc, #420]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d007      	beq.n	8000b66 <fsm_button_processing+0x4e>
 8000b56:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d003      	beq.n	8000b66 <fsm_button_processing+0x4e>
 8000b5e:	4b65      	ldr	r3, [pc, #404]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d102      	bne.n	8000b6c <fsm_button_processing+0x54>
 8000b66:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b68:	2205      	movs	r2, #5
 8000b6a:	601a      	str	r2, [r3, #0]
				if (status == AUTO_RED) 	status = MODE3;
 8000b6c:	4b61      	ldr	r3, [pc, #388]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d102      	bne.n	8000b7a <fsm_button_processing+0x62>
 8000b74:	4b5f      	ldr	r3, [pc, #380]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	601a      	str	r2, [r3, #0]
				if (status == AUTO_YELLOW) 	status = MODE4;
 8000b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	d102      	bne.n	8000b88 <fsm_button_processing+0x70>
 8000b82:	4b5c      	ldr	r3, [pc, #368]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b84:	220b      	movs	r2, #11
 8000b86:	601a      	str	r2, [r3, #0]
				if (status == AUTO_GREEN) 	status = MODE1;
 8000b88:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b0c      	cmp	r3, #12
 8000b8e:	d121      	bne.n	8000bd4 <fsm_button_processing+0xbc>
 8000b90:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b96:	e01d      	b.n	8000bd4 <fsm_button_processing+0xbc>
		case BUTTON_PRESSED:
			if (!is_button_pressed(0)) {
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 fa4f 	bl	800103c <is_button_pressed>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d103      	bne.n	8000bac <fsm_button_processing+0x94>
				button_0_state = BUTTON_RELEASED;
 8000ba4:	4b52      	ldr	r3, [pc, #328]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(0)) {
					button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000baa:	e015      	b.n	8000bd8 <fsm_button_processing+0xc0>
				if (is_button_pressed_1s(0)) {
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fa5f 	bl	8001070 <is_button_pressed_1s>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00f      	beq.n	8000bd8 <fsm_button_processing+0xc0>
					button_0_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	701a      	strb	r2, [r3, #0]
			break;
 8000bbe:	e00b      	b.n	8000bd8 <fsm_button_processing+0xc0>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(0)) {
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fa3b 	bl	800103c <is_button_pressed>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d107      	bne.n	8000bdc <fsm_button_processing+0xc4>
				button_0_state = BUTTON_RELEASED;
 8000bcc:	4b48      	ldr	r3, [pc, #288]	@ (8000cf0 <fsm_button_processing+0x1d8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000bd2:	e003      	b.n	8000bdc <fsm_button_processing+0xc4>
			break;
 8000bd4:	bf00      	nop
 8000bd6:	e002      	b.n	8000bde <fsm_button_processing+0xc6>
			break;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <fsm_button_processing+0xc6>
			break;
 8000bdc:	bf00      	nop
	}

	switch (button_1_state) {
 8000bde:	4b46      	ldr	r3, [pc, #280]	@ (8000cf8 <fsm_button_processing+0x1e0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d069      	beq.n	8000cba <fsm_button_processing+0x1a2>
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	dc76      	bgt.n	8000cd8 <fsm_button_processing+0x1c0>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <fsm_button_processing+0xdc>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d04f      	beq.n	8000c92 <fsm_button_processing+0x17a>
 8000bf2:	e071      	b.n	8000cd8 <fsm_button_processing+0x1c0>
		case BUTTON_RELEASED:
			if (is_button_pressed(1)) {
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 fa21 	bl	800103c <is_button_pressed>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d066      	beq.n	8000cce <fsm_button_processing+0x1b6>
				button_1_state = BUTTON_PRESSED;
 8000c00:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <fsm_button_processing+0x1e0>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000c06:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d003      	beq.n	8000c16 <fsm_button_processing+0xfe>
 8000c0e:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d10e      	bne.n	8000c34 <fsm_button_processing+0x11c>
					status = ADJ_RED;
 8000c16:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
					T_RED++;
 8000c1c:	4b37      	ldr	r3, [pc, #220]	@ (8000cfc <fsm_button_processing+0x1e4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a36      	ldr	r2, [pc, #216]	@ (8000cfc <fsm_button_processing+0x1e4>)
 8000c24:	6013      	str	r3, [r2, #0]
					if (T_RED >= 99) T_RED = 1;
 8000c26:	4b35      	ldr	r3, [pc, #212]	@ (8000cfc <fsm_button_processing+0x1e4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b62      	cmp	r3, #98	@ 0x62
 8000c2c:	dd02      	ble.n	8000c34 <fsm_button_processing+0x11c>
 8000c2e:	4b33      	ldr	r3, [pc, #204]	@ (8000cfc <fsm_button_processing+0x1e4>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_YELLOW || status == ADJ_YELLOW) {
 8000c34:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d003      	beq.n	8000c44 <fsm_button_processing+0x12c>
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b0a      	cmp	r3, #10
 8000c42:	d10e      	bne.n	8000c62 <fsm_button_processing+0x14a>
					status = ADJ_YELLOW;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c46:	220a      	movs	r2, #10
 8000c48:	601a      	str	r2, [r3, #0]
					T_YELLOW++;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <fsm_button_processing+0x1e8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a2b      	ldr	r2, [pc, #172]	@ (8000d00 <fsm_button_processing+0x1e8>)
 8000c52:	6013      	str	r3, [r2, #0]
					if (T_YELLOW >= 5) T_YELLOW = 1;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <fsm_button_processing+0x1e8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	dd02      	ble.n	8000c62 <fsm_button_processing+0x14a>
 8000c5c:	4b28      	ldr	r3, [pc, #160]	@ (8000d00 <fsm_button_processing+0x1e8>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000c62:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b0c      	cmp	r3, #12
 8000c68:	d003      	beq.n	8000c72 <fsm_button_processing+0x15a>
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b0d      	cmp	r3, #13
 8000c70:	d12d      	bne.n	8000cce <fsm_button_processing+0x1b6>
					status = ADJ_GREEN;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <fsm_button_processing+0x1dc>)
 8000c74:	220d      	movs	r2, #13
 8000c76:	601a      	str	r2, [r3, #0]
					T_GREEN++;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <fsm_button_processing+0x1ec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <fsm_button_processing+0x1ec>)
 8000c80:	6013      	str	r3, [r2, #0]
					if (T_GREEN >= 99) T_GREEN = 1;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <fsm_button_processing+0x1ec>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b62      	cmp	r3, #98	@ 0x62
 8000c88:	dd21      	ble.n	8000cce <fsm_button_processing+0x1b6>
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <fsm_button_processing+0x1ec>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

				}
			}
			break;
 8000c90:	e01d      	b.n	8000cce <fsm_button_processing+0x1b6>
		case BUTTON_PRESSED:
			if (!is_button_pressed(1)) {
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 f9d2 	bl	800103c <is_button_pressed>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <fsm_button_processing+0x18e>
				button_1_state = BUTTON_RELEASED;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <fsm_button_processing+0x1e0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(1)) {
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000ca4:	e015      	b.n	8000cd2 <fsm_button_processing+0x1ba>
				if (is_button_pressed_1s(1)) {
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 f9e2 	bl	8001070 <is_button_pressed_1s>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00f      	beq.n	8000cd2 <fsm_button_processing+0x1ba>
					button_1_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <fsm_button_processing+0x1e0>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	701a      	strb	r2, [r3, #0]
			break;
 8000cb8:	e00b      	b.n	8000cd2 <fsm_button_processing+0x1ba>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(1)) {
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 f9be 	bl	800103c <is_button_pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <fsm_button_processing+0x1be>
				button_1_state = BUTTON_RELEASED;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <fsm_button_processing+0x1e0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000ccc:	e003      	b.n	8000cd6 <fsm_button_processing+0x1be>
			break;
 8000cce:	bf00      	nop
 8000cd0:	e002      	b.n	8000cd8 <fsm_button_processing+0x1c0>
			break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <fsm_button_processing+0x1c0>
			break;
 8000cd6:	bf00      	nop
	}

	switch (button_2_state) {
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <fsm_button_processing+0x1f0>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d078      	beq.n	8000dd2 <fsm_button_processing+0x2ba>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	f300 8085 	bgt.w	8000df0 <fsm_button_processing+0x2d8>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d010      	beq.n	8000d0c <fsm_button_processing+0x1f4>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d05d      	beq.n	8000daa <fsm_button_processing+0x292>
 8000cee:	e07f      	b.n	8000df0 <fsm_button_processing+0x2d8>
 8000cf0:	20000010 	.word	0x20000010
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000011 	.word	0x20000011
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000012 	.word	0x20000012
		case BUTTON_RELEASED:
			if (is_button_pressed(2)) {
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f000 f995 	bl	800103c <is_button_pressed>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d066      	beq.n	8000de6 <fsm_button_processing+0x2ce>
				button_2_state = BUTTON_PRESSED;
 8000d18:	4b85      	ldr	r3, [pc, #532]	@ (8000f30 <fsm_button_processing+0x418>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
				if (status == AUTO_RED || status == ADJ_RED) {
 8000d1e:	4b85      	ldr	r3, [pc, #532]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d003      	beq.n	8000d2e <fsm_button_processing+0x216>
 8000d26:	4b83      	ldr	r3, [pc, #524]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	d10e      	bne.n	8000d4c <fsm_button_processing+0x234>
					status = ADJ_RED;
 8000d2e:	4b81      	ldr	r3, [pc, #516]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
					T_RED--;
 8000d34:	4b80      	ldr	r3, [pc, #512]	@ (8000f38 <fsm_button_processing+0x420>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a7f      	ldr	r2, [pc, #508]	@ (8000f38 <fsm_button_processing+0x420>)
 8000d3c:	6013      	str	r3, [r2, #0]
					if (T_RED <= 0) T_RED = 1;
 8000d3e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f38 <fsm_button_processing+0x420>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dc02      	bgt.n	8000d4c <fsm_button_processing+0x234>
 8000d46:	4b7c      	ldr	r3, [pc, #496]	@ (8000f38 <fsm_button_processing+0x420>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_YELLOW || status == ADJ_YELLOW) {
 8000d4c:	4b79      	ldr	r3, [pc, #484]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	d003      	beq.n	8000d5c <fsm_button_processing+0x244>
 8000d54:	4b77      	ldr	r3, [pc, #476]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b0a      	cmp	r3, #10
 8000d5a:	d10e      	bne.n	8000d7a <fsm_button_processing+0x262>
					status = ADJ_YELLOW;
 8000d5c:	4b75      	ldr	r3, [pc, #468]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	601a      	str	r2, [r3, #0]
					T_YELLOW--;
 8000d62:	4b76      	ldr	r3, [pc, #472]	@ (8000f3c <fsm_button_processing+0x424>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	4a74      	ldr	r2, [pc, #464]	@ (8000f3c <fsm_button_processing+0x424>)
 8000d6a:	6013      	str	r3, [r2, #0]
					if (T_YELLOW <= 0) T_YELLOW = 1;
 8000d6c:	4b73      	ldr	r3, [pc, #460]	@ (8000f3c <fsm_button_processing+0x424>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	dc02      	bgt.n	8000d7a <fsm_button_processing+0x262>
 8000d74:	4b71      	ldr	r3, [pc, #452]	@ (8000f3c <fsm_button_processing+0x424>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

				}
				if (status == AUTO_GREEN || status == ADJ_GREEN) {
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b0c      	cmp	r3, #12
 8000d80:	d003      	beq.n	8000d8a <fsm_button_processing+0x272>
 8000d82:	4b6c      	ldr	r3, [pc, #432]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b0d      	cmp	r3, #13
 8000d88:	d12d      	bne.n	8000de6 <fsm_button_processing+0x2ce>
					status = ADJ_GREEN;
 8000d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000d8c:	220d      	movs	r2, #13
 8000d8e:	601a      	str	r2, [r3, #0]
					T_GREEN--;
 8000d90:	4b6b      	ldr	r3, [pc, #428]	@ (8000f40 <fsm_button_processing+0x428>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <fsm_button_processing+0x428>)
 8000d98:	6013      	str	r3, [r2, #0]
					if (T_GREEN <= 0) T_GREEN = 1;
 8000d9a:	4b69      	ldr	r3, [pc, #420]	@ (8000f40 <fsm_button_processing+0x428>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dc21      	bgt.n	8000de6 <fsm_button_processing+0x2ce>
 8000da2:	4b67      	ldr	r3, [pc, #412]	@ (8000f40 <fsm_button_processing+0x428>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

				}
			}
			break;
 8000da8:	e01d      	b.n	8000de6 <fsm_button_processing+0x2ce>
		case BUTTON_PRESSED:
			if (!is_button_pressed(2)) {
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 f946 	bl	800103c <is_button_pressed>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <fsm_button_processing+0x2a6>
				button_2_state = BUTTON_RELEASED;
 8000db6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f30 <fsm_button_processing+0x418>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			} else {
				if (is_button_pressed_1s(2)) {
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000dbc:	e015      	b.n	8000dea <fsm_button_processing+0x2d2>
				if (is_button_pressed_1s(2)) {
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f000 f956 	bl	8001070 <is_button_pressed_1s>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00f      	beq.n	8000dea <fsm_button_processing+0x2d2>
					button_2_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000dca:	4b59      	ldr	r3, [pc, #356]	@ (8000f30 <fsm_button_processing+0x418>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	701a      	strb	r2, [r3, #0]
			break;
 8000dd0:	e00b      	b.n	8000dea <fsm_button_processing+0x2d2>
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if (!is_button_pressed(2)) {
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 f932 	bl	800103c <is_button_pressed>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d107      	bne.n	8000dee <fsm_button_processing+0x2d6>
				button_2_state = BUTTON_RELEASED;
 8000dde:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <fsm_button_processing+0x418>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			}
			// do nothing, wait for the button to be released
			break;
 8000de4:	e003      	b.n	8000dee <fsm_button_processing+0x2d6>
			break;
 8000de6:	bf00      	nop
 8000de8:	e002      	b.n	8000df0 <fsm_button_processing+0x2d8>
			break;
 8000dea:	bf00      	nop
 8000dec:	e000      	b.n	8000df0 <fsm_button_processing+0x2d8>
			break;
 8000dee:	bf00      	nop
	}

	switch (button_3_state) {
 8000df0:	4b54      	ldr	r3, [pc, #336]	@ (8000f44 <fsm_button_processing+0x42c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f000 8087 	beq.w	8000f08 <fsm_button_processing+0x3f0>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	f300 8093 	bgt.w	8000f26 <fsm_button_processing+0x40e>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <fsm_button_processing+0x2f2>
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d06b      	beq.n	8000ee0 <fsm_button_processing+0x3c8>
				button_3_state = BUTTON_RELEASED;
			}
			// do nothing, wait for the button to be released
			break;
	}
}
 8000e08:	e08d      	b.n	8000f26 <fsm_button_processing+0x40e>
			if (is_button_pressed(3)) {
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f916 	bl	800103c <is_button_pressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8082 	beq.w	8000f1c <fsm_button_processing+0x404>
				button_3_state = BUTTON_PRESSED;
 8000e18:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <fsm_button_processing+0x42c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
				if (status == ADJ_RED) {
 8000e1e:	4b45      	ldr	r3, [pc, #276]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d114      	bne.n	8000e50 <fsm_button_processing+0x338>
					status = AUTO_RED;
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e28:	2206      	movs	r2, #6
 8000e2a:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_YELLOW) T_RED = T_YELLOW + 1;
 8000e2c:	4b42      	ldr	r3, [pc, #264]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dc04      	bgt.n	8000e42 <fsm_button_processing+0x32a>
 8000e38:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e40:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_YELLOW;
 8000e42:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <fsm_button_processing+0x428>)
 8000e4e:	6013      	str	r3, [r2, #0]
				if (status == ADJ_YELLOW) {
 8000e50:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	d114      	bne.n	8000e82 <fsm_button_processing+0x36a>
					status = AUTO_YELLOW;
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	601a      	str	r2, [r3, #0]
					if (T_RED <= T_YELLOW) T_RED = T_YELLOW + 1;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dc04      	bgt.n	8000e74 <fsm_button_processing+0x35c>
 8000e6a:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a31      	ldr	r2, [pc, #196]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e72:	6013      	str	r3, [r2, #0]
					T_GREEN = T_RED - T_YELLOW;
 8000e74:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <fsm_button_processing+0x420>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	4a30      	ldr	r2, [pc, #192]	@ (8000f40 <fsm_button_processing+0x428>)
 8000e80:	6013      	str	r3, [r2, #0]
				if (status == ADJ_GREEN) {
 8000e82:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b0d      	cmp	r3, #13
 8000e88:	d116      	bne.n	8000eb8 <fsm_button_processing+0x3a0>
					status = AUTO_GREEN;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <fsm_button_processing+0x41c>)
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	601a      	str	r2, [r3, #0]
					if (T_YELLOW + T_GREEN >= 99) {
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <fsm_button_processing+0x424>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <fsm_button_processing+0x428>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	2b62      	cmp	r3, #98	@ 0x62
 8000e9c:	dd05      	ble.n	8000eaa <fsm_button_processing+0x392>
						T_YELLOW = 4;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <fsm_button_processing+0x424>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
						T_GREEN = 95;
 8000ea4:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <fsm_button_processing+0x428>)
 8000ea6:	225f      	movs	r2, #95	@ 0x5f
 8000ea8:	601a      	str	r2, [r3, #0]
					T_RED = T_YELLOW + T_GREEN;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <fsm_button_processing+0x424>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <fsm_button_processing+0x428>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <fsm_button_processing+0x420>)
 8000eb6:	6013      	str	r3, [r2, #0]
				sprintf(str, "G%d R%d Y%d\n", T_GREEN, T_RED, T_YELLOW);
 8000eb8:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <fsm_button_processing+0x428>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <fsm_button_processing+0x420>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <fsm_button_processing+0x424>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	1d38      	adds	r0, r7, #4
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	491f      	ldr	r1, [pc, #124]	@ (8000f48 <fsm_button_processing+0x430>)
 8000ecc:	f003 fdec 	bl	8004aa8 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
 8000ed0:	1d39      	adds	r1, r7, #4
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	2212      	movs	r2, #18
 8000ed8:	481c      	ldr	r0, [pc, #112]	@ (8000f4c <fsm_button_processing+0x434>)
 8000eda:	f002 fddf 	bl	8003a9c <HAL_UART_Transmit>
			break;
 8000ede:	e01d      	b.n	8000f1c <fsm_button_processing+0x404>
			if (!is_button_pressed(3)) {
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8ab 	bl	800103c <is_button_pressed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d103      	bne.n	8000ef4 <fsm_button_processing+0x3dc>
				button_3_state = BUTTON_RELEASED;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <fsm_button_processing+0x42c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
			break;
 8000ef2:	e015      	b.n	8000f20 <fsm_button_processing+0x408>
				if (is_button_pressed_1s(3)) {
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f8bb 	bl	8001070 <is_button_pressed_1s>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00f      	beq.n	8000f20 <fsm_button_processing+0x408>
					button_3_state = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <fsm_button_processing+0x42c>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	701a      	strb	r2, [r3, #0]
			break;
 8000f06:	e00b      	b.n	8000f20 <fsm_button_processing+0x408>
			if (!is_button_pressed(3)) {
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f897 	bl	800103c <is_button_pressed>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d107      	bne.n	8000f24 <fsm_button_processing+0x40c>
				button_3_state = BUTTON_RELEASED;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <fsm_button_processing+0x42c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			break;
 8000f1a:	e003      	b.n	8000f24 <fsm_button_processing+0x40c>
			break;
 8000f1c:	bf00      	nop
 8000f1e:	e002      	b.n	8000f26 <fsm_button_processing+0x40e>
			break;
 8000f20:	bf00      	nop
 8000f22:	e000      	b.n	8000f26 <fsm_button_processing+0x40e>
			break;
 8000f24:	bf00      	nop
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000012 	.word	0x20000012
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000013 	.word	0x20000013
 8000f48:	08005d4c 	.word	0x08005d4c
 8000f4c:	20000114 	.word	0x20000114

08000f50 <button_reading>:
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

static GPIO_TypeDef* button_ports[N0_OF_BUTTONS] = {B4_Btn1_GPIO_Port, B5_Btn2_GPIO_Port, B6_Btn3_GPIO_Port, B7_Btn4_GPIO_Port};
static uint16_t button_pins[N0_OF_BUTTONS] = {B4_Btn1_Pin, B5_Btn2_Pin, B6_Btn3_Pin, B7_Btn4_Pin};

void button_reading(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	e058      	b.n	800100e <button_reading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000f5c:	4a30      	ldr	r2, [pc, #192]	@ (8001020 <button_reading+0xd0>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	7819      	ldrb	r1, [r3, #0]
 8000f64:	4a2f      	ldr	r2, [pc, #188]	@ (8001024 <button_reading+0xd4>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001028 <button_reading+0xd8>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f76:	492d      	ldr	r1, [pc, #180]	@ (800102c <button_reading+0xdc>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4610      	mov	r0, r2
 8000f82:	f001 fbfb 	bl	800277c <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <button_reading+0xd0>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	460a      	mov	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000f94:	4a22      	ldr	r2, [pc, #136]	@ (8001020 <button_reading+0xd0>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	4921      	ldr	r1, [pc, #132]	@ (8001024 <button_reading+0xd4>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d108      	bne.n	8000fba <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <button_reading+0xd0>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001030 <button_reading+0xe0>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000fba:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <button_reading+0xe0>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d116      	bne.n	8000ff4 <button_reading+0xa4>
			//if a button is pressed, start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <button_reading+0xe4>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fce:	2b63      	cmp	r3, #99	@ 0x63
 8000fd0:	d80a      	bhi.n	8000fe8 <button_reading+0x98>
				counterForButtonPress1s[i]++;
 8000fd2:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <button_reading+0xe4>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <button_reading+0xe4>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fe6:	e00f      	b.n	8001008 <button_reading+0xb8>
			} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000fe8:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <button_reading+0xe8>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e009      	b.n	8001008 <button_reading+0xb8>
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <button_reading+0xe4>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <button_reading+0xe8>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b03      	cmp	r3, #3
 8001012:	dda3      	ble.n	8000f5c <button_reading+0xc>
		}
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000b8 	.word	0x200000b8
 8001024:	200000bc 	.word	0x200000bc
 8001028:	20000014 	.word	0x20000014
 800102c:	20000024 	.word	0x20000024
 8001030:	200000b4 	.word	0x200000b4
 8001034:	200000c4 	.word	0x200000c4
 8001038:	200000c0 	.word	0x200000c0

0800103c <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d901      	bls.n	8001050 <is_button_pressed+0x14>
 800104c:	2300      	movs	r3, #0
 800104e:	e007      	b.n	8001060 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a06      	ldr	r2, [pc, #24]	@ (800106c <is_button_pressed+0x30>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf0c      	ite	eq
 800105a:	2301      	moveq	r3, #1
 800105c:	2300      	movne	r3, #0
 800105e:	b2db      	uxtb	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	200000b4 	.word	0x200000b4

08001070 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d901      	bls.n	8001084 <is_button_pressed_1s+0x14>
 8001080:	2300      	movs	r3, #0
 8001082:	e007      	b.n	8001094 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a06      	ldr	r2, [pc, #24]	@ (80010a0 <is_button_pressed_1s+0x30>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	2b01      	cmp	r3, #1
 800108c:	bf0c      	ite	eq
 800108e:	2301      	moveq	r3, #1
 8001090:	2300      	movne	r3, #0
 8001092:	b2db      	uxtb	r3, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200000c0 	.word	0x200000c0

080010a4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t Rx_data[11];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
	if(Rx_data[0] == 'G'){
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_UART_RxCpltCallback+0x38>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b47      	cmp	r3, #71	@ 0x47
 80010b2:	d107      	bne.n	80010c4 <HAL_UART_RxCpltCallback+0x20>
		sscanf((char*)Rx_data, "G%d R%d Y%d", &T_GREEN, &T_RED, &T_YELLOW);
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_UART_RxCpltCallback+0x3c>)
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_UART_RxCpltCallback+0x40>)
 80010ba:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <HAL_UART_RxCpltCallback+0x44>)
 80010bc:	490b      	ldr	r1, [pc, #44]	@ (80010ec <HAL_UART_RxCpltCallback+0x48>)
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <HAL_UART_RxCpltCallback+0x38>)
 80010c0:	f003 fd12 	bl	8004ae8 <siscanf>
	}
	Rx_data[0] = '\0';
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_UART_RxCpltCallback+0x38>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, Rx_data, sizeof(Rx_data));
 80010ca:	220b      	movs	r2, #11
 80010cc:	4903      	ldr	r1, [pc, #12]	@ (80010dc <HAL_UART_RxCpltCallback+0x38>)
 80010ce:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <HAL_UART_RxCpltCallback+0x4c>)
 80010d0:	f002 fd6f 	bl	8003bb2 <HAL_UART_Receive_IT>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000015c 	.word	0x2000015c
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	08005d5c 	.word	0x08005d5c
 80010f0:	20000114 	.word	0x20000114

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 ff7e 	bl	8001ff8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f848 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f926 	bl	8001350 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001104:	f000 f8ae 	bl	8001264 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001108:	f000 f8f8 	bl	80012fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  exti_config_wake();
//  sleep_enter();

  HAL_TIM_Base_Start_IT(&htim2);
 800110c:	4816      	ldr	r0, [pc, #88]	@ (8001168 <main+0x74>)
 800110e:	f002 f84f 	bl	80031b0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2, Rx_data, sizeof(Rx_data));
 8001112:	220b      	movs	r2, #11
 8001114:	4915      	ldr	r1, [pc, #84]	@ (800116c <main+0x78>)
 8001116:	4816      	ldr	r0, [pc, #88]	@ (8001170 <main+0x7c>)
 8001118:	f002 fd4b 	bl	8003bb2 <HAL_UART_Receive_IT>

  SCH_Add_Task(timer_run, 0, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	4814      	ldr	r0, [pc, #80]	@ (8001174 <main+0x80>)
 8001122:	f000 faad 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 0, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	2100      	movs	r1, #0
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <main+0x84>)
 800112c:	f000 faa8 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2100      	movs	r1, #0
 8001134:	4811      	ldr	r0, [pc, #68]	@ (800117c <main+0x88>)
 8001136:	f000 faa3 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(fsm_red_manual, 0, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	2100      	movs	r1, #0
 800113e:	4810      	ldr	r0, [pc, #64]	@ (8001180 <main+0x8c>)
 8001140:	f000 fa9e 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(fsm_amber_manual, 0, 1);
 8001144:	2201      	movs	r2, #1
 8001146:	2100      	movs	r1, #0
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <main+0x90>)
 800114a:	f000 fa99 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(fsm_green_manual, 0, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <main+0x94>)
 8001154:	f000 fa94 	bl	8001680 <SCH_Add_Task>
  SCH_Add_Task(fsm_button_processing, 0, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2100      	movs	r1, #0
 800115c:	480b      	ldr	r0, [pc, #44]	@ (800118c <main+0x98>)
 800115e:	f000 fa8f 	bl	8001680 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8001162:	f000 fcd9 	bl	8001b18 <SCH_Dispatch_Tasks>
 8001166:	e7fc      	b.n	8001162 <main+0x6e>
 8001168:	200000cc 	.word	0x200000cc
 800116c:	2000015c 	.word	0x2000015c
 8001170:	20000114 	.word	0x20000114
 8001174:	08001e59 	.word	0x08001e59
 8001178:	08000f51 	.word	0x08000f51
 800117c:	08000571 	.word	0x08000571
 8001180:	08000711 	.word	0x08000711
 8001184:	08000781 	.word	0x08000781
 8001188:	080007f1 	.word	0x080007f1
 800118c:	08000b19 	.word	0x08000b19

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	@ 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fcce 	bl	8004b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b28      	ldr	r3, [pc, #160]	@ (800125c <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a27      	ldr	r2, [pc, #156]	@ (800125c <SystemClock_Config+0xcc>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <SystemClock_Config+0xd0>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800120c:	2307      	movs	r3, #7
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fae3 	bl	80027e0 <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001220:	f000 fa00 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001230:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2102      	movs	r1, #2
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fd44 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800124e:	f000 f9e9 	bl	8001624 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	@ 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_TIM2_Init+0x94>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_TIM2_Init+0x94>)
 800128a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_TIM2_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_TIM2_Init+0x94>)
 8001298:	2209      	movs	r2, #9
 800129a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_TIM2_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM2_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a8:	4813      	ldr	r0, [pc, #76]	@ (80012f8 <MX_TIM2_Init+0x94>)
 80012aa:	f001 ff31 	bl	8003110 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b4:	f000 f9b6 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <MX_TIM2_Init+0x94>)
 80012c6:	f002 f8d3 	bl	8003470 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 f9a8 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_TIM2_Init+0x94>)
 80012e2:	f002 fafb 	bl	80038dc <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f99a 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000cc 	.word	0x200000cc

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f002 fb62 	bl	80039fc <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f971 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000114 	.word	0x20000114
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4ba3      	ldr	r3, [pc, #652]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4aa2      	ldr	r2, [pc, #648]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4ba0      	ldr	r3, [pc, #640]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	4b9c      	ldr	r3, [pc, #624]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a9b      	ldr	r2, [pc, #620]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b99      	ldr	r3, [pc, #612]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b95      	ldr	r3, [pc, #596]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b92      	ldr	r3, [pc, #584]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b8e      	ldr	r3, [pc, #568]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a8d      	ldr	r2, [pc, #564]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b8b      	ldr	r3, [pc, #556]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b87      	ldr	r3, [pc, #540]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a86      	ldr	r2, [pc, #536]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b84      	ldr	r3, [pc, #528]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b80      	ldr	r3, [pc, #512]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a7f      	ldr	r2, [pc, #508]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b7d      	ldr	r3, [pc, #500]	@ (80015f8 <MX_GPIO_Init+0x2a8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|E4_Led1_G_Pin|E5_Led1_Y_Pin|E6_Led1_R_Pin
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8001414:	4879      	ldr	r0, [pc, #484]	@ (80015fc <MX_GPIO_Init+0x2ac>)
 8001416:	f001 f9c9 	bl	80027ac <HAL_GPIO_WritePin>
                          |E7_Led2_G_Pin|E8_Led2_Y_Pin|E9_Led2_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2101      	movs	r1, #1
 800141e:	4878      	ldr	r0, [pc, #480]	@ (8001600 <MX_GPIO_Init+0x2b0>)
 8001420:	f001 f9c4 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001424:	2200      	movs	r2, #0
 8001426:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800142a:	4876      	ldr	r0, [pc, #472]	@ (8001604 <MX_GPIO_Init+0x2b4>)
 800142c:	f001 f9be 	bl	80027ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin E4_Led1_G_Pin E5_Led1_Y_Pin E6_Led1_R_Pin
                           E7_Led2_G_Pin E8_Led2_Y_Pin E9_Led2_R_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|E4_Led1_G_Pin|E5_Led1_Y_Pin|E6_Led1_R_Pin
 8001430:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001434:	61fb      	str	r3, [r7, #28]
                          |E7_Led2_G_Pin|E8_Led2_Y_Pin|E9_Led2_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	486c      	ldr	r0, [pc, #432]	@ (80015fc <MX_GPIO_Init+0x2ac>)
 800144a:	f000 fffb 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800144e:	2301      	movs	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4866      	ldr	r0, [pc, #408]	@ (8001600 <MX_GPIO_Init+0x2b0>)
 8001466:	f000 ffed 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800146a:	2308      	movs	r3, #8
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147a:	2305      	movs	r3, #5
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	485e      	ldr	r0, [pc, #376]	@ (8001600 <MX_GPIO_Init+0x2b0>)
 8001486:	f000 ffdd 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	485a      	ldr	r0, [pc, #360]	@ (8001608 <MX_GPIO_Init+0x2b8>)
 80014a0:	f000 ffd0 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014a4:	2310      	movs	r3, #16
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b4:	2306      	movs	r3, #6
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4852      	ldr	r0, [pc, #328]	@ (8001608 <MX_GPIO_Init+0x2b8>)
 80014c0:	f000 ffc0 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014c4:	23e0      	movs	r3, #224	@ 0xe0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d4:	2305      	movs	r3, #5
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	484a      	ldr	r0, [pc, #296]	@ (8001608 <MX_GPIO_Init+0x2b8>)
 80014e0:	f000 ffb0 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin B4_Btn1_Pin B5_Btn2_Pin B6_Btn3_Pin
                           B7_Btn4_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin|B4_Btn1_Pin|B5_Btn2_Pin|B6_Btn3_Pin
 80014e4:	23f4      	movs	r3, #244	@ 0xf4
 80014e6:	61fb      	str	r3, [r7, #28]
                          |B7_Btn4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4845      	ldr	r0, [pc, #276]	@ (800160c <MX_GPIO_Init+0x2bc>)
 80014f8:	f000 ffa4 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800150e:	2305      	movs	r3, #5
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	483c      	ldr	r0, [pc, #240]	@ (800160c <MX_GPIO_Init+0x2bc>)
 800151a:	f000 ff93 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800151e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001522:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4833      	ldr	r0, [pc, #204]	@ (8001604 <MX_GPIO_Init+0x2b4>)
 8001538:	f000 ff84 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800153c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154e:	2306      	movs	r3, #6
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4829      	ldr	r0, [pc, #164]	@ (8001600 <MX_GPIO_Init+0x2b0>)
 800155a:	f000 ff73 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800155e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4825      	ldr	r0, [pc, #148]	@ (8001608 <MX_GPIO_Init+0x2b8>)
 8001574:	f000 ff66 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001578:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800158a:	230a      	movs	r3, #10
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	481c      	ldr	r0, [pc, #112]	@ (8001608 <MX_GPIO_Init+0x2b8>)
 8001596:	f000 ff55 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800159a:	2320      	movs	r3, #32
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4815      	ldr	r0, [pc, #84]	@ (8001604 <MX_GPIO_Init+0x2b4>)
 80015ae:	f000 ff49 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80015b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c4:	2304      	movs	r3, #4
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <MX_GPIO_Init+0x2bc>)
 80015d0:	f000 ff38 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <MX_GPIO_Init+0x2ac>)
 80015ea:	f000 ff2b 	bl	8002444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	@ 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001618:	f000 f80a 	bl	8001630 <SCH_Update>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <SCH_Update>:

        SCH_tasks_G[i].TaskID = -1;
    }
}

void SCH_Update(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SCH_Update+0x48>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <SCH_Update+0x48>)
 800163c:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <SCH_Update+0x4c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d013      	beq.n	800166e <SCH_Update+0x3e>
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <SCH_Update+0x4c>)
 8001648:	7b1b      	ldrb	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10f      	bne.n	800166e <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <SCH_Update+0x4c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay -= 1;
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <SCH_Update+0x4c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <SCH_Update+0x4c>)
 800165e:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <SCH_Update+0x4c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <SCH_Update+0x4c>)
 800166a:	2201      	movs	r2, #1
 800166c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000234 	.word	0x20000234
 800167c:	20000168 	.word	0x20000168

08001680 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	e133      	b.n	8001906 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 800169e:	7ffa      	ldrb	r2, [r7, #31]
 80016a0:	49a1      	ldr	r1, [pc, #644]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3304      	adds	r3, #4
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4413      	add	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
		if (sumDelay > DELAY) {
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	f240 80c1 	bls.w	8001842 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80016c0:	7ffa      	ldrb	r2, [r7, #31]
 80016c2:	4999      	ldr	r1, [pc, #612]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3304      	adds	r3, #4
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	4413      	add	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80016dc:	7ffa      	ldrb	r2, [r7, #31]
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1ac9      	subs	r1, r1, r3
 80016e4:	4890      	ldr	r0, [pc, #576]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	3304      	adds	r3, #4
 80016f2:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80016f4:	2309      	movs	r3, #9
 80016f6:	75fb      	strb	r3, [r7, #23]
 80016f8:	e04c      	b.n	8001794 <SCH_Add_Task+0x114>
				SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	1e59      	subs	r1, r3, #1
 80016fe:	7dfa      	ldrb	r2, [r7, #23]
 8001700:	4889      	ldr	r0, [pc, #548]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	4886      	ldr	r0, [pc, #536]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4403      	add	r3, r0
 800171a:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	1e59      	subs	r1, r3, #1
 8001720:	7dfa      	ldrb	r2, [r7, #23]
 8001722:	4881      	ldr	r0, [pc, #516]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4403      	add	r3, r0
 800172e:	3308      	adds	r3, #8
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	487d      	ldr	r0, [pc, #500]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4403      	add	r3, r0
 800173e:	3308      	adds	r3, #8
 8001740:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	1e59      	subs	r1, r3, #1
 8001746:	7dfa      	ldrb	r2, [r7, #23]
 8001748:	4877      	ldr	r0, [pc, #476]	@ (8001928 <SCH_Add_Task+0x2a8>)
 800174a:	460b      	mov	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4403      	add	r3, r0
 8001754:	3304      	adds	r3, #4
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	4873      	ldr	r0, [pc, #460]	@ (8001928 <SCH_Add_Task+0x2a8>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	3304      	adds	r3, #4
 8001766:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	1e59      	subs	r1, r3, #1
 800176c:	7dfa      	ldrb	r2, [r7, #23]
 800176e:	486e      	ldr	r0, [pc, #440]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3310      	adds	r3, #16
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	486a      	ldr	r0, [pc, #424]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4403      	add	r3, r0
 800178a:	3310      	adds	r3, #16
 800178c:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	3b01      	subs	r3, #1
 8001792:	75fb      	strb	r3, [r7, #23]
 8001794:	7dfa      	ldrb	r2, [r7, #23]
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8ae      	bhi.n	80016fa <SCH_Add_Task+0x7a>
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 800179c:	7ffa      	ldrb	r2, [r7, #31]
 800179e:	4962      	ldr	r1, [pc, #392]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80017ae:	7ffa      	ldrb	r2, [r7, #31]
 80017b0:	495d      	ldr	r1, [pc, #372]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3304      	adds	r3, #4
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80017c2:	7ffa      	ldrb	r2, [r7, #31]
 80017c4:	4958      	ldr	r1, [pc, #352]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3308      	adds	r3, #8
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
			if (SCH_tasks_G[newTaskIndex].Delay == 0) {
 80017d6:	7ffa      	ldrb	r2, [r7, #31]
 80017d8:	4953      	ldr	r1, [pc, #332]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10a      	bne.n	8001802 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80017ec:	7ffa      	ldrb	r2, [r7, #31]
 80017ee:	494e      	ldr	r1, [pc, #312]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e009      	b.n	8001816 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001802:	7ffa      	ldrb	r2, [r7, #31]
 8001804:	4948      	ldr	r1, [pc, #288]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	330c      	adds	r3, #12
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001816:	7ffc      	ldrb	r4, [r7, #31]
 8001818:	f000 f9a6 	bl	8001b68 <Get_New_Task_ID>
 800181c:	4602      	mov	r2, r0
 800181e:	4942      	ldr	r1, [pc, #264]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001820:	4623      	mov	r3, r4
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4423      	add	r3, r4
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	3310      	adds	r3, #16
 800182c:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 800182e:	7ffa      	ldrb	r2, [r7, #31]
 8001830:	493d      	ldr	r1, [pc, #244]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3310      	adds	r3, #16
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e06e      	b.n	8001920 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8001842:	7ffa      	ldrb	r2, [r7, #31]
 8001844:	4938      	ldr	r1, [pc, #224]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d154      	bne.n	8001900 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001856:	7ffa      	ldrb	r2, [r7, #31]
 8001858:	4933      	ldr	r1, [pc, #204]	@ (8001928 <SCH_Add_Task+0x2a8>)
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001868:	7ffa      	ldrb	r2, [r7, #31]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	1ac9      	subs	r1, r1, r3
 8001870:	482d      	ldr	r0, [pc, #180]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4403      	add	r3, r0
 800187c:	3304      	adds	r3, #4
 800187e:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001880:	7ffa      	ldrb	r2, [r7, #31]
 8001882:	4929      	ldr	r1, [pc, #164]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3308      	adds	r3, #8
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001894:	7ffa      	ldrb	r2, [r7, #31]
 8001896:	4924      	ldr	r1, [pc, #144]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80018aa:	7ffa      	ldrb	r2, [r7, #31]
 80018ac:	491e      	ldr	r1, [pc, #120]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	330c      	adds	r3, #12
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e009      	b.n	80018d4 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 80018c0:	7ffa      	ldrb	r2, [r7, #31]
 80018c2:	4919      	ldr	r1, [pc, #100]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	330c      	adds	r3, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80018d4:	7ffc      	ldrb	r4, [r7, #31]
 80018d6:	f000 f947 	bl	8001b68 <Get_New_Task_ID>
 80018da:	4602      	mov	r2, r0
 80018dc:	4912      	ldr	r1, [pc, #72]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80018de:	4623      	mov	r3, r4
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4423      	add	r3, r4
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3310      	adds	r3, #16
 80018ea:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80018ec:	7ffa      	ldrb	r2, [r7, #31]
 80018ee:	490e      	ldr	r1, [pc, #56]	@ (8001928 <SCH_Add_Task+0x2a8>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3310      	adds	r3, #16
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e00f      	b.n	8001920 <SCH_Add_Task+0x2a0>
	for (newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex++) {
 8001900:	7ffb      	ldrb	r3, [r7, #31]
 8001902:	3301      	adds	r3, #1
 8001904:	77fb      	strb	r3, [r7, #31]
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b09      	cmp	r3, #9
 800190a:	f67f aec8 	bls.w	800169e <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 800190e:	7ffa      	ldrb	r2, [r7, #31]
 8001910:	4905      	ldr	r1, [pc, #20]	@ (8001928 <SCH_Add_Task+0x2a8>)
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3310      	adds	r3, #16
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3724      	adds	r7, #36	@ 0x24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}
 8001928:	20000168 	.word	0x20000168

0800192c <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID){
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80e2 	beq.w	8001b04 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e0da      	b.n	8001afc <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	4972      	ldr	r1, [pc, #456]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3310      	adds	r3, #16
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	f040 80cb 	bne.w	8001af6 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d02b      	beq.n	80019c2 <SCH_Delete_Task+0x96>
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d828      	bhi.n	80019c2 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	4967      	ldr	r1, [pc, #412]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01d      	beq.n	80019c2 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4962      	ldr	r1, [pc, #392]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3304      	adds	r3, #4
 8001998:	6819      	ldr	r1, [r3, #0]
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	485d      	ldr	r0, [pc, #372]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4403      	add	r3, r0
 80019a8:	3304      	adds	r3, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	3201      	adds	r2, #1
 80019b0:	4419      	add	r1, r3
 80019b2:	4858      	ldr	r0, [pc, #352]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4403      	add	r3, r0
 80019be:	3304      	adds	r3, #4
 80019c0:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	73bb      	strb	r3, [r7, #14]
 80019c6:	e060      	b.n	8001a8a <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	1c59      	adds	r1, r3, #1
 80019cc:	7bba      	ldrb	r2, [r7, #14]
 80019ce:	4851      	ldr	r0, [pc, #324]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	484d      	ldr	r0, [pc, #308]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4403      	add	r3, r0
 80019e8:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	7bba      	ldrb	r2, [r7, #14]
 80019f0:	4848      	ldr	r0, [pc, #288]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 80019f2:	460b      	mov	r3, r1
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	3308      	adds	r3, #8
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4844      	ldr	r0, [pc, #272]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001a10:	7bbb      	ldrb	r3, [r7, #14]
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	7bba      	ldrb	r2, [r7, #14]
 8001a16:	483f      	ldr	r0, [pc, #252]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4403      	add	r3, r0
 8001a22:	3304      	adds	r3, #4
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	483b      	ldr	r0, [pc, #236]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4403      	add	r3, r0
 8001a32:	3304      	adds	r3, #4
 8001a34:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	1c59      	adds	r1, r3, #1
 8001a3a:	7bba      	ldrb	r2, [r7, #14]
 8001a3c:	4835      	ldr	r0, [pc, #212]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a3e:	460b      	mov	r3, r1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4403      	add	r3, r0
 8001a48:	330c      	adds	r3, #12
 8001a4a:	7818      	ldrb	r0, [r3, #0]
 8001a4c:	4931      	ldr	r1, [pc, #196]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	330c      	adds	r3, #12
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001a5e:	7bbb      	ldrb	r3, [r7, #14]
 8001a60:	1c59      	adds	r1, r3, #1
 8001a62:	7bba      	ldrb	r2, [r7, #14]
 8001a64:	482b      	ldr	r0, [pc, #172]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a66:	460b      	mov	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4403      	add	r3, r0
 8001a70:	3310      	adds	r3, #16
 8001a72:	6819      	ldr	r1, [r3, #0]
 8001a74:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4403      	add	r3, r0
 8001a80:	3310      	adds	r3, #16
 8001a82:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	3301      	adds	r3, #1
 8001a88:	73bb      	strb	r3, [r7, #14]
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d99b      	bls.n	80019c8 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8001a90:	7bba      	ldrb	r2, [r7, #14]
 8001a92:	4920      	ldr	r1, [pc, #128]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8001aa2:	7bba      	ldrb	r2, [r7, #14]
 8001aa4:	491b      	ldr	r1, [pc, #108]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001ab6:	7bba      	ldrb	r2, [r7, #14]
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001aca:	7bba      	ldrb	r2, [r7, #14]
 8001acc:	4911      	ldr	r1, [pc, #68]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	330c      	adds	r3, #12
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001ade:	7bba      	ldrb	r2, [r7, #14]
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <SCH_Delete_Task+0x1e8>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3310      	adds	r3, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001af2:	7b7b      	ldrb	r3, [r7, #13]
 8001af4:	e007      	b.n	8001b06 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	3301      	adds	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	f67f af21 	bls.w	8001946 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code;
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000168 	.word	0x20000168

08001b18 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <SCH_Dispatch_Tasks+0x4c>)
 8001b20:	7b1b      	ldrb	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d019      	beq.n	8001b5a <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <SCH_Dispatch_Tasks+0x4c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <SCH_Dispatch_Tasks+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <SCH_Dispatch_Tasks+0x4c>)
 8001b34:	1d3c      	adds	r4, r7, #4
 8001b36:	461d      	mov	r5, r3
 8001b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fef2 	bl	800192c <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fd93 	bl	8001680 <SCH_Add_Task>
		}
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000168 	.word	0x20000168

08001b68 <Get_New_Task_ID>:

uint32_t Get_New_Task_ID(void){
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	newTaskID++;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b74:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d104      	bne.n	8001b88 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b86:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <Get_New_Task_ID+0x30>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000230 	.word	0x20000230

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bda:	2007      	movs	r0, #7
 8001bdc:	f000 fb5e 	bl	800229c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d115      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_TIM_Base_MspInit+0x48>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 fb47 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f000 fb60 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	@ 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <HAL_UART_MspInit+0x94>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d133      	bne.n	8001cc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <HAL_UART_MspInit+0x98>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4809      	ldr	r0, [pc, #36]	@ (8001cd4 <HAL_UART_MspInit+0x9c>)
 8001cae:	f000 fbc9 	bl	8002444 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2026      	movs	r0, #38	@ 0x26
 8001cb8:	f000 fafb 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cbc:	2026      	movs	r0, #38	@ 0x26
 8001cbe:	f000 fb14 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	@ 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <NMI_Handler+0x4>

08001ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <MemManage_Handler+0x4>

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <UsageFault_Handler+0x4>

08001d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2e:	f000 f9b5 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <TIM2_IRQHandler+0x10>)
 8001d3e:	f001 faa7 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000cc 	.word	0x200000cc

08001d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <USART2_IRQHandler+0x10>)
 8001d52:	f001 ff53 	bl	8003bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000114 	.word	0x20000114

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f002 fede 	bl	8004b50 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000238 	.word	0x20000238
 8001dc8:	200003c0 	.word	0x200003c0

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <setTimer1>:
void setTimer0(int duration) {
	timer0_counter = duration/TIMER_CYCLE;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <setTimer1+0x28>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e02:	4a06      	ldr	r2, [pc, #24]	@ (8001e1c <setTimer1+0x2c>)
 8001e04:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <setTimer1+0x30>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000030 	.word	0x20000030
 8001e1c:	20000240 	.word	0x20000240
 8001e20:	2000025c 	.word	0x2000025c

08001e24 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <setTimer4+0x28>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e36:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <setTimer4+0x2c>)
 8001e38:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <setTimer4+0x30>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000030 	.word	0x20000030
 8001e50:	2000024c 	.word	0x2000024c
 8001e54:	20000268 	.word	0x20000268

08001e58 <timer_run>:
void setTimer6(int duration) {
	timer6_counter = duration/TIMER_CYCLE;
	timer6_flag = 0;
}

void timer_run() {
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f48 <timer_run+0xf0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	dd0b      	ble.n	8001e7c <timer_run+0x24>
		timer0_counter--;
 8001e64:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <timer_run+0xf0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a37      	ldr	r2, [pc, #220]	@ (8001f48 <timer_run+0xf0>)
 8001e6c:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 8001e6e:	4b36      	ldr	r3, [pc, #216]	@ (8001f48 <timer_run+0xf0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <timer_run+0x24>
 8001e76:	4b35      	ldr	r3, [pc, #212]	@ (8001f4c <timer_run+0xf4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
	}
	if (timer1_counter > 0) {
 8001e7c:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <timer_run+0xf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dd0b      	ble.n	8001e9c <timer_run+0x44>
		timer1_counter--;
 8001e84:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <timer_run+0xf8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <timer_run+0xf8>)
 8001e8c:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 8001e8e:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <timer_run+0xf8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <timer_run+0x44>
 8001e96:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <timer_run+0xfc>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <timer_run+0x100>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd0b      	ble.n	8001ebc <timer_run+0x64>
		timer2_counter--;
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <timer_run+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8001f58 <timer_run+0x100>)
 8001eac:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <timer_run+0x100>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <timer_run+0x64>
 8001eb6:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <timer_run+0x104>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <timer_run+0x108>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd0b      	ble.n	8001edc <timer_run+0x84>
		timer3_counter--;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <timer_run+0x108>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a25      	ldr	r2, [pc, #148]	@ (8001f60 <timer_run+0x108>)
 8001ecc:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <timer_run+0x108>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <timer_run+0x84>
 8001ed6:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <timer_run+0x10c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <timer_run+0x110>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dd0b      	ble.n	8001efc <timer_run+0xa4>
		timer4_counter--;
 8001ee4:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <timer_run+0x110>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <timer_run+0x110>)
 8001eec:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <timer_run+0x110>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <timer_run+0xa4>
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <timer_run+0x114>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
	}
	if (timer5_counter > 0) {
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <timer_run+0x118>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dd0b      	ble.n	8001f1c <timer_run+0xc4>
		timer5_counter--;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <timer_run+0x118>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <timer_run+0x118>)
 8001f0c:	6013      	str	r3, [r2, #0]
		if (timer5_counter == 0) timer5_flag = 1;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <timer_run+0x118>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <timer_run+0xc4>
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <timer_run+0x11c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
	}
	if (timer6_counter > 0) {
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <timer_run+0x120>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	dd0b      	ble.n	8001f3c <timer_run+0xe4>
		timer6_counter--;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <timer_run+0x120>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <timer_run+0x120>)
 8001f2c:	6013      	str	r3, [r2, #0]
		if (timer6_counter == 0) timer6_flag = 1;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <timer_run+0x120>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <timer_run+0xe4>
 8001f36:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <timer_run+0x124>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000023c 	.word	0x2000023c
 8001f4c:	20000258 	.word	0x20000258
 8001f50:	20000240 	.word	0x20000240
 8001f54:	2000025c 	.word	0x2000025c
 8001f58:	20000244 	.word	0x20000244
 8001f5c:	20000260 	.word	0x20000260
 8001f60:	20000248 	.word	0x20000248
 8001f64:	20000264 	.word	0x20000264
 8001f68:	2000024c 	.word	0x2000024c
 8001f6c:	20000268 	.word	0x20000268
 8001f70:	20000250 	.word	0x20000250
 8001f74:	2000026c 	.word	0x2000026c
 8001f78:	20000254 	.word	0x20000254
 8001f7c:	20000270 	.word	0x20000270

08001f80 <EXTI3_IRQHandler>:
	//NVIC init
	NVIC_SetPriority(EXTI3_IRQn, 0);
	NVIC_EnableIRQ(EXTI3_IRQn);
}

void EXTI3_IRQHandler(void){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	if((EXTI->PR & EXTI_PR_PR3_Msk) != 0){
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <EXTI3_IRQHandler+0x20>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <EXTI3_IRQHandler+0x1a>

		//clear pending
		EXTI->PR = EXTI_PR_PR3;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <EXTI3_IRQHandler+0x20>)
 8001f92:	2208      	movs	r2, #8
 8001f94:	615a      	str	r2, [r3, #20]

		//Exit sleep mode
		HAL_ResumeTick();
 8001f96:	f000 f8a1 	bl	80020dc <HAL_ResumeTick>

//		uint8_t str[] = "Wake\n";
//
//		HAL_UART_Transmit(&huart2,(uint8_t*) str, sizeof(str), HAL_MAX_DELAY);
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa8:	f7ff ff10 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f002 fdc3 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff f88d 	bl	80010f4 <main>
  bx  lr    
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001fe8:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8001fec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ff0:	200003c0 	.word	0x200003c0

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_Init+0x40>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <HAL_Init+0x40>)
 800200e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_Init+0x40>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f93b 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fdb6 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f953 	bl	8002306 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f91b 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000002c 	.word	0x2000002c
 8002094:	20000038 	.word	0x20000038
 8002098:	20000034 	.word	0x20000034

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000038 	.word	0x20000038
 80020c0:	20000274 	.word	0x20000274

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000274 	.word	0x20000274

080020dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_ResumeTick+0x1c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_ResumeTick+0x1c>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	@ (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	@ (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	@ (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff8e 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff29 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff3e 	bl	8002144 <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff8e 	bl	80021f0 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5d 	bl	800219c <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff31 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffa2 	bl	8002258 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff feca 	bl	80020c4 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d008      	beq.n	8002350 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e052      	b.n	80023f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0216 	bic.w	r2, r2, #22
 800235e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800236e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <HAL_DMA_Abort+0x62>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0208 	bic.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a0:	e013      	b.n	80023ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a2:	f7ff fe8f 	bl	80020c4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d90c      	bls.n	80023ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e015      	b.n	80023f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e4      	bne.n	80023a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	223f      	movs	r2, #63	@ 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2280      	movs	r2, #128	@ 0x80
 8002416:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00c      	b.n	8002436 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2205      	movs	r2, #5
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e16b      	b.n	8002738 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 815a 	bne.w	8002732 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b4 	beq.w	8002732 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_GPIO_Init+0x30c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002754 <HAL_GPIO_Init+0x310>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x226>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	@ (800275c <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x222>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	@ (8002760 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x21e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	@ (8002764 <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x21a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	@ (8002768 <HAL_GPIO_Init+0x324>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x216>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	@ (800276c <HAL_GPIO_Init+0x328>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x212>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	@ (8002770 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	@ (8002774 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x20a>
 800264a:	2307      	movs	r3, #7
 800264c:	e00e      	b.n	800266c <HAL_GPIO_Init+0x228>
 800264e:	2308      	movs	r3, #8
 8002650:	e00c      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002652:	2306      	movs	r3, #6
 8002654:	e00a      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x228>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	@ (8002754 <HAL_GPIO_Init+0x310>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b26      	ldr	r3, [pc, #152]	@ (8002778 <HAL_GPIO_Init+0x334>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_GPIO_Init+0x334>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f ae90 	bls.w	8002460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e001      	b.n	800279e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e267      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d075      	beq.n	80028ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fe:	4b88      	ldr	r3, [pc, #544]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00c      	beq.n	8002824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b85      	ldr	r3, [pc, #532]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d112      	bne.n	800283c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b82      	ldr	r3, [pc, #520]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002822:	d10b      	bne.n	800283c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	4b7e      	ldr	r3, [pc, #504]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05b      	beq.n	80028e8 <HAL_RCC_OscConfig+0x108>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d157      	bne.n	80028e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e242      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x74>
 8002846:	4b76      	ldr	r3, [pc, #472]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a75      	ldr	r2, [pc, #468]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x98>
 800285e:	4b70      	ldr	r3, [pc, #448]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6f      	ldr	r2, [pc, #444]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xb0>
 8002878:	4b69      	ldr	r3, [pc, #420]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a68      	ldr	r2, [pc, #416]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b66      	ldr	r3, [pc, #408]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a65      	ldr	r2, [pc, #404]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fc14 	bl	80020c4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fc10 	bl	80020c4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e207      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xc0>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff fc00 	bl	80020c4 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fbfc 	bl	80020c4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1f3      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	4b51      	ldr	r3, [pc, #324]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0xe8>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b47      	ldr	r3, [pc, #284]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290a:	2b08      	cmp	r3, #8
 800290c:	d11c      	bne.n	8002948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b44      	ldr	r3, [pc, #272]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d116      	bne.n	8002948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x152>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e1c7      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002932:	4b3b      	ldr	r3, [pc, #236]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4937      	ldr	r1, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	e03a      	b.n	80029be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <HAL_RCC_OscConfig+0x244>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7ff fbb5 	bl	80020c4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295e:	f7ff fbb1 	bl	80020c4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1a8      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	4b2b      	ldr	r3, [pc, #172]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297c:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4925      	ldr	r1, [pc, #148]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002992:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <HAL_RCC_OscConfig+0x244>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff fb94 	bl	80020c4 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff fb90 	bl	80020c4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e187      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d036      	beq.n	8002a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_RCC_OscConfig+0x248>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff fb74 	bl	80020c4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e0:	f7ff fb70 	bl	80020c4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e167      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_RCC_OscConfig+0x240>)
 80029f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x200>
 80029fe:	e01b      	b.n	8002a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_RCC_OscConfig+0x248>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7ff fb5d 	bl	80020c4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	e00e      	b.n	8002a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7ff fb59 	bl	80020c4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d907      	bls.n	8002a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e150      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
 8002a20:	40023800 	.word	0x40023800
 8002a24:	42470000 	.word	0x42470000
 8002a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ea      	bne.n	8002a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8097 	beq.w	8002b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b81      	ldr	r3, [pc, #516]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a66:	4b7a      	ldr	r3, [pc, #488]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b77      	ldr	r3, [pc, #476]	@ (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b74      	ldr	r3, [pc, #464]	@ (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a73      	ldr	r2, [pc, #460]	@ (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fb19 	bl	80020c4 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7ff fb15 	bl	80020c4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e10c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c54 <HAL_RCC_OscConfig+0x474>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x2ea>
 8002abc:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	4a63      	ldr	r2, [pc, #396]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x324>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x30c>
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ade:	4b5c      	ldr	r3, [pc, #368]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0x324>
 8002aec:	4b58      	ldr	r3, [pc, #352]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af0:	4a57      	ldr	r2, [pc, #348]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af8:	4b55      	ldr	r3, [pc, #340]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	4a54      	ldr	r2, [pc, #336]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d015      	beq.n	8002b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7ff fada 	bl	80020c4 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7ff fad6 	bl	80020c4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0cb      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	4b49      	ldr	r3, [pc, #292]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ee      	beq.n	8002b14 <HAL_RCC_OscConfig+0x334>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b38:	f7ff fac4 	bl	80020c4 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7ff fac0 	bl	80020c4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0b5      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ee      	bne.n	8002b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a1 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7e:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d05c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d141      	bne.n	8002c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fa94 	bl	80020c4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff fa90 	bl	80020c4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e087      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	491b      	ldr	r1, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7ff fa69 	bl	80020c4 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7ff fa65 	bl	80020c4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e05c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x416>
 8002c14:	e054      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_OscConfig+0x478>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff fa52 	bl	80020c4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c24:	f7ff fa4e 	bl	80020c4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e045      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_RCC_OscConfig+0x470>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x444>
 8002c42:	e03d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e038      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
 8002c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x4ec>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d121      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0cc      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b68      	ldr	r3, [pc, #416]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d90c      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b65      	ldr	r3, [pc, #404]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b63      	ldr	r3, [pc, #396]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0b8      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d24:	4b59      	ldr	r3, [pc, #356]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a58      	ldr	r2, [pc, #352]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d3c:	4b53      	ldr	r3, [pc, #332]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a52      	ldr	r2, [pc, #328]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b50      	ldr	r3, [pc, #320]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	494d      	ldr	r1, [pc, #308]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d044      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b47      	ldr	r3, [pc, #284]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d119      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e067      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b37      	ldr	r3, [pc, #220]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4934      	ldr	r1, [pc, #208]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7ff f980 	bl	80020c4 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7ff f97c 	bl	80020c4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e04f      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2b      	ldr	r3, [pc, #172]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d20c      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e032      	b.n	8002e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4916      	ldr	r1, [pc, #88]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	490e      	ldr	r1, [pc, #56]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e56:	f000 f821 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	490a      	ldr	r1, [pc, #40]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	5ccb      	ldrb	r3, [r1, r3]
 8002e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6e:	4a09      	ldr	r2, [pc, #36]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e72:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff f8e0 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023c00 	.word	0x40023c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	08005d74 	.word	0x08005d74
 8002e94:	2000002c 	.word	0x2000002c
 8002e98:	20000034 	.word	0x20000034

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea0:	b094      	sub	sp, #80	@ 0x50
 8002ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eac:	2300      	movs	r3, #0
 8002eae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb4:	4b79      	ldr	r3, [pc, #484]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d00d      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x40>
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	f200 80e1 	bhi.w	8003088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ece:	e0db      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	4b73      	ldr	r3, [pc, #460]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ed4:	e0db      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed6:	4b73      	ldr	r3, [pc, #460]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eda:	e0d8      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002edc:	4b6f      	ldr	r3, [pc, #444]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d063      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	2200      	movs	r2, #0
 8002efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f06:	2300      	movs	r3, #0
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0159      	lsls	r1, r3, #5
 8002f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f20:	0150      	lsls	r0, r2, #5
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4621      	mov	r1, r4
 8002f28:	1a51      	subs	r1, r2, r1
 8002f2a:	6139      	str	r1, [r7, #16]
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f40:	4659      	mov	r1, fp
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	4651      	mov	r1, sl
 8002f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	018a      	lsls	r2, r1, #6
 8002f4e:	4651      	mov	r1, sl
 8002f50:	ebb2 0801 	subs.w	r8, r2, r1
 8002f54:	4659      	mov	r1, fp
 8002f56:	eb63 0901 	sbc.w	r9, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f6e:	4690      	mov	r8, r2
 8002f70:	4699      	mov	r9, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb18 0303 	adds.w	r3, r8, r3
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	eb49 0303 	adc.w	r3, r9, r3
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	024b      	lsls	r3, r1, #9
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f98:	4621      	mov	r1, r4
 8002f9a:	024a      	lsls	r2, r1, #9
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fac:	f7fd f968 	bl	8000280 <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb8:	e058      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b38      	ldr	r3, [pc, #224]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	f04f 0000 	mov.w	r0, #0
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	0159      	lsls	r1, r3, #5
 8002fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe6:	0150      	lsls	r0, r2, #5
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4641      	mov	r1, r8
 8002fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800300c:	ebb2 040a 	subs.w	r4, r2, sl
 8003010:	eb63 050b 	sbc.w	r5, r3, fp
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	00eb      	lsls	r3, r5, #3
 800301e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003022:	00e2      	lsls	r2, r4, #3
 8003024:	4614      	mov	r4, r2
 8003026:	461d      	mov	r5, r3
 8003028:	4643      	mov	r3, r8
 800302a:	18e3      	adds	r3, r4, r3
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	464b      	mov	r3, r9
 8003030:	eb45 0303 	adc.w	r3, r5, r3
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003042:	4629      	mov	r1, r5
 8003044:	028b      	lsls	r3, r1, #10
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800304c:	4621      	mov	r1, r4
 800304e:	028a      	lsls	r2, r1, #10
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	61fa      	str	r2, [r7, #28]
 800305c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003060:	f7fd f90e 	bl	8000280 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	3301      	adds	r3, #1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800307c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800307e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003086:	e002      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800308a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003090:	4618      	mov	r0, r3
 8003092:	3750      	adds	r7, #80	@ 0x50
 8003094:	46bd      	mov	sp, r7
 8003096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	2000002c 	.word	0x2000002c

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08005d84 	.word	0x08005d84

080030e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030ec:	f7ff ffdc 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0b5b      	lsrs	r3, r3, #13
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	@ (800310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08005d84 	.word	0x08005d84

08003110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e041      	b.n	80031a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fd58 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f000 fa7e 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04e      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a23      	ldr	r2, [pc, #140]	@ (8003274 <HAL_TIM_Base_Start_IT+0xc4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d01d      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003278 <HAL_TIM_Base_Start_IT+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	@ (800327c <HAL_TIM_Base_Start_IT+0xcc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_TIM_Base_Start_IT+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_TIM_Base_Start_IT+0xd4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <HAL_TIM_Base_Start_IT+0xd8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a18      	ldr	r2, [pc, #96]	@ (800328c <HAL_TIM_Base_Start_IT+0xdc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d010      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e007      	b.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40010400 	.word	0x40010400
 8003288:	40014000 	.word	0x40014000
 800328c:	40001800 	.word	0x40001800

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f999 	bl	8003612 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f98b 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f99c 	bl	8003626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f973 	bl	8003612 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f965 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f976 	bl	8003626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f94d 	bl	8003612 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f93f 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f950 	bl	8003626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2208      	movs	r2, #8
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f927 	bl	8003612 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f919 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f92a 	bl	8003626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0201 	mvn.w	r2, #1
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f90a 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fae4 	bl	80039e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8fb 	bl	800363a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0220 	mvn.w	r2, #32
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fab6 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIM_ConfigClockSource+0x1c>
 8003488:	2302      	movs	r3, #2
 800348a:	e0b4      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x186>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034c4:	d03e      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0xd4>
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ca:	f200 8087 	bhi.w	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_TIM_ConfigClockSource+0x172>
 80034d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034da:	d87f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b70      	cmp	r3, #112	@ 0x70
 80034de:	d01a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0xa6>
 80034e0:	2b70      	cmp	r3, #112	@ 0x70
 80034e2:	d87b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034e4:	2b60      	cmp	r3, #96	@ 0x60
 80034e6:	d050      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x11a>
 80034e8:	2b60      	cmp	r3, #96	@ 0x60
 80034ea:	d877      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	2b50      	cmp	r3, #80	@ 0x50
 80034ee:	d03c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0xfa>
 80034f0:	2b50      	cmp	r3, #80	@ 0x50
 80034f2:	d873      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d058      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x13a>
 80034f8:	2b40      	cmp	r3, #64	@ 0x40
 80034fa:	d86f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b30      	cmp	r3, #48	@ 0x30
 80034fe:	d064      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003500:	2b30      	cmp	r3, #48	@ 0x30
 8003502:	d86b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d060      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d867      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05c      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d05a      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003514:	e062      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	f000 f9b9 	bl	800389c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	609a      	str	r2, [r3, #8]
      break;
 8003542:	e04f      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003554:	f000 f9a2 	bl	800389c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003566:	609a      	str	r2, [r3, #8]
      break;
 8003568:	e03c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f916 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2150      	movs	r1, #80	@ 0x50
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f96f 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 8003588:	e02c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f935 	bl	8003806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2160      	movs	r1, #96	@ 0x60
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f95f 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035a8:	e01c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 f8f6 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2140      	movs	r1, #64	@ 0x40
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f94f 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035c8:	e00c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 f946 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035da:	e003      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a43      	ldr	r2, [pc, #268]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a35      	ldr	r2, [pc, #212]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d027      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a32      	ldr	r2, [pc, #200]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d023      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01f      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a30      	ldr	r2, [pc, #192]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <TIM_Base_SetConfig+0x140>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <TIM_Base_SetConfig+0x144>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <TIM_Base_SetConfig+0x148>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <TIM_Base_SetConfig+0x14c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <TIM_Base_SetConfig+0x150>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <TIM_Base_SetConfig+0x154>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0xf8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d103      	bne.n	8003750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d105      	bne.n	800376e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
  }
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40001800 	.word	0x40001800
 80037a0:	40001c00 	.word	0x40001c00
 80037a4:	40002000 	.word	0x40002000

080037a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f023 030a 	bic.w	r3, r3, #10
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003806:	b480      	push	{r7}
 8003808:	b087      	sub	sp, #28
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 0210 	bic.w	r2, r3, #16
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	431a      	orrs	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e05a      	b.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d022      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003940:	d01d      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a18      	ldr	r2, [pc, #96]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40001800 	.word	0x40001800

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e042      	b.n	8003a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe f908 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fdbd 	bl	80045c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	@ 0x28
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d175      	bne.n	8003ba8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Transmit+0x2c>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e06e      	b.n	8003baa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	@ 0x21
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fe faf3 	bl	80020c4 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b10:	e02e      	b.n	8003b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	@ 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fb1f 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e03a      	b.n	8003baa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cb      	bne.n	8003b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	@ 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 faeb 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d112      	bne.n	8003bf2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_UART_Receive_IT+0x26>
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e00b      	b.n	8003bf4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fb12 	bl	8004212 <UART_Start_Receive_IT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	e000      	b.n	8003bf4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_UART_IRQHandler+0x66>
 8003c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fbf2 	bl	8004444 <UART_Receive_IT>
      return;
 8003c60:	e25b      	b.n	800411a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80de 	beq.w	8003e28 <HAL_UART_IRQHandler+0x22c>
 8003c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80d1 	beq.w	8003e28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_UART_IRQHandler+0xae>
 8003c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xd2>
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xf6>
 8003cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f043 0204 	orr.w	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d011      	beq.n	8003d22 <HAL_UART_IRQHandler+0x126>
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f043 0208 	orr.w	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 81f2 	beq.w	8004110 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_UART_IRQHandler+0x14e>
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fb7d 	bl	8004444 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_UART_IRQHandler+0x17a>
 8003d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04f      	beq.n	8003e16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa85 	bl	8004286 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d141      	bne.n	8003e0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3314      	adds	r3, #20
 8003db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003db6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1d9      	bne.n	8003d8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fdc <HAL_UART_IRQHandler+0x3e0>)
 8003de4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fb07 	bl	80023fe <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00e      	b.n	8003e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f994 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00a      	b.n	8003e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f990 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e006      	b.n	8003e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f98c 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e22:	e175      	b.n	8004110 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	bf00      	nop
    return;
 8003e26:	e173      	b.n	8004110 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 814f 	bne.w	80040d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8148 	beq.w	80040d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8141 	beq.w	80040d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	f040 80b6 	bne.w	8003fe0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8145 	beq.w	8004114 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e92:	429a      	cmp	r2, r3
 8003e94:	f080 813e 	bcs.w	8004114 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eaa:	f000 8088 	beq.w	8003fbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1d9      	bne.n	8003eae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e1      	bne.n	8003efa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8e:	f023 0310 	bic.w	r3, r3, #16
 8003f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e3      	bne.n	8003f7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe f9b0 	bl	800231e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8b7 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fda:	e09b      	b.n	8004114 <HAL_UART_IRQHandler+0x518>
 8003fdc:	0800434d 	.word	0x0800434d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 808e 	beq.w	8004118 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8089 	beq.w	8004118 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800401c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800402a:	647a      	str	r2, [r7, #68]	@ 0x44
 800402c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e3      	bne.n	8004006 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	623b      	str	r3, [r7, #32]
   return(result);
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004062:	633a      	str	r2, [r7, #48]	@ 0x30
 8004064:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	60fb      	str	r3, [r7, #12]
   return(result);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0310 	bic.w	r3, r3, #16
 800409a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040a8:	61fa      	str	r2, [r7, #28]
 80040aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	617b      	str	r3, [r7, #20]
   return(result);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e3      	bne.n	8004084 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f83d 	bl	8004148 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ce:	e023      	b.n	8004118 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_UART_IRQHandler+0x4f4>
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f943 	bl	8004374 <UART_Transmit_IT>
    return;
 80040ee:	e014      	b.n	800411a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <HAL_UART_IRQHandler+0x51e>
 80040fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f983 	bl	8004414 <UART_EndTransmit_IT>
    return;
 800410e:	e004      	b.n	800411a <HAL_UART_IRQHandler+0x51e>
    return;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_UART_IRQHandler+0x51e>
      return;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_UART_IRQHandler+0x51e>
      return;
 8004118:	bf00      	nop
  }
}
 800411a:	37e8      	adds	r7, #232	@ 0xe8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004170:	e03b      	b.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d037      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fd ffa3 	bl	80020c4 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <UART_WaitOnFlagUntilTimeout+0x30>
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03a      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b80      	cmp	r3, #128	@ 0x80
 80041a6:	d020      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d01d      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d116      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f857 	bl	8004286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2208      	movs	r2, #8
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00f      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d0b4      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	4613      	mov	r3, r2
 800421e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2222      	movs	r2, #34	@ 0x22
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004256:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0220 	orr.w	r2, r2, #32
 8004276:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004286:	b480      	push	{r7}
 8004288:	b095      	sub	sp, #84	@ 0x54
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e5      	bne.n	80042c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d119      	bne.n	8004332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60bb      	str	r3, [r7, #8]
   return(result);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0310 	bic.w	r3, r3, #16
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800431e:	61ba      	str	r2, [r7, #24]
 8004320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004340:	bf00      	nop
 8004342:	3754      	adds	r7, #84	@ 0x54
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fee4 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b21      	cmp	r3, #33	@ 0x21
 8004386:	d13e      	bne.n	8004406 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004390:	d114      	bne.n	80043bc <UART_Transmit_IT+0x48>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d110      	bne.n	80043bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	621a      	str	r2, [r3, #32]
 80043ba:	e008      	b.n	80043ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	1c59      	adds	r1, r3, #1
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6211      	str	r1, [r2, #32]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4619      	mov	r1, r3
 80043dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004400:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe73 	bl	8004120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	@ 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80ae 	bne.w	80045b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d117      	bne.n	8004494 <UART_Receive_IT+0x50>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	b29a      	uxth	r2, r3
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	@ 0x28
 8004492:	e026      	b.n	80044e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a6:	d007      	beq.n	80044b8 <UART_Receive_IT+0x74>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <UART_Receive_IT+0x82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e008      	b.n	80044d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4619      	mov	r1, r3
 80044f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d15d      	bne.n	80045b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0220 	bic.w	r2, r2, #32
 8004504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d135      	bne.n	80045a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	623a      	str	r2, [r7, #32]
 8004564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d10a      	bne.n	800459a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fdd1 	bl	8004148 <HAL_UARTEx_RxEventCallback>
 80045a6:	e002      	b.n	80045ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fd7b 	bl	80010a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e002      	b.n	80045b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3730      	adds	r7, #48	@ 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b0c0      	sub	sp, #256	@ 0x100
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	68d9      	ldr	r1, [r3, #12]
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	ea40 0301 	orr.w	r3, r0, r1
 80045e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004618:	f021 010c 	bic.w	r1, r1, #12
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004626:	430b      	orrs	r3, r1
 8004628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	6999      	ldr	r1, [r3, #24]
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	ea40 0301 	orr.w	r3, r0, r1
 8004646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b8f      	ldr	r3, [pc, #572]	@ (800488c <UART_SetConfig+0x2cc>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d005      	beq.n	8004660 <UART_SetConfig+0xa0>
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b8d      	ldr	r3, [pc, #564]	@ (8004890 <UART_SetConfig+0x2d0>)
 800465c:	429a      	cmp	r2, r3
 800465e:	d104      	bne.n	800466a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004660:	f7fe fd42 	bl	80030e8 <HAL_RCC_GetPCLK2Freq>
 8004664:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004668:	e003      	b.n	8004672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800466a:	f7fe fd29 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 800466e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800467c:	f040 810c 	bne.w	8004898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800468a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800468e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	1891      	adds	r1, r2, r2
 8004698:	65b9      	str	r1, [r7, #88]	@ 0x58
 800469a:	415b      	adcs	r3, r3
 800469c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800469e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046a2:	4621      	mov	r1, r4
 80046a4:	eb12 0801 	adds.w	r8, r2, r1
 80046a8:	4629      	mov	r1, r5
 80046aa:	eb43 0901 	adc.w	r9, r3, r1
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c2:	4690      	mov	r8, r2
 80046c4:	4699      	mov	r9, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	eb18 0303 	adds.w	r3, r8, r3
 80046cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046d0:	462b      	mov	r3, r5
 80046d2:	eb49 0303 	adc.w	r3, r9, r3
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046ee:	460b      	mov	r3, r1
 80046f0:	18db      	adds	r3, r3, r3
 80046f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f4:	4613      	mov	r3, r2
 80046f6:	eb42 0303 	adc.w	r3, r2, r3
 80046fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80046fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004704:	f7fb fdbc 	bl	8000280 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b61      	ldr	r3, [pc, #388]	@ (8004894 <UART_SetConfig+0x2d4>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	011c      	lsls	r4, r3, #4
 8004716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004720:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	1891      	adds	r1, r2, r2
 800472e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004730:	415b      	adcs	r3, r3
 8004732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004738:	4641      	mov	r1, r8
 800473a:	eb12 0a01 	adds.w	sl, r2, r1
 800473e:	4649      	mov	r1, r9
 8004740:	eb43 0b01 	adc.w	fp, r3, r1
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004758:	4692      	mov	sl, r2
 800475a:	469b      	mov	fp, r3
 800475c:	4643      	mov	r3, r8
 800475e:	eb1a 0303 	adds.w	r3, sl, r3
 8004762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004766:	464b      	mov	r3, r9
 8004768:	eb4b 0303 	adc.w	r3, fp, r3
 800476c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800477c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004784:	460b      	mov	r3, r1
 8004786:	18db      	adds	r3, r3, r3
 8004788:	643b      	str	r3, [r7, #64]	@ 0x40
 800478a:	4613      	mov	r3, r2
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	647b      	str	r3, [r7, #68]	@ 0x44
 8004792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800479a:	f7fb fd71 	bl	8000280 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <UART_SetConfig+0x2d4>)
 80047a6:	fba3 2301 	umull	r2, r3, r3, r1
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2264      	movs	r2, #100	@ 0x64
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	1acb      	subs	r3, r1, r3
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047ba:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <UART_SetConfig+0x2d4>)
 80047bc:	fba3 2302 	umull	r2, r3, r3, r2
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047c8:	441c      	add	r4, r3
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047e4:	415b      	adcs	r3, r3
 80047e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047ec:	4641      	mov	r1, r8
 80047ee:	1851      	adds	r1, r2, r1
 80047f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80047f2:	4649      	mov	r1, r9
 80047f4:	414b      	adcs	r3, r1
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004804:	4659      	mov	r1, fp
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4651      	mov	r1, sl
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4642      	mov	r2, r8
 800481a:	189b      	adds	r3, r3, r2
 800481c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004820:	464b      	mov	r3, r9
 8004822:	460a      	mov	r2, r1
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004838:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800483c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004840:	460b      	mov	r3, r1
 8004842:	18db      	adds	r3, r3, r3
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004846:	4613      	mov	r3, r2
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800484e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004856:	f7fb fd13 	bl	8000280 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <UART_SetConfig+0x2d4>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	2164      	movs	r1, #100	@ 0x64
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	3332      	adds	r3, #50	@ 0x32
 8004872:	4a08      	ldr	r2, [pc, #32]	@ (8004894 <UART_SetConfig+0x2d4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f003 0207 	and.w	r2, r3, #7
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4422      	add	r2, r4
 8004886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004888:	e106      	b.n	8004a98 <UART_SetConfig+0x4d8>
 800488a:	bf00      	nop
 800488c:	40011000 	.word	0x40011000
 8004890:	40011400 	.word	0x40011400
 8004894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489c:	2200      	movs	r2, #0
 800489e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048aa:	4642      	mov	r2, r8
 80048ac:	464b      	mov	r3, r9
 80048ae:	1891      	adds	r1, r2, r2
 80048b0:	6239      	str	r1, [r7, #32]
 80048b2:	415b      	adcs	r3, r3
 80048b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ba:	4641      	mov	r1, r8
 80048bc:	1854      	adds	r4, r2, r1
 80048be:	4649      	mov	r1, r9
 80048c0:	eb43 0501 	adc.w	r5, r3, r1
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	00eb      	lsls	r3, r5, #3
 80048ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048d2:	00e2      	lsls	r2, r4, #3
 80048d4:	4614      	mov	r4, r2
 80048d6:	461d      	mov	r5, r3
 80048d8:	4643      	mov	r3, r8
 80048da:	18e3      	adds	r3, r4, r3
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048e0:	464b      	mov	r3, r9
 80048e2:	eb45 0303 	adc.w	r3, r5, r3
 80048e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004906:	4629      	mov	r1, r5
 8004908:	008b      	lsls	r3, r1, #2
 800490a:	4621      	mov	r1, r4
 800490c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004910:	4621      	mov	r1, r4
 8004912:	008a      	lsls	r2, r1, #2
 8004914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004918:	f7fb fcb2 	bl	8000280 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4b60      	ldr	r3, [pc, #384]	@ (8004aa4 <UART_SetConfig+0x4e4>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011c      	lsls	r4, r3, #4
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004934:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	61b9      	str	r1, [r7, #24]
 8004944:	415b      	adcs	r3, r3
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800494c:	4641      	mov	r1, r8
 800494e:	1851      	adds	r1, r2, r1
 8004950:	6139      	str	r1, [r7, #16]
 8004952:	4649      	mov	r1, r9
 8004954:	414b      	adcs	r3, r1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004964:	4659      	mov	r1, fp
 8004966:	00cb      	lsls	r3, r1, #3
 8004968:	4651      	mov	r1, sl
 800496a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496e:	4651      	mov	r1, sl
 8004970:	00ca      	lsls	r2, r1, #3
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	4603      	mov	r3, r0
 8004978:	4642      	mov	r2, r8
 800497a:	189b      	adds	r3, r3, r2
 800497c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004980:	464b      	mov	r3, r9
 8004982:	460a      	mov	r2, r1
 8004984:	eb42 0303 	adc.w	r3, r2, r3
 8004988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004996:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049a4:	4649      	mov	r1, r9
 80049a6:	008b      	lsls	r3, r1, #2
 80049a8:	4641      	mov	r1, r8
 80049aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ae:	4641      	mov	r1, r8
 80049b0:	008a      	lsls	r2, r1, #2
 80049b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049b6:	f7fb fc63 	bl	8000280 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	4b38      	ldr	r3, [pc, #224]	@ (8004aa4 <UART_SetConfig+0x4e4>)
 80049c2:	fba3 2301 	umull	r2, r3, r3, r1
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2264      	movs	r2, #100	@ 0x64
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	3332      	adds	r3, #50	@ 0x32
 80049d4:	4a33      	ldr	r2, [pc, #204]	@ (8004aa4 <UART_SetConfig+0x4e4>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049e0:	441c      	add	r4, r3
 80049e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e6:	2200      	movs	r2, #0
 80049e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80049ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	415b      	adcs	r3, r3
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a32:	464b      	mov	r3, r9
 8004a34:	460a      	mov	r2, r1
 8004a36:	eb42 0303 	adc.w	r3, r2, r3
 8004a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a46:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a54:	4649      	mov	r1, r9
 8004a56:	008b      	lsls	r3, r1, #2
 8004a58:	4641      	mov	r1, r8
 8004a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a5e:	4641      	mov	r1, r8
 8004a60:	008a      	lsls	r2, r1, #2
 8004a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a66:	f7fb fc0b 	bl	8000280 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <UART_SetConfig+0x4e4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	@ 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3332      	adds	r3, #50	@ 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <UART_SetConfig+0x4e4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4422      	add	r2, r4
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa4:	51eb851f 	.word	0x51eb851f

08004aa8 <siprintf>:
 8004aa8:	b40e      	push	{r1, r2, r3}
 8004aaa:	b500      	push	{lr}
 8004aac:	b09c      	sub	sp, #112	@ 0x70
 8004aae:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ab0:	9002      	str	r0, [sp, #8]
 8004ab2:	9006      	str	r0, [sp, #24]
 8004ab4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ab8:	4809      	ldr	r0, [pc, #36]	@ (8004ae0 <siprintf+0x38>)
 8004aba:	9107      	str	r1, [sp, #28]
 8004abc:	9104      	str	r1, [sp, #16]
 8004abe:	4909      	ldr	r1, [pc, #36]	@ (8004ae4 <siprintf+0x3c>)
 8004ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ac4:	9105      	str	r1, [sp, #20]
 8004ac6:	6800      	ldr	r0, [r0, #0]
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	a902      	add	r1, sp, #8
 8004acc:	f000 f9c0 	bl	8004e50 <_svfiprintf_r>
 8004ad0:	9b02      	ldr	r3, [sp, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	b01c      	add	sp, #112	@ 0x70
 8004ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004adc:	b003      	add	sp, #12
 8004ade:	4770      	bx	lr
 8004ae0:	2000003c 	.word	0x2000003c
 8004ae4:	ffff0208 	.word	0xffff0208

08004ae8 <siscanf>:
 8004ae8:	b40e      	push	{r1, r2, r3}
 8004aea:	b530      	push	{r4, r5, lr}
 8004aec:	b09c      	sub	sp, #112	@ 0x70
 8004aee:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004af0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004af4:	f854 5b04 	ldr.w	r5, [r4], #4
 8004af8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	9006      	str	r0, [sp, #24]
 8004b00:	f7fb fb66 	bl	80001d0 <strlen>
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <siscanf+0x4c>)
 8004b06:	9003      	str	r0, [sp, #12]
 8004b08:	9007      	str	r0, [sp, #28]
 8004b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b0c:	480a      	ldr	r0, [pc, #40]	@ (8004b38 <siscanf+0x50>)
 8004b0e:	9401      	str	r4, [sp, #4]
 8004b10:	2300      	movs	r3, #0
 8004b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b14:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b1e:	462a      	mov	r2, r5
 8004b20:	4623      	mov	r3, r4
 8004b22:	a902      	add	r1, sp, #8
 8004b24:	6800      	ldr	r0, [r0, #0]
 8004b26:	f000 fae7 	bl	80050f8 <__ssvfiscanf_r>
 8004b2a:	b01c      	add	sp, #112	@ 0x70
 8004b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b30:	b003      	add	sp, #12
 8004b32:	4770      	bx	lr
 8004b34:	08004b3d 	.word	0x08004b3d
 8004b38:	2000003c 	.word	0x2000003c

08004b3c <__seofread>:
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	4770      	bx	lr

08004b40 <memset>:
 8004b40:	4402      	add	r2, r0
 8004b42:	4603      	mov	r3, r0
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d100      	bne.n	8004b4a <memset+0xa>
 8004b48:	4770      	bx	lr
 8004b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4e:	e7f9      	b.n	8004b44 <memset+0x4>

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	@ (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000003c 	.word	0x2000003c

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	@ (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f001 f8e0 	bl	8005d34 <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08005ee4 	.word	0x08005ee4
 8004b98:	08005ee4 	.word	0x08005ee4
 8004b9c:	08005ee4 	.word	0x08005ee4
 8004ba0:	08005ee8 	.word	0x08005ee8

08004ba4 <__retarget_lock_acquire_recursive>:
 8004ba4:	4770      	bx	lr

08004ba6 <__retarget_lock_release_recursive>:
 8004ba6:	4770      	bx	lr

08004ba8 <_free_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4605      	mov	r5, r0
 8004bac:	2900      	cmp	r1, #0
 8004bae:	d041      	beq.n	8004c34 <_free_r+0x8c>
 8004bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb4:	1f0c      	subs	r4, r1, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bfb8      	it	lt
 8004bba:	18e4      	addlt	r4, r4, r3
 8004bbc:	f000 f8e0 	bl	8004d80 <__malloc_lock>
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c38 <_free_r+0x90>)
 8004bc2:	6813      	ldr	r3, [r2, #0]
 8004bc4:	b933      	cbnz	r3, 8004bd4 <_free_r+0x2c>
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	6014      	str	r4, [r2, #0]
 8004bca:	4628      	mov	r0, r5
 8004bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd0:	f000 b8dc 	b.w	8004d8c <__malloc_unlock>
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	d908      	bls.n	8004bea <_free_r+0x42>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	1821      	adds	r1, r4, r0
 8004bdc:	428b      	cmp	r3, r1
 8004bde:	bf01      	itttt	eq
 8004be0:	6819      	ldreq	r1, [r3, #0]
 8004be2:	685b      	ldreq	r3, [r3, #4]
 8004be4:	1809      	addeq	r1, r1, r0
 8004be6:	6021      	streq	r1, [r4, #0]
 8004be8:	e7ed      	b.n	8004bc6 <_free_r+0x1e>
 8004bea:	461a      	mov	r2, r3
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b10b      	cbz	r3, 8004bf4 <_free_r+0x4c>
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	d9fa      	bls.n	8004bea <_free_r+0x42>
 8004bf4:	6811      	ldr	r1, [r2, #0]
 8004bf6:	1850      	adds	r0, r2, r1
 8004bf8:	42a0      	cmp	r0, r4
 8004bfa:	d10b      	bne.n	8004c14 <_free_r+0x6c>
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	4401      	add	r1, r0
 8004c00:	1850      	adds	r0, r2, r1
 8004c02:	4283      	cmp	r3, r0
 8004c04:	6011      	str	r1, [r2, #0]
 8004c06:	d1e0      	bne.n	8004bca <_free_r+0x22>
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	6053      	str	r3, [r2, #4]
 8004c0e:	4408      	add	r0, r1
 8004c10:	6010      	str	r0, [r2, #0]
 8004c12:	e7da      	b.n	8004bca <_free_r+0x22>
 8004c14:	d902      	bls.n	8004c1c <_free_r+0x74>
 8004c16:	230c      	movs	r3, #12
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	e7d6      	b.n	8004bca <_free_r+0x22>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	1821      	adds	r1, r4, r0
 8004c20:	428b      	cmp	r3, r1
 8004c22:	bf04      	itt	eq
 8004c24:	6819      	ldreq	r1, [r3, #0]
 8004c26:	685b      	ldreq	r3, [r3, #4]
 8004c28:	6063      	str	r3, [r4, #4]
 8004c2a:	bf04      	itt	eq
 8004c2c:	1809      	addeq	r1, r1, r0
 8004c2e:	6021      	streq	r1, [r4, #0]
 8004c30:	6054      	str	r4, [r2, #4]
 8004c32:	e7ca      	b.n	8004bca <_free_r+0x22>
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	200003bc 	.word	0x200003bc

08004c3c <sbrk_aligned>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c7c <sbrk_aligned+0x40>)
 8004c40:	460c      	mov	r4, r1
 8004c42:	6831      	ldr	r1, [r6, #0]
 8004c44:	4605      	mov	r5, r0
 8004c46:	b911      	cbnz	r1, 8004c4e <sbrk_aligned+0x12>
 8004c48:	f000 ff34 	bl	8005ab4 <_sbrk_r>
 8004c4c:	6030      	str	r0, [r6, #0]
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	f000 ff2f 	bl	8005ab4 <_sbrk_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	d103      	bne.n	8004c62 <sbrk_aligned+0x26>
 8004c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5e:	4620      	mov	r0, r4
 8004c60:	bd70      	pop	{r4, r5, r6, pc}
 8004c62:	1cc4      	adds	r4, r0, #3
 8004c64:	f024 0403 	bic.w	r4, r4, #3
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d0f8      	beq.n	8004c5e <sbrk_aligned+0x22>
 8004c6c:	1a21      	subs	r1, r4, r0
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 ff20 	bl	8005ab4 <_sbrk_r>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d1f2      	bne.n	8004c5e <sbrk_aligned+0x22>
 8004c78:	e7ef      	b.n	8004c5a <sbrk_aligned+0x1e>
 8004c7a:	bf00      	nop
 8004c7c:	200003b8 	.word	0x200003b8

08004c80 <_malloc_r>:
 8004c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c84:	1ccd      	adds	r5, r1, #3
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	4606      	mov	r6, r0
 8004c96:	db01      	blt.n	8004c9c <_malloc_r+0x1c>
 8004c98:	42a9      	cmp	r1, r5
 8004c9a:	d904      	bls.n	8004ca6 <_malloc_r+0x26>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	6033      	str	r3, [r6, #0]
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d7c <_malloc_r+0xfc>
 8004caa:	f000 f869 	bl	8004d80 <__malloc_lock>
 8004cae:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	bb44      	cbnz	r4, 8004d08 <_malloc_r+0x88>
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f7ff ffbf 	bl	8004c3c <sbrk_aligned>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	d158      	bne.n	8004d76 <_malloc_r+0xf6>
 8004cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8004cc8:	4627      	mov	r7, r4
 8004cca:	2f00      	cmp	r7, #0
 8004ccc:	d143      	bne.n	8004d56 <_malloc_r+0xd6>
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	d04b      	beq.n	8004d6a <_malloc_r+0xea>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	eb04 0903 	add.w	r9, r4, r3
 8004cdc:	f000 feea 	bl	8005ab4 <_sbrk_r>
 8004ce0:	4581      	cmp	r9, r0
 8004ce2:	d142      	bne.n	8004d6a <_malloc_r+0xea>
 8004ce4:	6821      	ldr	r1, [r4, #0]
 8004ce6:	1a6d      	subs	r5, r5, r1
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4630      	mov	r0, r6
 8004cec:	f7ff ffa6 	bl	8004c3c <sbrk_aligned>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d03a      	beq.n	8004d6a <_malloc_r+0xea>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	442b      	add	r3, r5
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	bb62      	cbnz	r2, 8004d5c <_malloc_r+0xdc>
 8004d02:	f8c8 7000 	str.w	r7, [r8]
 8004d06:	e00f      	b.n	8004d28 <_malloc_r+0xa8>
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	1b52      	subs	r2, r2, r5
 8004d0c:	d420      	bmi.n	8004d50 <_malloc_r+0xd0>
 8004d0e:	2a0b      	cmp	r2, #11
 8004d10:	d917      	bls.n	8004d42 <_malloc_r+0xc2>
 8004d12:	1961      	adds	r1, r4, r5
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	6059      	strne	r1, [r3, #4]
 8004d1c:	6863      	ldr	r3, [r4, #4]
 8004d1e:	bf08      	it	eq
 8004d20:	f8c8 1000 	streq.w	r1, [r8]
 8004d24:	5162      	str	r2, [r4, r5]
 8004d26:	604b      	str	r3, [r1, #4]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 f82f 	bl	8004d8c <__malloc_unlock>
 8004d2e:	f104 000b 	add.w	r0, r4, #11
 8004d32:	1d23      	adds	r3, r4, #4
 8004d34:	f020 0007 	bic.w	r0, r0, #7
 8004d38:	1ac2      	subs	r2, r0, r3
 8004d3a:	bf1c      	itt	ne
 8004d3c:	1a1b      	subne	r3, r3, r0
 8004d3e:	50a3      	strne	r3, [r4, r2]
 8004d40:	e7af      	b.n	8004ca2 <_malloc_r+0x22>
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	bf0c      	ite	eq
 8004d48:	f8c8 2000 	streq.w	r2, [r8]
 8004d4c:	605a      	strne	r2, [r3, #4]
 8004d4e:	e7eb      	b.n	8004d28 <_malloc_r+0xa8>
 8004d50:	4623      	mov	r3, r4
 8004d52:	6864      	ldr	r4, [r4, #4]
 8004d54:	e7ae      	b.n	8004cb4 <_malloc_r+0x34>
 8004d56:	463c      	mov	r4, r7
 8004d58:	687f      	ldr	r7, [r7, #4]
 8004d5a:	e7b6      	b.n	8004cca <_malloc_r+0x4a>
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d1fb      	bne.n	8004d5c <_malloc_r+0xdc>
 8004d64:	2300      	movs	r3, #0
 8004d66:	6053      	str	r3, [r2, #4]
 8004d68:	e7de      	b.n	8004d28 <_malloc_r+0xa8>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 f80c 	bl	8004d8c <__malloc_unlock>
 8004d74:	e794      	b.n	8004ca0 <_malloc_r+0x20>
 8004d76:	6005      	str	r5, [r0, #0]
 8004d78:	e7d6      	b.n	8004d28 <_malloc_r+0xa8>
 8004d7a:	bf00      	nop
 8004d7c:	200003bc 	.word	0x200003bc

08004d80 <__malloc_lock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	@ (8004d88 <__malloc_lock+0x8>)
 8004d82:	f7ff bf0f 	b.w	8004ba4 <__retarget_lock_acquire_recursive>
 8004d86:	bf00      	nop
 8004d88:	200003b4 	.word	0x200003b4

08004d8c <__malloc_unlock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	@ (8004d94 <__malloc_unlock+0x8>)
 8004d8e:	f7ff bf0a 	b.w	8004ba6 <__retarget_lock_release_recursive>
 8004d92:	bf00      	nop
 8004d94:	200003b4 	.word	0x200003b4

08004d98 <__ssputs_r>:
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	688e      	ldr	r6, [r1, #8]
 8004d9e:	461f      	mov	r7, r3
 8004da0:	42be      	cmp	r6, r7
 8004da2:	680b      	ldr	r3, [r1, #0]
 8004da4:	4682      	mov	sl, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4690      	mov	r8, r2
 8004daa:	d82d      	bhi.n	8004e08 <__ssputs_r+0x70>
 8004dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004db0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004db4:	d026      	beq.n	8004e04 <__ssputs_r+0x6c>
 8004db6:	6965      	ldr	r5, [r4, #20]
 8004db8:	6909      	ldr	r1, [r1, #16]
 8004dba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dbe:	eba3 0901 	sub.w	r9, r3, r1
 8004dc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dc6:	1c7b      	adds	r3, r7, #1
 8004dc8:	444b      	add	r3, r9
 8004dca:	106d      	asrs	r5, r5, #1
 8004dcc:	429d      	cmp	r5, r3
 8004dce:	bf38      	it	cc
 8004dd0:	461d      	movcc	r5, r3
 8004dd2:	0553      	lsls	r3, r2, #21
 8004dd4:	d527      	bpl.n	8004e26 <__ssputs_r+0x8e>
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7ff ff52 	bl	8004c80 <_malloc_r>
 8004ddc:	4606      	mov	r6, r0
 8004dde:	b360      	cbz	r0, 8004e3a <__ssputs_r+0xa2>
 8004de0:	6921      	ldr	r1, [r4, #16]
 8004de2:	464a      	mov	r2, r9
 8004de4:	f000 fe76 	bl	8005ad4 <memcpy>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	6126      	str	r6, [r4, #16]
 8004df6:	6165      	str	r5, [r4, #20]
 8004df8:	444e      	add	r6, r9
 8004dfa:	eba5 0509 	sub.w	r5, r5, r9
 8004dfe:	6026      	str	r6, [r4, #0]
 8004e00:	60a5      	str	r5, [r4, #8]
 8004e02:	463e      	mov	r6, r7
 8004e04:	42be      	cmp	r6, r7
 8004e06:	d900      	bls.n	8004e0a <__ssputs_r+0x72>
 8004e08:	463e      	mov	r6, r7
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	4641      	mov	r1, r8
 8004e10:	f000 fe35 	bl	8005a7e <memmove>
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	1b9b      	subs	r3, r3, r6
 8004e18:	60a3      	str	r3, [r4, #8]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4433      	add	r3, r6
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	2000      	movs	r0, #0
 8004e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e26:	462a      	mov	r2, r5
 8004e28:	f000 fe62 	bl	8005af0 <_realloc_r>
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d1e0      	bne.n	8004df4 <__ssputs_r+0x5c>
 8004e32:	6921      	ldr	r1, [r4, #16]
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7ff feb7 	bl	8004ba8 <_free_r>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	f8ca 3000 	str.w	r3, [sl]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	e7e9      	b.n	8004e22 <__ssputs_r+0x8a>
	...

08004e50 <_svfiprintf_r>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	4698      	mov	r8, r3
 8004e56:	898b      	ldrh	r3, [r1, #12]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	b09d      	sub	sp, #116	@ 0x74
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	460d      	mov	r5, r1
 8004e60:	4614      	mov	r4, r2
 8004e62:	d510      	bpl.n	8004e86 <_svfiprintf_r+0x36>
 8004e64:	690b      	ldr	r3, [r1, #16]
 8004e66:	b973      	cbnz	r3, 8004e86 <_svfiprintf_r+0x36>
 8004e68:	2140      	movs	r1, #64	@ 0x40
 8004e6a:	f7ff ff09 	bl	8004c80 <_malloc_r>
 8004e6e:	6028      	str	r0, [r5, #0]
 8004e70:	6128      	str	r0, [r5, #16]
 8004e72:	b930      	cbnz	r0, 8004e82 <_svfiprintf_r+0x32>
 8004e74:	230c      	movs	r3, #12
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b01d      	add	sp, #116	@ 0x74
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	2340      	movs	r3, #64	@ 0x40
 8004e84:	616b      	str	r3, [r5, #20]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e94:	2330      	movs	r3, #48	@ 0x30
 8004e96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005034 <_svfiprintf_r+0x1e4>
 8004e9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e9e:	f04f 0901 	mov.w	r9, #1
 8004ea2:	4623      	mov	r3, r4
 8004ea4:	469a      	mov	sl, r3
 8004ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eaa:	b10a      	cbz	r2, 8004eb0 <_svfiprintf_r+0x60>
 8004eac:	2a25      	cmp	r2, #37	@ 0x25
 8004eae:	d1f9      	bne.n	8004ea4 <_svfiprintf_r+0x54>
 8004eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb4:	d00b      	beq.n	8004ece <_svfiprintf_r+0x7e>
 8004eb6:	465b      	mov	r3, fp
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff ff6b 	bl	8004d98 <__ssputs_r>
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f000 80a7 	beq.w	8005016 <_svfiprintf_r+0x1c6>
 8004ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eca:	445a      	add	r2, fp
 8004ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ece:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 809f 	beq.w	8005016 <_svfiprintf_r+0x1c6>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f04f 32ff 	mov.w	r2, #4294967295
 8004ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee2:	f10a 0a01 	add.w	sl, sl, #1
 8004ee6:	9304      	str	r3, [sp, #16]
 8004ee8:	9307      	str	r3, [sp, #28]
 8004eea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eee:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ef0:	4654      	mov	r4, sl
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef8:	484e      	ldr	r0, [pc, #312]	@ (8005034 <_svfiprintf_r+0x1e4>)
 8004efa:	f7fb f971 	bl	80001e0 <memchr>
 8004efe:	9a04      	ldr	r2, [sp, #16]
 8004f00:	b9d8      	cbnz	r0, 8004f3a <_svfiprintf_r+0xea>
 8004f02:	06d0      	lsls	r0, r2, #27
 8004f04:	bf44      	itt	mi
 8004f06:	2320      	movmi	r3, #32
 8004f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f0c:	0711      	lsls	r1, r2, #28
 8004f0e:	bf44      	itt	mi
 8004f10:	232b      	movmi	r3, #43	@ 0x2b
 8004f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f16:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f1c:	d015      	beq.n	8004f4a <_svfiprintf_r+0xfa>
 8004f1e:	9a07      	ldr	r2, [sp, #28]
 8004f20:	4654      	mov	r4, sl
 8004f22:	2000      	movs	r0, #0
 8004f24:	f04f 0c0a 	mov.w	ip, #10
 8004f28:	4621      	mov	r1, r4
 8004f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2e:	3b30      	subs	r3, #48	@ 0x30
 8004f30:	2b09      	cmp	r3, #9
 8004f32:	d94b      	bls.n	8004fcc <_svfiprintf_r+0x17c>
 8004f34:	b1b0      	cbz	r0, 8004f64 <_svfiprintf_r+0x114>
 8004f36:	9207      	str	r2, [sp, #28]
 8004f38:	e014      	b.n	8004f64 <_svfiprintf_r+0x114>
 8004f3a:	eba0 0308 	sub.w	r3, r0, r8
 8004f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f42:	4313      	orrs	r3, r2
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	46a2      	mov	sl, r4
 8004f48:	e7d2      	b.n	8004ef0 <_svfiprintf_r+0xa0>
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	1d19      	adds	r1, r3, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	9103      	str	r1, [sp, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bfbb      	ittet	lt
 8004f56:	425b      	neglt	r3, r3
 8004f58:	f042 0202 	orrlt.w	r2, r2, #2
 8004f5c:	9307      	strge	r3, [sp, #28]
 8004f5e:	9307      	strlt	r3, [sp, #28]
 8004f60:	bfb8      	it	lt
 8004f62:	9204      	strlt	r2, [sp, #16]
 8004f64:	7823      	ldrb	r3, [r4, #0]
 8004f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f68:	d10a      	bne.n	8004f80 <_svfiprintf_r+0x130>
 8004f6a:	7863      	ldrb	r3, [r4, #1]
 8004f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f6e:	d132      	bne.n	8004fd6 <_svfiprintf_r+0x186>
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	1d1a      	adds	r2, r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	9203      	str	r2, [sp, #12]
 8004f78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f7c:	3402      	adds	r4, #2
 8004f7e:	9305      	str	r3, [sp, #20]
 8004f80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005044 <_svfiprintf_r+0x1f4>
 8004f84:	7821      	ldrb	r1, [r4, #0]
 8004f86:	2203      	movs	r2, #3
 8004f88:	4650      	mov	r0, sl
 8004f8a:	f7fb f929 	bl	80001e0 <memchr>
 8004f8e:	b138      	cbz	r0, 8004fa0 <_svfiprintf_r+0x150>
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	eba0 000a 	sub.w	r0, r0, sl
 8004f96:	2240      	movs	r2, #64	@ 0x40
 8004f98:	4082      	lsls	r2, r0
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	3401      	adds	r4, #1
 8004f9e:	9304      	str	r3, [sp, #16]
 8004fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa4:	4824      	ldr	r0, [pc, #144]	@ (8005038 <_svfiprintf_r+0x1e8>)
 8004fa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004faa:	2206      	movs	r2, #6
 8004fac:	f7fb f918 	bl	80001e0 <memchr>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d036      	beq.n	8005022 <_svfiprintf_r+0x1d2>
 8004fb4:	4b21      	ldr	r3, [pc, #132]	@ (800503c <_svfiprintf_r+0x1ec>)
 8004fb6:	bb1b      	cbnz	r3, 8005000 <_svfiprintf_r+0x1b0>
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	3307      	adds	r3, #7
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	9303      	str	r3, [sp, #12]
 8004fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc6:	4433      	add	r3, r6
 8004fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fca:	e76a      	b.n	8004ea2 <_svfiprintf_r+0x52>
 8004fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	e7a8      	b.n	8004f28 <_svfiprintf_r+0xd8>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	3401      	adds	r4, #1
 8004fda:	9305      	str	r3, [sp, #20]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0c0a 	mov.w	ip, #10
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe8:	3a30      	subs	r2, #48	@ 0x30
 8004fea:	2a09      	cmp	r2, #9
 8004fec:	d903      	bls.n	8004ff6 <_svfiprintf_r+0x1a6>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0c6      	beq.n	8004f80 <_svfiprintf_r+0x130>
 8004ff2:	9105      	str	r1, [sp, #20]
 8004ff4:	e7c4      	b.n	8004f80 <_svfiprintf_r+0x130>
 8004ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e7f0      	b.n	8004fe2 <_svfiprintf_r+0x192>
 8005000:	ab03      	add	r3, sp, #12
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	462a      	mov	r2, r5
 8005006:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <_svfiprintf_r+0x1f0>)
 8005008:	a904      	add	r1, sp, #16
 800500a:	4638      	mov	r0, r7
 800500c:	f3af 8000 	nop.w
 8005010:	1c42      	adds	r2, r0, #1
 8005012:	4606      	mov	r6, r0
 8005014:	d1d6      	bne.n	8004fc4 <_svfiprintf_r+0x174>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	065b      	lsls	r3, r3, #25
 800501a:	f53f af2d 	bmi.w	8004e78 <_svfiprintf_r+0x28>
 800501e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005020:	e72c      	b.n	8004e7c <_svfiprintf_r+0x2c>
 8005022:	ab03      	add	r3, sp, #12
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	462a      	mov	r2, r5
 8005028:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <_svfiprintf_r+0x1f0>)
 800502a:	a904      	add	r1, sp, #16
 800502c:	4638      	mov	r0, r7
 800502e:	f000 fa45 	bl	80054bc <_printf_i>
 8005032:	e7ed      	b.n	8005010 <_svfiprintf_r+0x1c0>
 8005034:	08005d8c 	.word	0x08005d8c
 8005038:	08005d96 	.word	0x08005d96
 800503c:	00000000 	.word	0x00000000
 8005040:	08004d99 	.word	0x08004d99
 8005044:	08005d92 	.word	0x08005d92

08005048 <_sungetc_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	1c4b      	adds	r3, r1, #1
 800504c:	4614      	mov	r4, r2
 800504e:	d103      	bne.n	8005058 <_sungetc_r+0x10>
 8005050:	f04f 35ff 	mov.w	r5, #4294967295
 8005054:	4628      	mov	r0, r5
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	8993      	ldrh	r3, [r2, #12]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	8193      	strh	r3, [r2, #12]
 8005060:	6853      	ldr	r3, [r2, #4]
 8005062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005064:	b2cd      	uxtb	r5, r1
 8005066:	b18a      	cbz	r2, 800508c <_sungetc_r+0x44>
 8005068:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800506a:	429a      	cmp	r2, r3
 800506c:	dd08      	ble.n	8005080 <_sungetc_r+0x38>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	3301      	adds	r3, #1
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	e7e9      	b.n	8005054 <_sungetc_r+0xc>
 8005080:	4621      	mov	r1, r4
 8005082:	f000 fcc2 	bl	8005a0a <__submore>
 8005086:	2800      	cmp	r0, #0
 8005088:	d0f1      	beq.n	800506e <_sungetc_r+0x26>
 800508a:	e7e1      	b.n	8005050 <_sungetc_r+0x8>
 800508c:	6921      	ldr	r1, [r4, #16]
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	b141      	cbz	r1, 80050a4 <_sungetc_r+0x5c>
 8005092:	4291      	cmp	r1, r2
 8005094:	d206      	bcs.n	80050a4 <_sungetc_r+0x5c>
 8005096:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800509a:	42a9      	cmp	r1, r5
 800509c:	d102      	bne.n	80050a4 <_sungetc_r+0x5c>
 800509e:	3a01      	subs	r2, #1
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	e7ea      	b.n	800507a <_sungetc_r+0x32>
 80050a4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80050a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ae:	2303      	movs	r3, #3
 80050b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80050b2:	4623      	mov	r3, r4
 80050b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	2301      	movs	r3, #1
 80050bc:	e7de      	b.n	800507c <_sungetc_r+0x34>

080050be <__ssrefill_r>:
 80050be:	b510      	push	{r4, lr}
 80050c0:	460c      	mov	r4, r1
 80050c2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80050c4:	b169      	cbz	r1, 80050e2 <__ssrefill_r+0x24>
 80050c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ca:	4299      	cmp	r1, r3
 80050cc:	d001      	beq.n	80050d2 <__ssrefill_r+0x14>
 80050ce:	f7ff fd6b 	bl	8004ba8 <_free_r>
 80050d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	2000      	movs	r0, #0
 80050d8:	6360      	str	r0, [r4, #52]	@ 0x34
 80050da:	b113      	cbz	r3, 80050e2 <__ssrefill_r+0x24>
 80050dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2300      	movs	r3, #0
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f043 0320 	orr.w	r3, r3, #32
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295
 80050f6:	e7f3      	b.n	80050e0 <__ssrefill_r+0x22>

080050f8 <__ssvfiscanf_r>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	460c      	mov	r4, r1
 80050fe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005102:	2100      	movs	r1, #0
 8005104:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005108:	49a5      	ldr	r1, [pc, #660]	@ (80053a0 <__ssvfiscanf_r+0x2a8>)
 800510a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800510c:	f10d 0804 	add.w	r8, sp, #4
 8005110:	49a4      	ldr	r1, [pc, #656]	@ (80053a4 <__ssvfiscanf_r+0x2ac>)
 8005112:	4fa5      	ldr	r7, [pc, #660]	@ (80053a8 <__ssvfiscanf_r+0x2b0>)
 8005114:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005118:	4606      	mov	r6, r0
 800511a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	7813      	ldrb	r3, [r2, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8158 	beq.w	80053d6 <__ssvfiscanf_r+0x2de>
 8005126:	5cf9      	ldrb	r1, [r7, r3]
 8005128:	f011 0108 	ands.w	r1, r1, #8
 800512c:	f102 0501 	add.w	r5, r2, #1
 8005130:	d019      	beq.n	8005166 <__ssvfiscanf_r+0x6e>
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	dd0f      	ble.n	8005158 <__ssvfiscanf_r+0x60>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	5cba      	ldrb	r2, [r7, r2]
 800513e:	0712      	lsls	r2, r2, #28
 8005140:	d401      	bmi.n	8005146 <__ssvfiscanf_r+0x4e>
 8005142:	462a      	mov	r2, r5
 8005144:	e7eb      	b.n	800511e <__ssvfiscanf_r+0x26>
 8005146:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005148:	3201      	adds	r2, #1
 800514a:	9245      	str	r2, [sp, #276]	@ 0x114
 800514c:	6862      	ldr	r2, [r4, #4]
 800514e:	3301      	adds	r3, #1
 8005150:	3a01      	subs	r2, #1
 8005152:	6062      	str	r2, [r4, #4]
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	e7ec      	b.n	8005132 <__ssvfiscanf_r+0x3a>
 8005158:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800515a:	4621      	mov	r1, r4
 800515c:	4630      	mov	r0, r6
 800515e:	4798      	blx	r3
 8005160:	2800      	cmp	r0, #0
 8005162:	d0e9      	beq.n	8005138 <__ssvfiscanf_r+0x40>
 8005164:	e7ed      	b.n	8005142 <__ssvfiscanf_r+0x4a>
 8005166:	2b25      	cmp	r3, #37	@ 0x25
 8005168:	d012      	beq.n	8005190 <__ssvfiscanf_r+0x98>
 800516a:	4699      	mov	r9, r3
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f340 8093 	ble.w	800529a <__ssvfiscanf_r+0x1a2>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	7813      	ldrb	r3, [r2, #0]
 8005178:	454b      	cmp	r3, r9
 800517a:	f040 812c 	bne.w	80053d6 <__ssvfiscanf_r+0x2de>
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	3b01      	subs	r3, #1
 8005182:	6063      	str	r3, [r4, #4]
 8005184:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005186:	3201      	adds	r2, #1
 8005188:	3301      	adds	r3, #1
 800518a:	6022      	str	r2, [r4, #0]
 800518c:	9345      	str	r3, [sp, #276]	@ 0x114
 800518e:	e7d8      	b.n	8005142 <__ssvfiscanf_r+0x4a>
 8005190:	9141      	str	r1, [sp, #260]	@ 0x104
 8005192:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005194:	7853      	ldrb	r3, [r2, #1]
 8005196:	2b2a      	cmp	r3, #42	@ 0x2a
 8005198:	bf02      	ittt	eq
 800519a:	2310      	moveq	r3, #16
 800519c:	1c95      	addeq	r5, r2, #2
 800519e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80051a0:	220a      	movs	r2, #10
 80051a2:	46a9      	mov	r9, r5
 80051a4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80051a8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80051ac:	2b09      	cmp	r3, #9
 80051ae:	d91e      	bls.n	80051ee <__ssvfiscanf_r+0xf6>
 80051b0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80053ac <__ssvfiscanf_r+0x2b4>
 80051b4:	2203      	movs	r2, #3
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7fb f812 	bl	80001e0 <memchr>
 80051bc:	b138      	cbz	r0, 80051ce <__ssvfiscanf_r+0xd6>
 80051be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80051c0:	eba0 000a 	sub.w	r0, r0, sl
 80051c4:	2301      	movs	r3, #1
 80051c6:	4083      	lsls	r3, r0
 80051c8:	4313      	orrs	r3, r2
 80051ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80051cc:	464d      	mov	r5, r9
 80051ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051d2:	2b78      	cmp	r3, #120	@ 0x78
 80051d4:	d806      	bhi.n	80051e4 <__ssvfiscanf_r+0xec>
 80051d6:	2b57      	cmp	r3, #87	@ 0x57
 80051d8:	d810      	bhi.n	80051fc <__ssvfiscanf_r+0x104>
 80051da:	2b25      	cmp	r3, #37	@ 0x25
 80051dc:	d0c5      	beq.n	800516a <__ssvfiscanf_r+0x72>
 80051de:	d857      	bhi.n	8005290 <__ssvfiscanf_r+0x198>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d065      	beq.n	80052b0 <__ssvfiscanf_r+0x1b8>
 80051e4:	2303      	movs	r3, #3
 80051e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80051e8:	230a      	movs	r3, #10
 80051ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80051ec:	e078      	b.n	80052e0 <__ssvfiscanf_r+0x1e8>
 80051ee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80051f0:	fb02 1103 	mla	r1, r2, r3, r1
 80051f4:	3930      	subs	r1, #48	@ 0x30
 80051f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80051f8:	464d      	mov	r5, r9
 80051fa:	e7d2      	b.n	80051a2 <__ssvfiscanf_r+0xaa>
 80051fc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005200:	2a20      	cmp	r2, #32
 8005202:	d8ef      	bhi.n	80051e4 <__ssvfiscanf_r+0xec>
 8005204:	a101      	add	r1, pc, #4	@ (adr r1, 800520c <__ssvfiscanf_r+0x114>)
 8005206:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800520a:	bf00      	nop
 800520c:	080052bf 	.word	0x080052bf
 8005210:	080051e5 	.word	0x080051e5
 8005214:	080051e5 	.word	0x080051e5
 8005218:	08005319 	.word	0x08005319
 800521c:	080051e5 	.word	0x080051e5
 8005220:	080051e5 	.word	0x080051e5
 8005224:	080051e5 	.word	0x080051e5
 8005228:	080051e5 	.word	0x080051e5
 800522c:	080051e5 	.word	0x080051e5
 8005230:	080051e5 	.word	0x080051e5
 8005234:	080051e5 	.word	0x080051e5
 8005238:	0800532f 	.word	0x0800532f
 800523c:	08005315 	.word	0x08005315
 8005240:	08005297 	.word	0x08005297
 8005244:	08005297 	.word	0x08005297
 8005248:	08005297 	.word	0x08005297
 800524c:	080051e5 	.word	0x080051e5
 8005250:	080052d1 	.word	0x080052d1
 8005254:	080051e5 	.word	0x080051e5
 8005258:	080051e5 	.word	0x080051e5
 800525c:	080051e5 	.word	0x080051e5
 8005260:	080051e5 	.word	0x080051e5
 8005264:	0800533f 	.word	0x0800533f
 8005268:	080052d9 	.word	0x080052d9
 800526c:	080052b7 	.word	0x080052b7
 8005270:	080051e5 	.word	0x080051e5
 8005274:	080051e5 	.word	0x080051e5
 8005278:	0800533b 	.word	0x0800533b
 800527c:	080051e5 	.word	0x080051e5
 8005280:	08005315 	.word	0x08005315
 8005284:	080051e5 	.word	0x080051e5
 8005288:	080051e5 	.word	0x080051e5
 800528c:	080052bf 	.word	0x080052bf
 8005290:	3b45      	subs	r3, #69	@ 0x45
 8005292:	2b02      	cmp	r3, #2
 8005294:	d8a6      	bhi.n	80051e4 <__ssvfiscanf_r+0xec>
 8005296:	2305      	movs	r3, #5
 8005298:	e021      	b.n	80052de <__ssvfiscanf_r+0x1e6>
 800529a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800529c:	4621      	mov	r1, r4
 800529e:	4630      	mov	r0, r6
 80052a0:	4798      	blx	r3
 80052a2:	2800      	cmp	r0, #0
 80052a4:	f43f af66 	beq.w	8005174 <__ssvfiscanf_r+0x7c>
 80052a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f040 808b 	bne.w	80053c6 <__ssvfiscanf_r+0x2ce>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	e08b      	b.n	80053ce <__ssvfiscanf_r+0x2d6>
 80052b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80052b8:	f042 0220 	orr.w	r2, r2, #32
 80052bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80052be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80052c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80052c6:	2210      	movs	r2, #16
 80052c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80052ca:	9242      	str	r2, [sp, #264]	@ 0x108
 80052cc:	d902      	bls.n	80052d4 <__ssvfiscanf_r+0x1dc>
 80052ce:	e005      	b.n	80052dc <__ssvfiscanf_r+0x1e4>
 80052d0:	2300      	movs	r3, #0
 80052d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80052d4:	2303      	movs	r3, #3
 80052d6:	e002      	b.n	80052de <__ssvfiscanf_r+0x1e6>
 80052d8:	2308      	movs	r3, #8
 80052da:	9342      	str	r3, [sp, #264]	@ 0x108
 80052dc:	2304      	movs	r3, #4
 80052de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd39      	ble.n	800535a <__ssvfiscanf_r+0x262>
 80052e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80052e8:	0659      	lsls	r1, r3, #25
 80052ea:	d404      	bmi.n	80052f6 <__ssvfiscanf_r+0x1fe>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	5cba      	ldrb	r2, [r7, r2]
 80052f2:	0712      	lsls	r2, r2, #28
 80052f4:	d438      	bmi.n	8005368 <__ssvfiscanf_r+0x270>
 80052f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	dc47      	bgt.n	800538c <__ssvfiscanf_r+0x294>
 80052fc:	466b      	mov	r3, sp
 80052fe:	4622      	mov	r2, r4
 8005300:	a941      	add	r1, sp, #260	@ 0x104
 8005302:	4630      	mov	r0, r6
 8005304:	f000 f9fa 	bl	80056fc <_scanf_chars>
 8005308:	2801      	cmp	r0, #1
 800530a:	d064      	beq.n	80053d6 <__ssvfiscanf_r+0x2de>
 800530c:	2802      	cmp	r0, #2
 800530e:	f47f af18 	bne.w	8005142 <__ssvfiscanf_r+0x4a>
 8005312:	e7c9      	b.n	80052a8 <__ssvfiscanf_r+0x1b0>
 8005314:	220a      	movs	r2, #10
 8005316:	e7d7      	b.n	80052c8 <__ssvfiscanf_r+0x1d0>
 8005318:	4629      	mov	r1, r5
 800531a:	4640      	mov	r0, r8
 800531c:	f000 fb3c 	bl	8005998 <__sccl>
 8005320:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005326:	9341      	str	r3, [sp, #260]	@ 0x104
 8005328:	4605      	mov	r5, r0
 800532a:	2301      	movs	r3, #1
 800532c:	e7d7      	b.n	80052de <__ssvfiscanf_r+0x1e6>
 800532e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005334:	9341      	str	r3, [sp, #260]	@ 0x104
 8005336:	2300      	movs	r3, #0
 8005338:	e7d1      	b.n	80052de <__ssvfiscanf_r+0x1e6>
 800533a:	2302      	movs	r3, #2
 800533c:	e7cf      	b.n	80052de <__ssvfiscanf_r+0x1e6>
 800533e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005340:	06c3      	lsls	r3, r0, #27
 8005342:	f53f aefe 	bmi.w	8005142 <__ssvfiscanf_r+0x4a>
 8005346:	9b00      	ldr	r3, [sp, #0]
 8005348:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800534a:	1d19      	adds	r1, r3, #4
 800534c:	9100      	str	r1, [sp, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	07c0      	lsls	r0, r0, #31
 8005352:	bf4c      	ite	mi
 8005354:	801a      	strhmi	r2, [r3, #0]
 8005356:	601a      	strpl	r2, [r3, #0]
 8005358:	e6f3      	b.n	8005142 <__ssvfiscanf_r+0x4a>
 800535a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800535c:	4621      	mov	r1, r4
 800535e:	4630      	mov	r0, r6
 8005360:	4798      	blx	r3
 8005362:	2800      	cmp	r0, #0
 8005364:	d0bf      	beq.n	80052e6 <__ssvfiscanf_r+0x1ee>
 8005366:	e79f      	b.n	80052a8 <__ssvfiscanf_r+0x1b0>
 8005368:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800536a:	3201      	adds	r2, #1
 800536c:	9245      	str	r2, [sp, #276]	@ 0x114
 800536e:	6862      	ldr	r2, [r4, #4]
 8005370:	3a01      	subs	r2, #1
 8005372:	2a00      	cmp	r2, #0
 8005374:	6062      	str	r2, [r4, #4]
 8005376:	dd02      	ble.n	800537e <__ssvfiscanf_r+0x286>
 8005378:	3301      	adds	r3, #1
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	e7b6      	b.n	80052ec <__ssvfiscanf_r+0x1f4>
 800537e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005380:	4621      	mov	r1, r4
 8005382:	4630      	mov	r0, r6
 8005384:	4798      	blx	r3
 8005386:	2800      	cmp	r0, #0
 8005388:	d0b0      	beq.n	80052ec <__ssvfiscanf_r+0x1f4>
 800538a:	e78d      	b.n	80052a8 <__ssvfiscanf_r+0x1b0>
 800538c:	2b04      	cmp	r3, #4
 800538e:	dc0f      	bgt.n	80053b0 <__ssvfiscanf_r+0x2b8>
 8005390:	466b      	mov	r3, sp
 8005392:	4622      	mov	r2, r4
 8005394:	a941      	add	r1, sp, #260	@ 0x104
 8005396:	4630      	mov	r0, r6
 8005398:	f000 fa0a 	bl	80057b0 <_scanf_i>
 800539c:	e7b4      	b.n	8005308 <__ssvfiscanf_r+0x210>
 800539e:	bf00      	nop
 80053a0:	08005049 	.word	0x08005049
 80053a4:	080050bf 	.word	0x080050bf
 80053a8:	08005ddb 	.word	0x08005ddb
 80053ac:	08005d92 	.word	0x08005d92
 80053b0:	4b0a      	ldr	r3, [pc, #40]	@ (80053dc <__ssvfiscanf_r+0x2e4>)
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f43f aec5 	beq.w	8005142 <__ssvfiscanf_r+0x4a>
 80053b8:	466b      	mov	r3, sp
 80053ba:	4622      	mov	r2, r4
 80053bc:	a941      	add	r1, sp, #260	@ 0x104
 80053be:	4630      	mov	r0, r6
 80053c0:	f3af 8000 	nop.w
 80053c4:	e7a0      	b.n	8005308 <__ssvfiscanf_r+0x210>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	065b      	lsls	r3, r3, #25
 80053ca:	f53f af71 	bmi.w	80052b0 <__ssvfiscanf_r+0x1b8>
 80053ce:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80053d8:	e7f9      	b.n	80053ce <__ssvfiscanf_r+0x2d6>
 80053da:	bf00      	nop
 80053dc:	00000000 	.word	0x00000000

080053e0 <_printf_common>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	4616      	mov	r6, r2
 80053e6:	4698      	mov	r8, r3
 80053e8:	688a      	ldr	r2, [r1, #8]
 80053ea:	690b      	ldr	r3, [r1, #16]
 80053ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bfb8      	it	lt
 80053f4:	4613      	movlt	r3, r2
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053fc:	4607      	mov	r7, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	b10a      	cbz	r2, 8005406 <_printf_common+0x26>
 8005402:	3301      	adds	r3, #1
 8005404:	6033      	str	r3, [r6, #0]
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	0699      	lsls	r1, r3, #26
 800540a:	bf42      	ittt	mi
 800540c:	6833      	ldrmi	r3, [r6, #0]
 800540e:	3302      	addmi	r3, #2
 8005410:	6033      	strmi	r3, [r6, #0]
 8005412:	6825      	ldr	r5, [r4, #0]
 8005414:	f015 0506 	ands.w	r5, r5, #6
 8005418:	d106      	bne.n	8005428 <_printf_common+0x48>
 800541a:	f104 0a19 	add.w	sl, r4, #25
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	6832      	ldr	r2, [r6, #0]
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	42ab      	cmp	r3, r5
 8005426:	dc26      	bgt.n	8005476 <_printf_common+0x96>
 8005428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	3b00      	subs	r3, #0
 8005430:	bf18      	it	ne
 8005432:	2301      	movne	r3, #1
 8005434:	0692      	lsls	r2, r2, #26
 8005436:	d42b      	bmi.n	8005490 <_printf_common+0xb0>
 8005438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800543c:	4641      	mov	r1, r8
 800543e:	4638      	mov	r0, r7
 8005440:	47c8      	blx	r9
 8005442:	3001      	adds	r0, #1
 8005444:	d01e      	beq.n	8005484 <_printf_common+0xa4>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	6922      	ldr	r2, [r4, #16]
 800544a:	f003 0306 	and.w	r3, r3, #6
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf02      	ittt	eq
 8005452:	68e5      	ldreq	r5, [r4, #12]
 8005454:	6833      	ldreq	r3, [r6, #0]
 8005456:	1aed      	subeq	r5, r5, r3
 8005458:	68a3      	ldr	r3, [r4, #8]
 800545a:	bf0c      	ite	eq
 800545c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005460:	2500      	movne	r5, #0
 8005462:	4293      	cmp	r3, r2
 8005464:	bfc4      	itt	gt
 8005466:	1a9b      	subgt	r3, r3, r2
 8005468:	18ed      	addgt	r5, r5, r3
 800546a:	2600      	movs	r6, #0
 800546c:	341a      	adds	r4, #26
 800546e:	42b5      	cmp	r5, r6
 8005470:	d11a      	bne.n	80054a8 <_printf_common+0xc8>
 8005472:	2000      	movs	r0, #0
 8005474:	e008      	b.n	8005488 <_printf_common+0xa8>
 8005476:	2301      	movs	r3, #1
 8005478:	4652      	mov	r2, sl
 800547a:	4641      	mov	r1, r8
 800547c:	4638      	mov	r0, r7
 800547e:	47c8      	blx	r9
 8005480:	3001      	adds	r0, #1
 8005482:	d103      	bne.n	800548c <_printf_common+0xac>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	3501      	adds	r5, #1
 800548e:	e7c6      	b.n	800541e <_printf_common+0x3e>
 8005490:	18e1      	adds	r1, r4, r3
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	2030      	movs	r0, #48	@ 0x30
 8005496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800549a:	4422      	add	r2, r4
 800549c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054a4:	3302      	adds	r3, #2
 80054a6:	e7c7      	b.n	8005438 <_printf_common+0x58>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4622      	mov	r2, r4
 80054ac:	4641      	mov	r1, r8
 80054ae:	4638      	mov	r0, r7
 80054b0:	47c8      	blx	r9
 80054b2:	3001      	adds	r0, #1
 80054b4:	d0e6      	beq.n	8005484 <_printf_common+0xa4>
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7d9      	b.n	800546e <_printf_common+0x8e>
	...

080054bc <_printf_i>:
 80054bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	7e0f      	ldrb	r7, [r1, #24]
 80054c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054c4:	2f78      	cmp	r7, #120	@ 0x78
 80054c6:	4691      	mov	r9, r2
 80054c8:	4680      	mov	r8, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	469a      	mov	sl, r3
 80054ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054d2:	d807      	bhi.n	80054e4 <_printf_i+0x28>
 80054d4:	2f62      	cmp	r7, #98	@ 0x62
 80054d6:	d80a      	bhi.n	80054ee <_printf_i+0x32>
 80054d8:	2f00      	cmp	r7, #0
 80054da:	f000 80d2 	beq.w	8005682 <_printf_i+0x1c6>
 80054de:	2f58      	cmp	r7, #88	@ 0x58
 80054e0:	f000 80b9 	beq.w	8005656 <_printf_i+0x19a>
 80054e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054ec:	e03a      	b.n	8005564 <_printf_i+0xa8>
 80054ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054f2:	2b15      	cmp	r3, #21
 80054f4:	d8f6      	bhi.n	80054e4 <_printf_i+0x28>
 80054f6:	a101      	add	r1, pc, #4	@ (adr r1, 80054fc <_printf_i+0x40>)
 80054f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005569 	.word	0x08005569
 8005504:	080054e5 	.word	0x080054e5
 8005508:	080054e5 	.word	0x080054e5
 800550c:	080054e5 	.word	0x080054e5
 8005510:	080054e5 	.word	0x080054e5
 8005514:	08005569 	.word	0x08005569
 8005518:	080054e5 	.word	0x080054e5
 800551c:	080054e5 	.word	0x080054e5
 8005520:	080054e5 	.word	0x080054e5
 8005524:	080054e5 	.word	0x080054e5
 8005528:	08005669 	.word	0x08005669
 800552c:	08005593 	.word	0x08005593
 8005530:	08005623 	.word	0x08005623
 8005534:	080054e5 	.word	0x080054e5
 8005538:	080054e5 	.word	0x080054e5
 800553c:	0800568b 	.word	0x0800568b
 8005540:	080054e5 	.word	0x080054e5
 8005544:	08005593 	.word	0x08005593
 8005548:	080054e5 	.word	0x080054e5
 800554c:	080054e5 	.word	0x080054e5
 8005550:	0800562b 	.word	0x0800562b
 8005554:	6833      	ldr	r3, [r6, #0]
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6032      	str	r2, [r6, #0]
 800555c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005564:	2301      	movs	r3, #1
 8005566:	e09d      	b.n	80056a4 <_printf_i+0x1e8>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	1d19      	adds	r1, r3, #4
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	0606      	lsls	r6, r0, #24
 8005572:	d501      	bpl.n	8005578 <_printf_i+0xbc>
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	e003      	b.n	8005580 <_printf_i+0xc4>
 8005578:	0645      	lsls	r5, r0, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0xb8>
 800557c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005580:	2d00      	cmp	r5, #0
 8005582:	da03      	bge.n	800558c <_printf_i+0xd0>
 8005584:	232d      	movs	r3, #45	@ 0x2d
 8005586:	426d      	negs	r5, r5
 8005588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800558c:	4859      	ldr	r0, [pc, #356]	@ (80056f4 <_printf_i+0x238>)
 800558e:	230a      	movs	r3, #10
 8005590:	e011      	b.n	80055b6 <_printf_i+0xfa>
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	0608      	lsls	r0, r1, #24
 8005598:	f853 5b04 	ldr.w	r5, [r3], #4
 800559c:	d402      	bmi.n	80055a4 <_printf_i+0xe8>
 800559e:	0649      	lsls	r1, r1, #25
 80055a0:	bf48      	it	mi
 80055a2:	b2ad      	uxthmi	r5, r5
 80055a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055a6:	4853      	ldr	r0, [pc, #332]	@ (80056f4 <_printf_i+0x238>)
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	bf14      	ite	ne
 80055ac:	230a      	movne	r3, #10
 80055ae:	2308      	moveq	r3, #8
 80055b0:	2100      	movs	r1, #0
 80055b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055b6:	6866      	ldr	r6, [r4, #4]
 80055b8:	60a6      	str	r6, [r4, #8]
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	bfa2      	ittt	ge
 80055be:	6821      	ldrge	r1, [r4, #0]
 80055c0:	f021 0104 	bicge.w	r1, r1, #4
 80055c4:	6021      	strge	r1, [r4, #0]
 80055c6:	b90d      	cbnz	r5, 80055cc <_printf_i+0x110>
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	d04b      	beq.n	8005664 <_printf_i+0x1a8>
 80055cc:	4616      	mov	r6, r2
 80055ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d2:	fb03 5711 	mls	r7, r3, r1, r5
 80055d6:	5dc7      	ldrb	r7, [r0, r7]
 80055d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055dc:	462f      	mov	r7, r5
 80055de:	42bb      	cmp	r3, r7
 80055e0:	460d      	mov	r5, r1
 80055e2:	d9f4      	bls.n	80055ce <_printf_i+0x112>
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d10b      	bne.n	8005600 <_printf_i+0x144>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	07df      	lsls	r7, r3, #31
 80055ec:	d508      	bpl.n	8005600 <_printf_i+0x144>
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	6861      	ldr	r1, [r4, #4]
 80055f2:	4299      	cmp	r1, r3
 80055f4:	bfde      	ittt	le
 80055f6:	2330      	movle	r3, #48	@ 0x30
 80055f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005600:	1b92      	subs	r2, r2, r6
 8005602:	6122      	str	r2, [r4, #16]
 8005604:	f8cd a000 	str.w	sl, [sp]
 8005608:	464b      	mov	r3, r9
 800560a:	aa03      	add	r2, sp, #12
 800560c:	4621      	mov	r1, r4
 800560e:	4640      	mov	r0, r8
 8005610:	f7ff fee6 	bl	80053e0 <_printf_common>
 8005614:	3001      	adds	r0, #1
 8005616:	d14a      	bne.n	80056ae <_printf_i+0x1f2>
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	b004      	add	sp, #16
 800561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	f043 0320 	orr.w	r3, r3, #32
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	4833      	ldr	r0, [pc, #204]	@ (80056f8 <_printf_i+0x23c>)
 800562c:	2778      	movs	r7, #120	@ 0x78
 800562e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	6831      	ldr	r1, [r6, #0]
 8005636:	061f      	lsls	r7, r3, #24
 8005638:	f851 5b04 	ldr.w	r5, [r1], #4
 800563c:	d402      	bmi.n	8005644 <_printf_i+0x188>
 800563e:	065f      	lsls	r7, r3, #25
 8005640:	bf48      	it	mi
 8005642:	b2ad      	uxthmi	r5, r5
 8005644:	6031      	str	r1, [r6, #0]
 8005646:	07d9      	lsls	r1, r3, #31
 8005648:	bf44      	itt	mi
 800564a:	f043 0320 	orrmi.w	r3, r3, #32
 800564e:	6023      	strmi	r3, [r4, #0]
 8005650:	b11d      	cbz	r5, 800565a <_printf_i+0x19e>
 8005652:	2310      	movs	r3, #16
 8005654:	e7ac      	b.n	80055b0 <_printf_i+0xf4>
 8005656:	4827      	ldr	r0, [pc, #156]	@ (80056f4 <_printf_i+0x238>)
 8005658:	e7e9      	b.n	800562e <_printf_i+0x172>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f023 0320 	bic.w	r3, r3, #32
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	e7f6      	b.n	8005652 <_printf_i+0x196>
 8005664:	4616      	mov	r6, r2
 8005666:	e7bd      	b.n	80055e4 <_printf_i+0x128>
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	6961      	ldr	r1, [r4, #20]
 800566e:	1d18      	adds	r0, r3, #4
 8005670:	6030      	str	r0, [r6, #0]
 8005672:	062e      	lsls	r6, r5, #24
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	d501      	bpl.n	800567c <_printf_i+0x1c0>
 8005678:	6019      	str	r1, [r3, #0]
 800567a:	e002      	b.n	8005682 <_printf_i+0x1c6>
 800567c:	0668      	lsls	r0, r5, #25
 800567e:	d5fb      	bpl.n	8005678 <_printf_i+0x1bc>
 8005680:	8019      	strh	r1, [r3, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	6123      	str	r3, [r4, #16]
 8005686:	4616      	mov	r6, r2
 8005688:	e7bc      	b.n	8005604 <_printf_i+0x148>
 800568a:	6833      	ldr	r3, [r6, #0]
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	6032      	str	r2, [r6, #0]
 8005690:	681e      	ldr	r6, [r3, #0]
 8005692:	6862      	ldr	r2, [r4, #4]
 8005694:	2100      	movs	r1, #0
 8005696:	4630      	mov	r0, r6
 8005698:	f7fa fda2 	bl	80001e0 <memchr>
 800569c:	b108      	cbz	r0, 80056a2 <_printf_i+0x1e6>
 800569e:	1b80      	subs	r0, r0, r6
 80056a0:	6060      	str	r0, [r4, #4]
 80056a2:	6863      	ldr	r3, [r4, #4]
 80056a4:	6123      	str	r3, [r4, #16]
 80056a6:	2300      	movs	r3, #0
 80056a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ac:	e7aa      	b.n	8005604 <_printf_i+0x148>
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	4632      	mov	r2, r6
 80056b2:	4649      	mov	r1, r9
 80056b4:	4640      	mov	r0, r8
 80056b6:	47d0      	blx	sl
 80056b8:	3001      	adds	r0, #1
 80056ba:	d0ad      	beq.n	8005618 <_printf_i+0x15c>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	079b      	lsls	r3, r3, #30
 80056c0:	d413      	bmi.n	80056ea <_printf_i+0x22e>
 80056c2:	68e0      	ldr	r0, [r4, #12]
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	4298      	cmp	r0, r3
 80056c8:	bfb8      	it	lt
 80056ca:	4618      	movlt	r0, r3
 80056cc:	e7a6      	b.n	800561c <_printf_i+0x160>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4632      	mov	r2, r6
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	47d0      	blx	sl
 80056d8:	3001      	adds	r0, #1
 80056da:	d09d      	beq.n	8005618 <_printf_i+0x15c>
 80056dc:	3501      	adds	r5, #1
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	9903      	ldr	r1, [sp, #12]
 80056e2:	1a5b      	subs	r3, r3, r1
 80056e4:	42ab      	cmp	r3, r5
 80056e6:	dcf2      	bgt.n	80056ce <_printf_i+0x212>
 80056e8:	e7eb      	b.n	80056c2 <_printf_i+0x206>
 80056ea:	2500      	movs	r5, #0
 80056ec:	f104 0619 	add.w	r6, r4, #25
 80056f0:	e7f5      	b.n	80056de <_printf_i+0x222>
 80056f2:	bf00      	nop
 80056f4:	08005d9d 	.word	0x08005d9d
 80056f8:	08005dae 	.word	0x08005dae

080056fc <_scanf_chars>:
 80056fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005700:	4615      	mov	r5, r2
 8005702:	688a      	ldr	r2, [r1, #8]
 8005704:	4680      	mov	r8, r0
 8005706:	460c      	mov	r4, r1
 8005708:	b932      	cbnz	r2, 8005718 <_scanf_chars+0x1c>
 800570a:	698a      	ldr	r2, [r1, #24]
 800570c:	2a00      	cmp	r2, #0
 800570e:	bf14      	ite	ne
 8005710:	f04f 32ff 	movne.w	r2, #4294967295
 8005714:	2201      	moveq	r2, #1
 8005716:	608a      	str	r2, [r1, #8]
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80057ac <_scanf_chars+0xb0>
 800571e:	06d1      	lsls	r1, r2, #27
 8005720:	bf5f      	itttt	pl
 8005722:	681a      	ldrpl	r2, [r3, #0]
 8005724:	1d11      	addpl	r1, r2, #4
 8005726:	6019      	strpl	r1, [r3, #0]
 8005728:	6816      	ldrpl	r6, [r2, #0]
 800572a:	2700      	movs	r7, #0
 800572c:	69a0      	ldr	r0, [r4, #24]
 800572e:	b188      	cbz	r0, 8005754 <_scanf_chars+0x58>
 8005730:	2801      	cmp	r0, #1
 8005732:	d107      	bne.n	8005744 <_scanf_chars+0x48>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	6963      	ldr	r3, [r4, #20]
 800573a:	5c9b      	ldrb	r3, [r3, r2]
 800573c:	b953      	cbnz	r3, 8005754 <_scanf_chars+0x58>
 800573e:	2f00      	cmp	r7, #0
 8005740:	d031      	beq.n	80057a6 <_scanf_chars+0xaa>
 8005742:	e022      	b.n	800578a <_scanf_chars+0x8e>
 8005744:	2802      	cmp	r0, #2
 8005746:	d120      	bne.n	800578a <_scanf_chars+0x8e>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005750:	071b      	lsls	r3, r3, #28
 8005752:	d41a      	bmi.n	800578a <_scanf_chars+0x8e>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	06da      	lsls	r2, r3, #27
 8005758:	bf5e      	ittt	pl
 800575a:	682b      	ldrpl	r3, [r5, #0]
 800575c:	781b      	ldrbpl	r3, [r3, #0]
 800575e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005762:	682a      	ldr	r2, [r5, #0]
 8005764:	686b      	ldr	r3, [r5, #4]
 8005766:	3201      	adds	r2, #1
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	68a2      	ldr	r2, [r4, #8]
 800576c:	3b01      	subs	r3, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	606b      	str	r3, [r5, #4]
 8005772:	3701      	adds	r7, #1
 8005774:	60a2      	str	r2, [r4, #8]
 8005776:	b142      	cbz	r2, 800578a <_scanf_chars+0x8e>
 8005778:	2b00      	cmp	r3, #0
 800577a:	dcd7      	bgt.n	800572c <_scanf_chars+0x30>
 800577c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005780:	4629      	mov	r1, r5
 8005782:	4640      	mov	r0, r8
 8005784:	4798      	blx	r3
 8005786:	2800      	cmp	r0, #0
 8005788:	d0d0      	beq.n	800572c <_scanf_chars+0x30>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f013 0310 	ands.w	r3, r3, #16
 8005790:	d105      	bne.n	800579e <_scanf_chars+0xa2>
 8005792:	68e2      	ldr	r2, [r4, #12]
 8005794:	3201      	adds	r2, #1
 8005796:	60e2      	str	r2, [r4, #12]
 8005798:	69a2      	ldr	r2, [r4, #24]
 800579a:	b102      	cbz	r2, 800579e <_scanf_chars+0xa2>
 800579c:	7033      	strb	r3, [r6, #0]
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	443b      	add	r3, r7
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	2000      	movs	r0, #0
 80057a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057aa:	bf00      	nop
 80057ac:	08005ddb 	.word	0x08005ddb

080057b0 <_scanf_i>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4698      	mov	r8, r3
 80057b6:	4b74      	ldr	r3, [pc, #464]	@ (8005988 <_scanf_i+0x1d8>)
 80057b8:	460c      	mov	r4, r1
 80057ba:	4682      	mov	sl, r0
 80057bc:	4616      	mov	r6, r2
 80057be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057c2:	b087      	sub	sp, #28
 80057c4:	ab03      	add	r3, sp, #12
 80057c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057ca:	4b70      	ldr	r3, [pc, #448]	@ (800598c <_scanf_i+0x1dc>)
 80057cc:	69a1      	ldr	r1, [r4, #24]
 80057ce:	4a70      	ldr	r2, [pc, #448]	@ (8005990 <_scanf_i+0x1e0>)
 80057d0:	2903      	cmp	r1, #3
 80057d2:	bf08      	it	eq
 80057d4:	461a      	moveq	r2, r3
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	9201      	str	r2, [sp, #4]
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80057e0:	bf88      	it	hi
 80057e2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80057e6:	4627      	mov	r7, r4
 80057e8:	bf82      	ittt	hi
 80057ea:	eb03 0905 	addhi.w	r9, r3, r5
 80057ee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80057f2:	60a3      	strhi	r3, [r4, #8]
 80057f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80057f8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80057fc:	bf98      	it	ls
 80057fe:	f04f 0900 	movls.w	r9, #0
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	463d      	mov	r5, r7
 8005806:	f04f 0b00 	mov.w	fp, #0
 800580a:	6831      	ldr	r1, [r6, #0]
 800580c:	ab03      	add	r3, sp, #12
 800580e:	7809      	ldrb	r1, [r1, #0]
 8005810:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005814:	2202      	movs	r2, #2
 8005816:	f7fa fce3 	bl	80001e0 <memchr>
 800581a:	b328      	cbz	r0, 8005868 <_scanf_i+0xb8>
 800581c:	f1bb 0f01 	cmp.w	fp, #1
 8005820:	d159      	bne.n	80058d6 <_scanf_i+0x126>
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	b92a      	cbnz	r2, 8005832 <_scanf_i+0x82>
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	2108      	movs	r1, #8
 800582a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582e:	6061      	str	r1, [r4, #4]
 8005830:	6022      	str	r2, [r4, #0]
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	68a2      	ldr	r2, [r4, #8]
 800583c:	1e51      	subs	r1, r2, #1
 800583e:	60a1      	str	r1, [r4, #8]
 8005840:	b192      	cbz	r2, 8005868 <_scanf_i+0xb8>
 8005842:	6832      	ldr	r2, [r6, #0]
 8005844:	1c51      	adds	r1, r2, #1
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	7812      	ldrb	r2, [r2, #0]
 800584a:	f805 2b01 	strb.w	r2, [r5], #1
 800584e:	6872      	ldr	r2, [r6, #4]
 8005850:	3a01      	subs	r2, #1
 8005852:	2a00      	cmp	r2, #0
 8005854:	6072      	str	r2, [r6, #4]
 8005856:	dc07      	bgt.n	8005868 <_scanf_i+0xb8>
 8005858:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800585c:	4631      	mov	r1, r6
 800585e:	4650      	mov	r0, sl
 8005860:	4790      	blx	r2
 8005862:	2800      	cmp	r0, #0
 8005864:	f040 8085 	bne.w	8005972 <_scanf_i+0x1c2>
 8005868:	f10b 0b01 	add.w	fp, fp, #1
 800586c:	f1bb 0f03 	cmp.w	fp, #3
 8005870:	d1cb      	bne.n	800580a <_scanf_i+0x5a>
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	b90b      	cbnz	r3, 800587a <_scanf_i+0xca>
 8005876:	230a      	movs	r3, #10
 8005878:	6063      	str	r3, [r4, #4]
 800587a:	6863      	ldr	r3, [r4, #4]
 800587c:	4945      	ldr	r1, [pc, #276]	@ (8005994 <_scanf_i+0x1e4>)
 800587e:	6960      	ldr	r0, [r4, #20]
 8005880:	1ac9      	subs	r1, r1, r3
 8005882:	f000 f889 	bl	8005998 <__sccl>
 8005886:	f04f 0b00 	mov.w	fp, #0
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d03d      	beq.n	800590e <_scanf_i+0x15e>
 8005892:	6831      	ldr	r1, [r6, #0]
 8005894:	6960      	ldr	r0, [r4, #20]
 8005896:	f891 c000 	ldrb.w	ip, [r1]
 800589a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800589e:	2800      	cmp	r0, #0
 80058a0:	d035      	beq.n	800590e <_scanf_i+0x15e>
 80058a2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80058a6:	d124      	bne.n	80058f2 <_scanf_i+0x142>
 80058a8:	0510      	lsls	r0, r2, #20
 80058aa:	d522      	bpl.n	80058f2 <_scanf_i+0x142>
 80058ac:	f10b 0b01 	add.w	fp, fp, #1
 80058b0:	f1b9 0f00 	cmp.w	r9, #0
 80058b4:	d003      	beq.n	80058be <_scanf_i+0x10e>
 80058b6:	3301      	adds	r3, #1
 80058b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	6873      	ldr	r3, [r6, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	6073      	str	r3, [r6, #4]
 80058c6:	dd1b      	ble.n	8005900 <_scanf_i+0x150>
 80058c8:	6833      	ldr	r3, [r6, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60a3      	str	r3, [r4, #8]
 80058d4:	e7d9      	b.n	800588a <_scanf_i+0xda>
 80058d6:	f1bb 0f02 	cmp.w	fp, #2
 80058da:	d1ae      	bne.n	800583a <_scanf_i+0x8a>
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80058e2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80058e6:	d1bf      	bne.n	8005868 <_scanf_i+0xb8>
 80058e8:	2110      	movs	r1, #16
 80058ea:	6061      	str	r1, [r4, #4]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f0:	e7a2      	b.n	8005838 <_scanf_i+0x88>
 80058f2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	780b      	ldrb	r3, [r1, #0]
 80058fa:	f805 3b01 	strb.w	r3, [r5], #1
 80058fe:	e7de      	b.n	80058be <_scanf_i+0x10e>
 8005900:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005904:	4631      	mov	r1, r6
 8005906:	4650      	mov	r0, sl
 8005908:	4798      	blx	r3
 800590a:	2800      	cmp	r0, #0
 800590c:	d0df      	beq.n	80058ce <_scanf_i+0x11e>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	05d9      	lsls	r1, r3, #23
 8005912:	d50d      	bpl.n	8005930 <_scanf_i+0x180>
 8005914:	42bd      	cmp	r5, r7
 8005916:	d909      	bls.n	800592c <_scanf_i+0x17c>
 8005918:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800591c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005920:	4632      	mov	r2, r6
 8005922:	4650      	mov	r0, sl
 8005924:	4798      	blx	r3
 8005926:	f105 39ff 	add.w	r9, r5, #4294967295
 800592a:	464d      	mov	r5, r9
 800592c:	42bd      	cmp	r5, r7
 800592e:	d028      	beq.n	8005982 <_scanf_i+0x1d2>
 8005930:	6822      	ldr	r2, [r4, #0]
 8005932:	f012 0210 	ands.w	r2, r2, #16
 8005936:	d113      	bne.n	8005960 <_scanf_i+0x1b0>
 8005938:	702a      	strb	r2, [r5, #0]
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	9e01      	ldr	r6, [sp, #4]
 800593e:	4639      	mov	r1, r7
 8005940:	4650      	mov	r0, sl
 8005942:	47b0      	blx	r6
 8005944:	f8d8 3000 	ldr.w	r3, [r8]
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	f8c8 2000 	str.w	r2, [r8]
 8005950:	f011 0f20 	tst.w	r1, #32
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	d00f      	beq.n	8005978 <_scanf_i+0x1c8>
 8005958:	6018      	str	r0, [r3, #0]
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60e3      	str	r3, [r4, #12]
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	1bed      	subs	r5, r5, r7
 8005964:	445d      	add	r5, fp
 8005966:	442b      	add	r3, r5
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	2000      	movs	r0, #0
 800596c:	b007      	add	sp, #28
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	f04f 0b00 	mov.w	fp, #0
 8005976:	e7ca      	b.n	800590e <_scanf_i+0x15e>
 8005978:	07ca      	lsls	r2, r1, #31
 800597a:	bf4c      	ite	mi
 800597c:	8018      	strhmi	r0, [r3, #0]
 800597e:	6018      	strpl	r0, [r3, #0]
 8005980:	e7eb      	b.n	800595a <_scanf_i+0x1aa>
 8005982:	2001      	movs	r0, #1
 8005984:	e7f2      	b.n	800596c <_scanf_i+0x1bc>
 8005986:	bf00      	nop
 8005988:	08005d68 	.word	0x08005d68
 800598c:	08005c41 	.word	0x08005c41
 8005990:	08005d21 	.word	0x08005d21
 8005994:	08005dcf 	.word	0x08005dcf

08005998 <__sccl>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	780b      	ldrb	r3, [r1, #0]
 800599c:	4604      	mov	r4, r0
 800599e:	2b5e      	cmp	r3, #94	@ 0x5e
 80059a0:	bf0b      	itete	eq
 80059a2:	784b      	ldrbeq	r3, [r1, #1]
 80059a4:	1c4a      	addne	r2, r1, #1
 80059a6:	1c8a      	addeq	r2, r1, #2
 80059a8:	2100      	movne	r1, #0
 80059aa:	bf08      	it	eq
 80059ac:	2101      	moveq	r1, #1
 80059ae:	3801      	subs	r0, #1
 80059b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80059b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80059b8:	42a8      	cmp	r0, r5
 80059ba:	d1fb      	bne.n	80059b4 <__sccl+0x1c>
 80059bc:	b90b      	cbnz	r3, 80059c2 <__sccl+0x2a>
 80059be:	1e50      	subs	r0, r2, #1
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	f081 0101 	eor.w	r1, r1, #1
 80059c6:	54e1      	strb	r1, [r4, r3]
 80059c8:	4610      	mov	r0, r2
 80059ca:	4602      	mov	r2, r0
 80059cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80059d2:	d005      	beq.n	80059e0 <__sccl+0x48>
 80059d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80059d6:	d016      	beq.n	8005a06 <__sccl+0x6e>
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d0f1      	beq.n	80059c0 <__sccl+0x28>
 80059dc:	462b      	mov	r3, r5
 80059de:	e7f2      	b.n	80059c6 <__sccl+0x2e>
 80059e0:	7846      	ldrb	r6, [r0, #1]
 80059e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80059e4:	d0fa      	beq.n	80059dc <__sccl+0x44>
 80059e6:	42b3      	cmp	r3, r6
 80059e8:	dcf8      	bgt.n	80059dc <__sccl+0x44>
 80059ea:	3002      	adds	r0, #2
 80059ec:	461a      	mov	r2, r3
 80059ee:	3201      	adds	r2, #1
 80059f0:	4296      	cmp	r6, r2
 80059f2:	54a1      	strb	r1, [r4, r2]
 80059f4:	dcfb      	bgt.n	80059ee <__sccl+0x56>
 80059f6:	1af2      	subs	r2, r6, r3
 80059f8:	3a01      	subs	r2, #1
 80059fa:	1c5d      	adds	r5, r3, #1
 80059fc:	42b3      	cmp	r3, r6
 80059fe:	bfa8      	it	ge
 8005a00:	2200      	movge	r2, #0
 8005a02:	18ab      	adds	r3, r5, r2
 8005a04:	e7e1      	b.n	80059ca <__sccl+0x32>
 8005a06:	4610      	mov	r0, r2
 8005a08:	e7da      	b.n	80059c0 <__sccl+0x28>

08005a0a <__submore>:
 8005a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	460c      	mov	r4, r1
 8005a10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a16:	4299      	cmp	r1, r3
 8005a18:	d11d      	bne.n	8005a56 <__submore+0x4c>
 8005a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a1e:	f7ff f92f 	bl	8004c80 <_malloc_r>
 8005a22:	b918      	cbnz	r0, 8005a2c <__submore+0x22>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005a36:	6360      	str	r0, [r4, #52]	@ 0x34
 8005a38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005a3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005a44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005a4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005a50:	6020      	str	r0, [r4, #0]
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7e8      	b.n	8005a28 <__submore+0x1e>
 8005a56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005a58:	0077      	lsls	r7, r6, #1
 8005a5a:	463a      	mov	r2, r7
 8005a5c:	f000 f848 	bl	8005af0 <_realloc_r>
 8005a60:	4605      	mov	r5, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d0de      	beq.n	8005a24 <__submore+0x1a>
 8005a66:	eb00 0806 	add.w	r8, r0, r6
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f000 f830 	bl	8005ad4 <memcpy>
 8005a74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005a78:	f8c4 8000 	str.w	r8, [r4]
 8005a7c:	e7e9      	b.n	8005a52 <__submore+0x48>

08005a7e <memmove>:
 8005a7e:	4288      	cmp	r0, r1
 8005a80:	b510      	push	{r4, lr}
 8005a82:	eb01 0402 	add.w	r4, r1, r2
 8005a86:	d902      	bls.n	8005a8e <memmove+0x10>
 8005a88:	4284      	cmp	r4, r0
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	d807      	bhi.n	8005a9e <memmove+0x20>
 8005a8e:	1e43      	subs	r3, r0, #1
 8005a90:	42a1      	cmp	r1, r4
 8005a92:	d008      	beq.n	8005aa6 <memmove+0x28>
 8005a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a9c:	e7f8      	b.n	8005a90 <memmove+0x12>
 8005a9e:	4402      	add	r2, r0
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	428a      	cmp	r2, r1
 8005aa4:	d100      	bne.n	8005aa8 <memmove+0x2a>
 8005aa6:	bd10      	pop	{r4, pc}
 8005aa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab0:	e7f7      	b.n	8005aa2 <memmove+0x24>
	...

08005ab4 <_sbrk_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d06      	ldr	r5, [pc, #24]	@ (8005ad0 <_sbrk_r+0x1c>)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	4608      	mov	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fc f94e 	bl	8001d60 <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_sbrk_r+0x1a>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_sbrk_r+0x1a>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	200003b0 	.word	0x200003b0

08005ad4 <memcpy>:
 8005ad4:	440a      	add	r2, r1
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005adc:	d100      	bne.n	8005ae0 <memcpy+0xc>
 8005ade:	4770      	bx	lr
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aea:	4291      	cmp	r1, r2
 8005aec:	d1f9      	bne.n	8005ae2 <memcpy+0xe>
 8005aee:	bd10      	pop	{r4, pc}

08005af0 <_realloc_r>:
 8005af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af4:	4680      	mov	r8, r0
 8005af6:	4615      	mov	r5, r2
 8005af8:	460c      	mov	r4, r1
 8005afa:	b921      	cbnz	r1, 8005b06 <_realloc_r+0x16>
 8005afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b00:	4611      	mov	r1, r2
 8005b02:	f7ff b8bd 	b.w	8004c80 <_malloc_r>
 8005b06:	b92a      	cbnz	r2, 8005b14 <_realloc_r+0x24>
 8005b08:	f7ff f84e 	bl	8004ba8 <_free_r>
 8005b0c:	2400      	movs	r4, #0
 8005b0e:	4620      	mov	r0, r4
 8005b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b14:	f000 f906 	bl	8005d24 <_malloc_usable_size_r>
 8005b18:	4285      	cmp	r5, r0
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	d802      	bhi.n	8005b24 <_realloc_r+0x34>
 8005b1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b22:	d8f4      	bhi.n	8005b0e <_realloc_r+0x1e>
 8005b24:	4629      	mov	r1, r5
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7ff f8aa 	bl	8004c80 <_malloc_r>
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d0ec      	beq.n	8005b0c <_realloc_r+0x1c>
 8005b32:	42b5      	cmp	r5, r6
 8005b34:	462a      	mov	r2, r5
 8005b36:	4621      	mov	r1, r4
 8005b38:	bf28      	it	cs
 8005b3a:	4632      	movcs	r2, r6
 8005b3c:	f7ff ffca 	bl	8005ad4 <memcpy>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff f830 	bl	8004ba8 <_free_r>
 8005b48:	463c      	mov	r4, r7
 8005b4a:	e7e0      	b.n	8005b0e <_realloc_r+0x1e>

08005b4c <_strtol_l.constprop.0>:
 8005b4c:	2b24      	cmp	r3, #36	@ 0x24
 8005b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b52:	4686      	mov	lr, r0
 8005b54:	4690      	mov	r8, r2
 8005b56:	d801      	bhi.n	8005b5c <_strtol_l.constprop.0+0x10>
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d106      	bne.n	8005b6a <_strtol_l.constprop.0+0x1e>
 8005b5c:	f7fe fff8 	bl	8004b50 <__errno>
 8005b60:	2316      	movs	r3, #22
 8005b62:	6003      	str	r3, [r0, #0]
 8005b64:	2000      	movs	r0, #0
 8005b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6a:	4834      	ldr	r0, [pc, #208]	@ (8005c3c <_strtol_l.constprop.0+0xf0>)
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	462a      	mov	r2, r5
 8005b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b74:	5d06      	ldrb	r6, [r0, r4]
 8005b76:	f016 0608 	ands.w	r6, r6, #8
 8005b7a:	d1f8      	bne.n	8005b6e <_strtol_l.constprop.0+0x22>
 8005b7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b7e:	d12d      	bne.n	8005bdc <_strtol_l.constprop.0+0x90>
 8005b80:	782c      	ldrb	r4, [r5, #0]
 8005b82:	2601      	movs	r6, #1
 8005b84:	1c95      	adds	r5, r2, #2
 8005b86:	f033 0210 	bics.w	r2, r3, #16
 8005b8a:	d109      	bne.n	8005ba0 <_strtol_l.constprop.0+0x54>
 8005b8c:	2c30      	cmp	r4, #48	@ 0x30
 8005b8e:	d12a      	bne.n	8005be6 <_strtol_l.constprop.0+0x9a>
 8005b90:	782a      	ldrb	r2, [r5, #0]
 8005b92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b96:	2a58      	cmp	r2, #88	@ 0x58
 8005b98:	d125      	bne.n	8005be6 <_strtol_l.constprop.0+0x9a>
 8005b9a:	786c      	ldrb	r4, [r5, #1]
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	3502      	adds	r5, #2
 8005ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ba8:	2200      	movs	r2, #0
 8005baa:	fbbc f9f3 	udiv	r9, ip, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005bb8:	2f09      	cmp	r7, #9
 8005bba:	d81b      	bhi.n	8005bf4 <_strtol_l.constprop.0+0xa8>
 8005bbc:	463c      	mov	r4, r7
 8005bbe:	42a3      	cmp	r3, r4
 8005bc0:	dd27      	ble.n	8005c12 <_strtol_l.constprop.0+0xc6>
 8005bc2:	1c57      	adds	r7, r2, #1
 8005bc4:	d007      	beq.n	8005bd6 <_strtol_l.constprop.0+0x8a>
 8005bc6:	4581      	cmp	r9, r0
 8005bc8:	d320      	bcc.n	8005c0c <_strtol_l.constprop.0+0xc0>
 8005bca:	d101      	bne.n	8005bd0 <_strtol_l.constprop.0+0x84>
 8005bcc:	45a2      	cmp	sl, r4
 8005bce:	db1d      	blt.n	8005c0c <_strtol_l.constprop.0+0xc0>
 8005bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bda:	e7eb      	b.n	8005bb4 <_strtol_l.constprop.0+0x68>
 8005bdc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005bde:	bf04      	itt	eq
 8005be0:	782c      	ldrbeq	r4, [r5, #0]
 8005be2:	1c95      	addeq	r5, r2, #2
 8005be4:	e7cf      	b.n	8005b86 <_strtol_l.constprop.0+0x3a>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1da      	bne.n	8005ba0 <_strtol_l.constprop.0+0x54>
 8005bea:	2c30      	cmp	r4, #48	@ 0x30
 8005bec:	bf0c      	ite	eq
 8005bee:	2308      	moveq	r3, #8
 8005bf0:	230a      	movne	r3, #10
 8005bf2:	e7d5      	b.n	8005ba0 <_strtol_l.constprop.0+0x54>
 8005bf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005bf8:	2f19      	cmp	r7, #25
 8005bfa:	d801      	bhi.n	8005c00 <_strtol_l.constprop.0+0xb4>
 8005bfc:	3c37      	subs	r4, #55	@ 0x37
 8005bfe:	e7de      	b.n	8005bbe <_strtol_l.constprop.0+0x72>
 8005c00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c04:	2f19      	cmp	r7, #25
 8005c06:	d804      	bhi.n	8005c12 <_strtol_l.constprop.0+0xc6>
 8005c08:	3c57      	subs	r4, #87	@ 0x57
 8005c0a:	e7d8      	b.n	8005bbe <_strtol_l.constprop.0+0x72>
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	e7e1      	b.n	8005bd6 <_strtol_l.constprop.0+0x8a>
 8005c12:	1c53      	adds	r3, r2, #1
 8005c14:	d108      	bne.n	8005c28 <_strtol_l.constprop.0+0xdc>
 8005c16:	2322      	movs	r3, #34	@ 0x22
 8005c18:	f8ce 3000 	str.w	r3, [lr]
 8005c1c:	4660      	mov	r0, ip
 8005c1e:	f1b8 0f00 	cmp.w	r8, #0
 8005c22:	d0a0      	beq.n	8005b66 <_strtol_l.constprop.0+0x1a>
 8005c24:	1e69      	subs	r1, r5, #1
 8005c26:	e006      	b.n	8005c36 <_strtol_l.constprop.0+0xea>
 8005c28:	b106      	cbz	r6, 8005c2c <_strtol_l.constprop.0+0xe0>
 8005c2a:	4240      	negs	r0, r0
 8005c2c:	f1b8 0f00 	cmp.w	r8, #0
 8005c30:	d099      	beq.n	8005b66 <_strtol_l.constprop.0+0x1a>
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1f6      	bne.n	8005c24 <_strtol_l.constprop.0+0xd8>
 8005c36:	f8c8 1000 	str.w	r1, [r8]
 8005c3a:	e794      	b.n	8005b66 <_strtol_l.constprop.0+0x1a>
 8005c3c:	08005ddb 	.word	0x08005ddb

08005c40 <_strtol_r>:
 8005c40:	f7ff bf84 	b.w	8005b4c <_strtol_l.constprop.0>

08005c44 <_strtoul_l.constprop.0>:
 8005c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c48:	4e34      	ldr	r6, [pc, #208]	@ (8005d1c <_strtoul_l.constprop.0+0xd8>)
 8005c4a:	4686      	mov	lr, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c54:	5d37      	ldrb	r7, [r6, r4]
 8005c56:	f017 0708 	ands.w	r7, r7, #8
 8005c5a:	d1f8      	bne.n	8005c4e <_strtoul_l.constprop.0+0xa>
 8005c5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c5e:	d12f      	bne.n	8005cc0 <_strtoul_l.constprop.0+0x7c>
 8005c60:	782c      	ldrb	r4, [r5, #0]
 8005c62:	2701      	movs	r7, #1
 8005c64:	1c85      	adds	r5, r0, #2
 8005c66:	f033 0010 	bics.w	r0, r3, #16
 8005c6a:	d109      	bne.n	8005c80 <_strtoul_l.constprop.0+0x3c>
 8005c6c:	2c30      	cmp	r4, #48	@ 0x30
 8005c6e:	d12c      	bne.n	8005cca <_strtoul_l.constprop.0+0x86>
 8005c70:	7828      	ldrb	r0, [r5, #0]
 8005c72:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005c76:	2858      	cmp	r0, #88	@ 0x58
 8005c78:	d127      	bne.n	8005cca <_strtoul_l.constprop.0+0x86>
 8005c7a:	786c      	ldrb	r4, [r5, #1]
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	3502      	adds	r5, #2
 8005c80:	f04f 38ff 	mov.w	r8, #4294967295
 8005c84:	2600      	movs	r6, #0
 8005c86:	fbb8 f8f3 	udiv	r8, r8, r3
 8005c8a:	fb03 f908 	mul.w	r9, r3, r8
 8005c8e:	ea6f 0909 	mvn.w	r9, r9
 8005c92:	4630      	mov	r0, r6
 8005c94:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005c98:	f1bc 0f09 	cmp.w	ip, #9
 8005c9c:	d81c      	bhi.n	8005cd8 <_strtoul_l.constprop.0+0x94>
 8005c9e:	4664      	mov	r4, ip
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	dd2a      	ble.n	8005cfa <_strtoul_l.constprop.0+0xb6>
 8005ca4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005ca8:	d007      	beq.n	8005cba <_strtoul_l.constprop.0+0x76>
 8005caa:	4580      	cmp	r8, r0
 8005cac:	d322      	bcc.n	8005cf4 <_strtoul_l.constprop.0+0xb0>
 8005cae:	d101      	bne.n	8005cb4 <_strtoul_l.constprop.0+0x70>
 8005cb0:	45a1      	cmp	r9, r4
 8005cb2:	db1f      	blt.n	8005cf4 <_strtoul_l.constprop.0+0xb0>
 8005cb4:	fb00 4003 	mla	r0, r0, r3, r4
 8005cb8:	2601      	movs	r6, #1
 8005cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cbe:	e7e9      	b.n	8005c94 <_strtoul_l.constprop.0+0x50>
 8005cc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cc2:	bf04      	itt	eq
 8005cc4:	782c      	ldrbeq	r4, [r5, #0]
 8005cc6:	1c85      	addeq	r5, r0, #2
 8005cc8:	e7cd      	b.n	8005c66 <_strtoul_l.constprop.0+0x22>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d8      	bne.n	8005c80 <_strtoul_l.constprop.0+0x3c>
 8005cce:	2c30      	cmp	r4, #48	@ 0x30
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2308      	moveq	r3, #8
 8005cd4:	230a      	movne	r3, #10
 8005cd6:	e7d3      	b.n	8005c80 <_strtoul_l.constprop.0+0x3c>
 8005cd8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005cdc:	f1bc 0f19 	cmp.w	ip, #25
 8005ce0:	d801      	bhi.n	8005ce6 <_strtoul_l.constprop.0+0xa2>
 8005ce2:	3c37      	subs	r4, #55	@ 0x37
 8005ce4:	e7dc      	b.n	8005ca0 <_strtoul_l.constprop.0+0x5c>
 8005ce6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005cea:	f1bc 0f19 	cmp.w	ip, #25
 8005cee:	d804      	bhi.n	8005cfa <_strtoul_l.constprop.0+0xb6>
 8005cf0:	3c57      	subs	r4, #87	@ 0x57
 8005cf2:	e7d5      	b.n	8005ca0 <_strtoul_l.constprop.0+0x5c>
 8005cf4:	f04f 36ff 	mov.w	r6, #4294967295
 8005cf8:	e7df      	b.n	8005cba <_strtoul_l.constprop.0+0x76>
 8005cfa:	1c73      	adds	r3, r6, #1
 8005cfc:	d106      	bne.n	8005d0c <_strtoul_l.constprop.0+0xc8>
 8005cfe:	2322      	movs	r3, #34	@ 0x22
 8005d00:	f8ce 3000 	str.w	r3, [lr]
 8005d04:	4630      	mov	r0, r6
 8005d06:	b932      	cbnz	r2, 8005d16 <_strtoul_l.constprop.0+0xd2>
 8005d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d0c:	b107      	cbz	r7, 8005d10 <_strtoul_l.constprop.0+0xcc>
 8005d0e:	4240      	negs	r0, r0
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	d0f9      	beq.n	8005d08 <_strtoul_l.constprop.0+0xc4>
 8005d14:	b106      	cbz	r6, 8005d18 <_strtoul_l.constprop.0+0xd4>
 8005d16:	1e69      	subs	r1, r5, #1
 8005d18:	6011      	str	r1, [r2, #0]
 8005d1a:	e7f5      	b.n	8005d08 <_strtoul_l.constprop.0+0xc4>
 8005d1c:	08005ddb 	.word	0x08005ddb

08005d20 <_strtoul_r>:
 8005d20:	f7ff bf90 	b.w	8005c44 <_strtoul_l.constprop.0>

08005d24 <_malloc_usable_size_r>:
 8005d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d28:	1f18      	subs	r0, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bfbc      	itt	lt
 8005d2e:	580b      	ldrlt	r3, [r1, r0]
 8005d30:	18c0      	addlt	r0, r0, r3
 8005d32:	4770      	bx	lr

08005d34 <_init>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr

08005d40 <_fini>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr
